
VFDHack32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001f10  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08002098  08002098  00012098  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080020f4  080020f4  000120f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080020f8  080020f8  000120f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000034  20000000  080020fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020034  2**0
                  CONTENTS
  7 .bss          00000150  20000034  20000034  00020034  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  20000184  20000184  00020034  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000f043  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00001ef0  00000000  00000000  0002f0a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    0000958d  00000000  00000000  00030f97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00000840  00000000  00000000  0003a528  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 00000820  00000000  00000000  0003ad68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0001d8da  00000000  00000000  0003b588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0001074b  00000000  00000000  00058e62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000af8f9  00000000  00000000  000695ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  00118ea6  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000014d0  00000000  00000000  00118efc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000034 	.word	0x20000034
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002080 	.word	0x08002080

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000038 	.word	0x20000038
 80001c4:	08002080 	.word	0x08002080

080001c8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80001cc:	4b0e      	ldr	r3, [pc, #56]	; (8000208 <HAL_InitTick+0x40>)
 80001ce:	7818      	ldrb	r0, [r3, #0]
 80001d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001d4:	fbb3 f3f0 	udiv	r3, r3, r0
 80001d8:	4a0c      	ldr	r2, [pc, #48]	; (800020c <HAL_InitTick+0x44>)
 80001da:	6810      	ldr	r0, [r2, #0]
 80001dc:	fbb0 f0f3 	udiv	r0, r0, r3
 80001e0:	f000 f880 	bl	80002e4 <HAL_SYSTICK_Config>
 80001e4:	b968      	cbnz	r0, 8000202 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80001e6:	2c0f      	cmp	r4, #15
 80001e8:	d901      	bls.n	80001ee <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 80001ea:	2001      	movs	r0, #1
 80001ec:	e00a      	b.n	8000204 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001ee:	2200      	movs	r2, #0
 80001f0:	4621      	mov	r1, r4
 80001f2:	f04f 30ff 	mov.w	r0, #4294967295
 80001f6:	f000 f841 	bl	800027c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80001fa:	4b03      	ldr	r3, [pc, #12]	; (8000208 <HAL_InitTick+0x40>)
 80001fc:	605c      	str	r4, [r3, #4]
  }
   /* Return function status */
  return HAL_OK;
 80001fe:	2000      	movs	r0, #0
 8000200:	e000      	b.n	8000204 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8000202:	2001      	movs	r0, #1
}
 8000204:	bd10      	pop	{r4, pc}
 8000206:	bf00      	nop
 8000208:	20000000 	.word	0x20000000
 800020c:	20000030 	.word	0x20000030

08000210 <HAL_Init>:
{
 8000210:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000212:	4a07      	ldr	r2, [pc, #28]	; (8000230 <HAL_Init+0x20>)
 8000214:	6813      	ldr	r3, [r2, #0]
 8000216:	f043 0310 	orr.w	r3, r3, #16
 800021a:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800021c:	2003      	movs	r0, #3
 800021e:	f000 f81b 	bl	8000258 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000222:	2000      	movs	r0, #0
 8000224:	f7ff ffd0 	bl	80001c8 <HAL_InitTick>
  HAL_MspInit();
 8000228:	f001 fe4a 	bl	8001ec0 <HAL_MspInit>
}
 800022c:	2000      	movs	r0, #0
 800022e:	bd08      	pop	{r3, pc}
 8000230:	40022000 	.word	0x40022000

08000234 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000234:	4a03      	ldr	r2, [pc, #12]	; (8000244 <HAL_IncTick+0x10>)
 8000236:	6811      	ldr	r1, [r2, #0]
 8000238:	4b03      	ldr	r3, [pc, #12]	; (8000248 <HAL_IncTick+0x14>)
 800023a:	781b      	ldrb	r3, [r3, #0]
 800023c:	440b      	add	r3, r1
 800023e:	6013      	str	r3, [r2, #0]
}
 8000240:	4770      	bx	lr
 8000242:	bf00      	nop
 8000244:	20000098 	.word	0x20000098
 8000248:	20000000 	.word	0x20000000

0800024c <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 800024c:	4b01      	ldr	r3, [pc, #4]	; (8000254 <HAL_GetTick+0x8>)
 800024e:	6818      	ldr	r0, [r3, #0]
}
 8000250:	4770      	bx	lr
 8000252:	bf00      	nop
 8000254:	20000098 	.word	0x20000098

08000258 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000258:	4a07      	ldr	r2, [pc, #28]	; (8000278 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800025a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800025c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000260:	041b      	lsls	r3, r3, #16
 8000262:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000264:	0200      	lsls	r0, r0, #8
 8000266:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800026a:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 800026c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000270:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000274:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000276:	4770      	bx	lr
 8000278:	e000ed00 	.word	0xe000ed00

0800027c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800027c:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800027e:	4b17      	ldr	r3, [pc, #92]	; (80002dc <HAL_NVIC_SetPriority+0x60>)
 8000280:	68db      	ldr	r3, [r3, #12]
 8000282:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000286:	f1c3 0407 	rsb	r4, r3, #7
 800028a:	2c04      	cmp	r4, #4
 800028c:	bf28      	it	cs
 800028e:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000290:	1d1d      	adds	r5, r3, #4
 8000292:	2d06      	cmp	r5, #6
 8000294:	d918      	bls.n	80002c8 <HAL_NVIC_SetPriority+0x4c>
 8000296:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000298:	f04f 35ff 	mov.w	r5, #4294967295
 800029c:	fa05 f404 	lsl.w	r4, r5, r4
 80002a0:	ea21 0104 	bic.w	r1, r1, r4
 80002a4:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80002a6:	fa05 f303 	lsl.w	r3, r5, r3
 80002aa:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002ae:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 80002b0:	2800      	cmp	r0, #0
 80002b2:	db0b      	blt.n	80002cc <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002b4:	0109      	lsls	r1, r1, #4
 80002b6:	b2c9      	uxtb	r1, r1
 80002b8:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80002bc:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80002c0:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80002c4:	bc30      	pop	{r4, r5}
 80002c6:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002c8:	2300      	movs	r3, #0
 80002ca:	e7e5      	b.n	8000298 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002cc:	f000 000f 	and.w	r0, r0, #15
 80002d0:	0109      	lsls	r1, r1, #4
 80002d2:	b2c9      	uxtb	r1, r1
 80002d4:	4b02      	ldr	r3, [pc, #8]	; (80002e0 <HAL_NVIC_SetPriority+0x64>)
 80002d6:	5419      	strb	r1, [r3, r0]
 80002d8:	e7f4      	b.n	80002c4 <HAL_NVIC_SetPriority+0x48>
 80002da:	bf00      	nop
 80002dc:	e000ed00 	.word	0xe000ed00
 80002e0:	e000ed14 	.word	0xe000ed14

080002e4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80002e4:	3801      	subs	r0, #1
 80002e6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80002ea:	d20a      	bcs.n	8000302 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80002ec:	4b06      	ldr	r3, [pc, #24]	; (8000308 <HAL_SYSTICK_Config+0x24>)
 80002ee:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002f0:	4a06      	ldr	r2, [pc, #24]	; (800030c <HAL_SYSTICK_Config+0x28>)
 80002f2:	21f0      	movs	r1, #240	; 0xf0
 80002f4:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002f8:	2000      	movs	r0, #0
 80002fa:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002fc:	2207      	movs	r2, #7
 80002fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000300:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000302:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000304:	4770      	bx	lr
 8000306:	bf00      	nop
 8000308:	e000e010 	.word	0xe000e010
 800030c:	e000ed00 	.word	0xe000ed00

08000310 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	b082      	sub	sp, #8
  uint32_t position = 0x00u;
 8000314:	2300      	movs	r3, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000316:	e05b      	b.n	80003d0 <HAL_GPIO_Init+0xc0>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000318:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800031a:	005f      	lsls	r7, r3, #1
 800031c:	2503      	movs	r5, #3
 800031e:	40bd      	lsls	r5, r7
 8000320:	ea26 0605 	bic.w	r6, r6, r5
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000324:	68cd      	ldr	r5, [r1, #12]
 8000326:	40bd      	lsls	r5, r7
 8000328:	4335      	orrs	r5, r6
        GPIOx->OSPEEDR = temp;
 800032a:	6085      	str	r5, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800032c:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800032e:	ea26 0604 	bic.w	r6, r6, r4
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000332:	684d      	ldr	r5, [r1, #4]
 8000334:	f3c5 1400 	ubfx	r4, r5, #4, #1
 8000338:	409c      	lsls	r4, r3
 800033a:	4334      	orrs	r4, r6
        GPIOx->OTYPER = temp;
 800033c:	6044      	str	r4, [r0, #4]
 800033e:	e055      	b.n	80003ec <HAL_GPIO_Init+0xdc>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000340:	08dd      	lsrs	r5, r3, #3
 8000342:	3508      	adds	r5, #8
 8000344:	f850 7025 	ldr.w	r7, [r0, r5, lsl #2]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000348:	f003 0407 	and.w	r4, r3, #7
 800034c:	00a6      	lsls	r6, r4, #2
 800034e:	240f      	movs	r4, #15
 8000350:	40b4      	lsls	r4, r6
 8000352:	ea27 0704 	bic.w	r7, r7, r4
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000356:	690c      	ldr	r4, [r1, #16]
 8000358:	40b4      	lsls	r4, r6
 800035a:	433c      	orrs	r4, r7
        GPIOx->AFR[position >> 3u] = temp;
 800035c:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
 8000360:	e058      	b.n	8000414 <HAL_GPIO_Init+0x104>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000362:	2404      	movs	r4, #4
 8000364:	e000      	b.n	8000368 <HAL_GPIO_Init+0x58>
 8000366:	2400      	movs	r4, #0
 8000368:	40b4      	lsls	r4, r6
 800036a:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 800036c:	3502      	adds	r5, #2
 800036e:	4e4c      	ldr	r6, [pc, #304]	; (80004a0 <HAL_GPIO_Init+0x190>)
 8000370:	f846 4025 	str.w	r4, [r6, r5, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000374:	4c4b      	ldr	r4, [pc, #300]	; (80004a4 <HAL_GPIO_Init+0x194>)
 8000376:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 8000378:	43d4      	mvns	r4, r2
 800037a:	ea25 0602 	bic.w	r6, r5, r2
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800037e:	684f      	ldr	r7, [r1, #4]
 8000380:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8000384:	d001      	beq.n	800038a <HAL_GPIO_Init+0x7a>
        {
          temp |= iocurrent;
 8000386:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->IMR = temp;
 800038a:	4d46      	ldr	r5, [pc, #280]	; (80004a4 <HAL_GPIO_Init+0x194>)
 800038c:	602e      	str	r6, [r5, #0]

        temp = EXTI->EMR;
 800038e:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 8000390:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000394:	684f      	ldr	r7, [r1, #4]
 8000396:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 800039a:	d001      	beq.n	80003a0 <HAL_GPIO_Init+0x90>
        {
          temp |= iocurrent;
 800039c:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->EMR = temp;
 80003a0:	4d40      	ldr	r5, [pc, #256]	; (80004a4 <HAL_GPIO_Init+0x194>)
 80003a2:	606e      	str	r6, [r5, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80003a4:	68ad      	ldr	r5, [r5, #8]
        temp &= ~(iocurrent);
 80003a6:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80003aa:	684f      	ldr	r7, [r1, #4]
 80003ac:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 80003b0:	d001      	beq.n	80003b6 <HAL_GPIO_Init+0xa6>
        {
          temp |= iocurrent;
 80003b2:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR = temp;
 80003b6:	4d3b      	ldr	r5, [pc, #236]	; (80004a4 <HAL_GPIO_Init+0x194>)
 80003b8:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR;
 80003ba:	68ed      	ldr	r5, [r5, #12]
        temp &= ~(iocurrent);
 80003bc:	402c      	ands	r4, r5
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80003be:	684e      	ldr	r6, [r1, #4]
 80003c0:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 80003c4:	d001      	beq.n	80003ca <HAL_GPIO_Init+0xba>
        {
          temp |= iocurrent;
 80003c6:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->FTSR = temp;
 80003ca:	4a36      	ldr	r2, [pc, #216]	; (80004a4 <HAL_GPIO_Init+0x194>)
 80003cc:	60d4      	str	r4, [r2, #12]
      }
    }

    position++;
 80003ce:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80003d0:	680a      	ldr	r2, [r1, #0]
 80003d2:	fa32 f403 	lsrs.w	r4, r2, r3
 80003d6:	d05f      	beq.n	8000498 <HAL_GPIO_Init+0x188>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80003d8:	2401      	movs	r4, #1
 80003da:	409c      	lsls	r4, r3
    if (iocurrent != 0x00u)
 80003dc:	4022      	ands	r2, r4
 80003de:	d0f6      	beq.n	80003ce <HAL_GPIO_Init+0xbe>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80003e0:	684d      	ldr	r5, [r1, #4]
 80003e2:	f005 0503 	and.w	r5, r5, #3
 80003e6:	3d01      	subs	r5, #1
 80003e8:	2d01      	cmp	r5, #1
 80003ea:	d995      	bls.n	8000318 <HAL_GPIO_Init+0x8>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80003ec:	684c      	ldr	r4, [r1, #4]
 80003ee:	f004 0403 	and.w	r4, r4, #3
 80003f2:	2c03      	cmp	r4, #3
 80003f4:	d009      	beq.n	800040a <HAL_GPIO_Init+0xfa>
        temp = GPIOx->PUPDR;
 80003f6:	68c5      	ldr	r5, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80003f8:	005e      	lsls	r6, r3, #1
 80003fa:	2403      	movs	r4, #3
 80003fc:	40b4      	lsls	r4, r6
 80003fe:	ea25 0504 	bic.w	r5, r5, r4
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000402:	688c      	ldr	r4, [r1, #8]
 8000404:	40b4      	lsls	r4, r6
 8000406:	432c      	orrs	r4, r5
        GPIOx->PUPDR = temp;
 8000408:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800040a:	684c      	ldr	r4, [r1, #4]
 800040c:	f004 0403 	and.w	r4, r4, #3
 8000410:	2c02      	cmp	r4, #2
 8000412:	d095      	beq.n	8000340 <HAL_GPIO_Init+0x30>
      temp = GPIOx->MODER;
 8000414:	6805      	ldr	r5, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000416:	005e      	lsls	r6, r3, #1
 8000418:	2403      	movs	r4, #3
 800041a:	40b4      	lsls	r4, r6
 800041c:	ea25 0504 	bic.w	r5, r5, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000420:	684c      	ldr	r4, [r1, #4]
 8000422:	f004 0403 	and.w	r4, r4, #3
 8000426:	40b4      	lsls	r4, r6
 8000428:	432c      	orrs	r4, r5
      GPIOx->MODER = temp;
 800042a:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800042c:	684c      	ldr	r4, [r1, #4]
 800042e:	f414 3f40 	tst.w	r4, #196608	; 0x30000
 8000432:	d0cc      	beq.n	80003ce <HAL_GPIO_Init+0xbe>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000434:	4c1c      	ldr	r4, [pc, #112]	; (80004a8 <HAL_GPIO_Init+0x198>)
 8000436:	69a5      	ldr	r5, [r4, #24]
 8000438:	f045 0501 	orr.w	r5, r5, #1
 800043c:	61a5      	str	r5, [r4, #24]
 800043e:	69a4      	ldr	r4, [r4, #24]
 8000440:	f004 0401 	and.w	r4, r4, #1
 8000444:	9401      	str	r4, [sp, #4]
 8000446:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 8000448:	089d      	lsrs	r5, r3, #2
 800044a:	1cae      	adds	r6, r5, #2
 800044c:	4c14      	ldr	r4, [pc, #80]	; (80004a0 <HAL_GPIO_Init+0x190>)
 800044e:	f854 7026 	ldr.w	r7, [r4, r6, lsl #2]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000452:	f003 0403 	and.w	r4, r3, #3
 8000456:	00a6      	lsls	r6, r4, #2
 8000458:	240f      	movs	r4, #15
 800045a:	40b4      	lsls	r4, r6
 800045c:	ea27 0704 	bic.w	r7, r7, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000460:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8000464:	f43f af7f 	beq.w	8000366 <HAL_GPIO_Init+0x56>
 8000468:	4c10      	ldr	r4, [pc, #64]	; (80004ac <HAL_GPIO_Init+0x19c>)
 800046a:	42a0      	cmp	r0, r4
 800046c:	d00e      	beq.n	800048c <HAL_GPIO_Init+0x17c>
 800046e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000472:	42a0      	cmp	r0, r4
 8000474:	d00c      	beq.n	8000490 <HAL_GPIO_Init+0x180>
 8000476:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800047a:	42a0      	cmp	r0, r4
 800047c:	d00a      	beq.n	8000494 <HAL_GPIO_Init+0x184>
 800047e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000482:	42a0      	cmp	r0, r4
 8000484:	f43f af6d 	beq.w	8000362 <HAL_GPIO_Init+0x52>
 8000488:	2405      	movs	r4, #5
 800048a:	e76d      	b.n	8000368 <HAL_GPIO_Init+0x58>
 800048c:	2401      	movs	r4, #1
 800048e:	e76b      	b.n	8000368 <HAL_GPIO_Init+0x58>
 8000490:	2402      	movs	r4, #2
 8000492:	e769      	b.n	8000368 <HAL_GPIO_Init+0x58>
 8000494:	2403      	movs	r4, #3
 8000496:	e767      	b.n	8000368 <HAL_GPIO_Init+0x58>
  }
}
 8000498:	b002      	add	sp, #8
 800049a:	bcf0      	pop	{r4, r5, r6, r7}
 800049c:	4770      	bx	lr
 800049e:	bf00      	nop
 80004a0:	40010000 	.word	0x40010000
 80004a4:	40010400 	.word	0x40010400
 80004a8:	40021000 	.word	0x40021000
 80004ac:	48000400 	.word	0x48000400

080004b0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80004b0:	b10a      	cbz	r2, 80004b6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80004b2:	6181      	str	r1, [r0, #24]
 80004b4:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80004b6:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 80004b8:	4770      	bx	lr
	...

080004bc <HAL_RCC_OscConfig>:
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80004bc:	2800      	cmp	r0, #0
 80004be:	f000 8301 	beq.w	8000ac4 <HAL_RCC_OscConfig+0x608>
{
 80004c2:	b570      	push	{r4, r5, r6, lr}
 80004c4:	b082      	sub	sp, #8
 80004c6:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80004c8:	6803      	ldr	r3, [r0, #0]
 80004ca:	f013 0f01 	tst.w	r3, #1
 80004ce:	d03b      	beq.n	8000548 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80004d0:	4bb5      	ldr	r3, [pc, #724]	; (80007a8 <HAL_RCC_OscConfig+0x2ec>)
 80004d2:	685b      	ldr	r3, [r3, #4]
 80004d4:	f003 030c 	and.w	r3, r3, #12
 80004d8:	2b04      	cmp	r3, #4
 80004da:	d01e      	beq.n	800051a <HAL_RCC_OscConfig+0x5e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80004dc:	4bb2      	ldr	r3, [pc, #712]	; (80007a8 <HAL_RCC_OscConfig+0x2ec>)
 80004de:	685b      	ldr	r3, [r3, #4]
 80004e0:	f003 030c 	and.w	r3, r3, #12
 80004e4:	2b08      	cmp	r3, #8
 80004e6:	d013      	beq.n	8000510 <HAL_RCC_OscConfig+0x54>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80004e8:	6863      	ldr	r3, [r4, #4]
 80004ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80004ee:	d068      	beq.n	80005c2 <HAL_RCC_OscConfig+0x106>
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	f040 8092 	bne.w	800061a <HAL_RCC_OscConfig+0x15e>
 80004f6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80004fa:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80004fe:	681a      	ldr	r2, [r3, #0]
 8000500:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000504:	601a      	str	r2, [r3, #0]
 8000506:	681a      	ldr	r2, [r3, #0]
 8000508:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800050c:	601a      	str	r2, [r3, #0]
 800050e:	e05d      	b.n	80005cc <HAL_RCC_OscConfig+0x110>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000510:	4ba5      	ldr	r3, [pc, #660]	; (80007a8 <HAL_RCC_OscConfig+0x2ec>)
 8000512:	685b      	ldr	r3, [r3, #4]
 8000514:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8000518:	d0e6      	beq.n	80004e8 <HAL_RCC_OscConfig+0x2c>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800051a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800051e:	fa93 f3a3 	rbit	r3, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000522:	4ba1      	ldr	r3, [pc, #644]	; (80007a8 <HAL_RCC_OscConfig+0x2ec>)
 8000524:	6819      	ldr	r1, [r3, #0]
 8000526:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800052a:	fa93 f3a3 	rbit	r3, r3
 800052e:	fab3 f383 	clz	r3, r3
 8000532:	f003 031f 	and.w	r3, r3, #31
 8000536:	2201      	movs	r2, #1
 8000538:	fa02 f303 	lsl.w	r3, r2, r3
 800053c:	420b      	tst	r3, r1
 800053e:	d003      	beq.n	8000548 <HAL_RCC_OscConfig+0x8c>
 8000540:	6863      	ldr	r3, [r4, #4]
 8000542:	2b00      	cmp	r3, #0
 8000544:	f000 82c0 	beq.w	8000ac8 <HAL_RCC_OscConfig+0x60c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000548:	6823      	ldr	r3, [r4, #0]
 800054a:	f013 0f02 	tst.w	r3, #2
 800054e:	f000 80c5 	beq.w	80006dc <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000552:	4b95      	ldr	r3, [pc, #596]	; (80007a8 <HAL_RCC_OscConfig+0x2ec>)
 8000554:	685b      	ldr	r3, [r3, #4]
 8000556:	f013 0f0c 	tst.w	r3, #12
 800055a:	f000 809c 	beq.w	8000696 <HAL_RCC_OscConfig+0x1da>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800055e:	4b92      	ldr	r3, [pc, #584]	; (80007a8 <HAL_RCC_OscConfig+0x2ec>)
 8000560:	685b      	ldr	r3, [r3, #4]
 8000562:	f003 030c 	and.w	r3, r3, #12
 8000566:	2b08      	cmp	r3, #8
 8000568:	f000 808f 	beq.w	800068a <HAL_RCC_OscConfig+0x1ce>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800056c:	6923      	ldr	r3, [r4, #16]
 800056e:	2b00      	cmp	r3, #0
 8000570:	f000 80f2 	beq.w	8000758 <HAL_RCC_OscConfig+0x29c>
 8000574:	2201      	movs	r2, #1
 8000576:	fa92 f3a2 	rbit	r3, r2
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800057a:	fab3 f383 	clz	r3, r3
 800057e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000582:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000586:	009b      	lsls	r3, r3, #2
 8000588:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800058a:	f7ff fe5f 	bl	800024c <HAL_GetTick>
 800058e:	4605      	mov	r5, r0
 8000590:	2302      	movs	r3, #2
 8000592:	fa93 f3a3 	rbit	r3, r3
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000596:	4b84      	ldr	r3, [pc, #528]	; (80007a8 <HAL_RCC_OscConfig+0x2ec>)
 8000598:	6819      	ldr	r1, [r3, #0]
 800059a:	2302      	movs	r3, #2
 800059c:	fa93 f3a3 	rbit	r3, r3
 80005a0:	fab3 f383 	clz	r3, r3
 80005a4:	f003 031f 	and.w	r3, r3, #31
 80005a8:	2201      	movs	r2, #1
 80005aa:	fa02 f303 	lsl.w	r3, r2, r3
 80005ae:	420b      	tst	r3, r1
 80005b0:	f040 80c3 	bne.w	800073a <HAL_RCC_OscConfig+0x27e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80005b4:	f7ff fe4a 	bl	800024c <HAL_GetTick>
 80005b8:	1b40      	subs	r0, r0, r5
 80005ba:	2802      	cmp	r0, #2
 80005bc:	d9e8      	bls.n	8000590 <HAL_RCC_OscConfig+0xd4>
          {
            return HAL_TIMEOUT;
 80005be:	2003      	movs	r0, #3
 80005c0:	e28b      	b.n	8000ada <HAL_RCC_OscConfig+0x61e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80005c2:	4a79      	ldr	r2, [pc, #484]	; (80007a8 <HAL_RCC_OscConfig+0x2ec>)
 80005c4:	6813      	ldr	r3, [r2, #0]
 80005c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80005ca:	6013      	str	r3, [r2, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80005cc:	4a76      	ldr	r2, [pc, #472]	; (80007a8 <HAL_RCC_OscConfig+0x2ec>)
 80005ce:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80005d0:	f023 030f 	bic.w	r3, r3, #15
 80005d4:	68a1      	ldr	r1, [r4, #8]
 80005d6:	430b      	orrs	r3, r1
 80005d8:	62d3      	str	r3, [r2, #44]	; 0x2c
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80005da:	6863      	ldr	r3, [r4, #4]
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d036      	beq.n	800064e <HAL_RCC_OscConfig+0x192>
        tickstart = HAL_GetTick();
 80005e0:	f7ff fe34 	bl	800024c <HAL_GetTick>
 80005e4:	4605      	mov	r5, r0
 80005e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80005ea:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80005ee:	4b6e      	ldr	r3, [pc, #440]	; (80007a8 <HAL_RCC_OscConfig+0x2ec>)
 80005f0:	6819      	ldr	r1, [r3, #0]
 80005f2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80005f6:	fa93 f3a3 	rbit	r3, r3
 80005fa:	fab3 f383 	clz	r3, r3
 80005fe:	f003 031f 	and.w	r3, r3, #31
 8000602:	2201      	movs	r2, #1
 8000604:	fa02 f303 	lsl.w	r3, r2, r3
 8000608:	420b      	tst	r3, r1
 800060a:	d19d      	bne.n	8000548 <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800060c:	f7ff fe1e 	bl	800024c <HAL_GetTick>
 8000610:	1b40      	subs	r0, r0, r5
 8000612:	2864      	cmp	r0, #100	; 0x64
 8000614:	d9e7      	bls.n	80005e6 <HAL_RCC_OscConfig+0x12a>
            return HAL_TIMEOUT;
 8000616:	2003      	movs	r0, #3
 8000618:	e25f      	b.n	8000ada <HAL_RCC_OscConfig+0x61e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800061a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800061e:	d009      	beq.n	8000634 <HAL_RCC_OscConfig+0x178>
 8000620:	4b61      	ldr	r3, [pc, #388]	; (80007a8 <HAL_RCC_OscConfig+0x2ec>)
 8000622:	681a      	ldr	r2, [r3, #0]
 8000624:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000628:	601a      	str	r2, [r3, #0]
 800062a:	681a      	ldr	r2, [r3, #0]
 800062c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000630:	601a      	str	r2, [r3, #0]
 8000632:	e7cb      	b.n	80005cc <HAL_RCC_OscConfig+0x110>
 8000634:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000638:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 800063c:	681a      	ldr	r2, [r3, #0]
 800063e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000642:	601a      	str	r2, [r3, #0]
 8000644:	681a      	ldr	r2, [r3, #0]
 8000646:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800064a:	601a      	str	r2, [r3, #0]
 800064c:	e7be      	b.n	80005cc <HAL_RCC_OscConfig+0x110>
        tickstart = HAL_GetTick();
 800064e:	f7ff fdfd 	bl	800024c <HAL_GetTick>
 8000652:	4605      	mov	r5, r0
 8000654:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000658:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800065c:	4b52      	ldr	r3, [pc, #328]	; (80007a8 <HAL_RCC_OscConfig+0x2ec>)
 800065e:	6819      	ldr	r1, [r3, #0]
 8000660:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000664:	fa93 f3a3 	rbit	r3, r3
 8000668:	fab3 f383 	clz	r3, r3
 800066c:	f003 031f 	and.w	r3, r3, #31
 8000670:	2201      	movs	r2, #1
 8000672:	fa02 f303 	lsl.w	r3, r2, r3
 8000676:	420b      	tst	r3, r1
 8000678:	f43f af66 	beq.w	8000548 <HAL_RCC_OscConfig+0x8c>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800067c:	f7ff fde6 	bl	800024c <HAL_GetTick>
 8000680:	1b40      	subs	r0, r0, r5
 8000682:	2864      	cmp	r0, #100	; 0x64
 8000684:	d9e6      	bls.n	8000654 <HAL_RCC_OscConfig+0x198>
            return HAL_TIMEOUT;
 8000686:	2003      	movs	r0, #3
 8000688:	e227      	b.n	8000ada <HAL_RCC_OscConfig+0x61e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800068a:	4b47      	ldr	r3, [pc, #284]	; (80007a8 <HAL_RCC_OscConfig+0x2ec>)
 800068c:	685b      	ldr	r3, [r3, #4]
 800068e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8000692:	f47f af6b 	bne.w	800056c <HAL_RCC_OscConfig+0xb0>
 8000696:	2302      	movs	r3, #2
 8000698:	fa93 f3a3 	rbit	r3, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800069c:	4b42      	ldr	r3, [pc, #264]	; (80007a8 <HAL_RCC_OscConfig+0x2ec>)
 800069e:	6819      	ldr	r1, [r3, #0]
 80006a0:	2302      	movs	r3, #2
 80006a2:	fa93 f3a3 	rbit	r3, r3
 80006a6:	fab3 f383 	clz	r3, r3
 80006aa:	f003 031f 	and.w	r3, r3, #31
 80006ae:	2201      	movs	r2, #1
 80006b0:	fa02 f303 	lsl.w	r3, r2, r3
 80006b4:	420b      	tst	r3, r1
 80006b6:	d003      	beq.n	80006c0 <HAL_RCC_OscConfig+0x204>
 80006b8:	6923      	ldr	r3, [r4, #16]
 80006ba:	4293      	cmp	r3, r2
 80006bc:	f040 8206 	bne.w	8000acc <HAL_RCC_OscConfig+0x610>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80006c0:	4839      	ldr	r0, [pc, #228]	; (80007a8 <HAL_RCC_OscConfig+0x2ec>)
 80006c2:	6803      	ldr	r3, [r0, #0]
 80006c4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80006c8:	6961      	ldr	r1, [r4, #20]
 80006ca:	22f8      	movs	r2, #248	; 0xf8
 80006cc:	fa92 f2a2 	rbit	r2, r2
 80006d0:	fab2 f282 	clz	r2, r2
 80006d4:	fa01 f202 	lsl.w	r2, r1, r2
 80006d8:	4313      	orrs	r3, r2
 80006da:	6003      	str	r3, [r0, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80006dc:	6823      	ldr	r3, [r4, #0]
 80006de:	f013 0f08 	tst.w	r3, #8
 80006e2:	f000 808d 	beq.w	8000800 <HAL_RCC_OscConfig+0x344>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80006e6:	69a3      	ldr	r3, [r4, #24]
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d061      	beq.n	80007b0 <HAL_RCC_OscConfig+0x2f4>
 80006ec:	2101      	movs	r1, #1
 80006ee:	fa91 f2a1 	rbit	r2, r1
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80006f2:	fab2 f282 	clz	r2, r2
 80006f6:	4b2d      	ldr	r3, [pc, #180]	; (80007ac <HAL_RCC_OscConfig+0x2f0>)
 80006f8:	4413      	add	r3, r2
 80006fa:	009b      	lsls	r3, r3, #2
 80006fc:	6019      	str	r1, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80006fe:	f7ff fda5 	bl	800024c <HAL_GetTick>
 8000702:	4605      	mov	r5, r0
 8000704:	2302      	movs	r3, #2
 8000706:	fa93 f2a3 	rbit	r2, r3
 800070a:	fa93 f2a3 	rbit	r2, r3
 800070e:	fa93 f2a3 	rbit	r2, r3
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000712:	4a25      	ldr	r2, [pc, #148]	; (80007a8 <HAL_RCC_OscConfig+0x2ec>)
 8000714:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8000716:	fa93 f3a3 	rbit	r3, r3
 800071a:	fab3 f383 	clz	r3, r3
 800071e:	f003 031f 	and.w	r3, r3, #31
 8000722:	2201      	movs	r2, #1
 8000724:	fa02 f303 	lsl.w	r3, r2, r3
 8000728:	420b      	tst	r3, r1
 800072a:	d169      	bne.n	8000800 <HAL_RCC_OscConfig+0x344>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800072c:	f7ff fd8e 	bl	800024c <HAL_GetTick>
 8000730:	1b40      	subs	r0, r0, r5
 8000732:	2802      	cmp	r0, #2
 8000734:	d9e6      	bls.n	8000704 <HAL_RCC_OscConfig+0x248>
        {
          return HAL_TIMEOUT;
 8000736:	2003      	movs	r0, #3
 8000738:	e1cf      	b.n	8000ada <HAL_RCC_OscConfig+0x61e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800073a:	481b      	ldr	r0, [pc, #108]	; (80007a8 <HAL_RCC_OscConfig+0x2ec>)
 800073c:	6803      	ldr	r3, [r0, #0]
 800073e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000742:	6961      	ldr	r1, [r4, #20]
 8000744:	22f8      	movs	r2, #248	; 0xf8
 8000746:	fa92 f2a2 	rbit	r2, r2
 800074a:	fab2 f282 	clz	r2, r2
 800074e:	fa01 f202 	lsl.w	r2, r1, r2
 8000752:	4313      	orrs	r3, r2
 8000754:	6003      	str	r3, [r0, #0]
 8000756:	e7c1      	b.n	80006dc <HAL_RCC_OscConfig+0x220>
 8000758:	2301      	movs	r3, #1
 800075a:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_HSI_DISABLE();
 800075e:	fab3 f383 	clz	r3, r3
 8000762:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000766:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800076a:	009b      	lsls	r3, r3, #2
 800076c:	2200      	movs	r2, #0
 800076e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000770:	f7ff fd6c 	bl	800024c <HAL_GetTick>
 8000774:	4605      	mov	r5, r0
 8000776:	2302      	movs	r3, #2
 8000778:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800077c:	4b0a      	ldr	r3, [pc, #40]	; (80007a8 <HAL_RCC_OscConfig+0x2ec>)
 800077e:	6819      	ldr	r1, [r3, #0]
 8000780:	2302      	movs	r3, #2
 8000782:	fa93 f3a3 	rbit	r3, r3
 8000786:	fab3 f383 	clz	r3, r3
 800078a:	f003 031f 	and.w	r3, r3, #31
 800078e:	2201      	movs	r2, #1
 8000790:	fa02 f303 	lsl.w	r3, r2, r3
 8000794:	420b      	tst	r3, r1
 8000796:	d0a1      	beq.n	80006dc <HAL_RCC_OscConfig+0x220>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000798:	f7ff fd58 	bl	800024c <HAL_GetTick>
 800079c:	1b40      	subs	r0, r0, r5
 800079e:	2802      	cmp	r0, #2
 80007a0:	d9e9      	bls.n	8000776 <HAL_RCC_OscConfig+0x2ba>
            return HAL_TIMEOUT;
 80007a2:	2003      	movs	r0, #3
 80007a4:	e199      	b.n	8000ada <HAL_RCC_OscConfig+0x61e>
 80007a6:	bf00      	nop
 80007a8:	40021000 	.word	0x40021000
 80007ac:	10908120 	.word	0x10908120
 80007b0:	2201      	movs	r2, #1
 80007b2:	fa92 f2a2 	rbit	r2, r2
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80007b6:	fab2 f282 	clz	r2, r2
 80007ba:	4bb7      	ldr	r3, [pc, #732]	; (8000a98 <HAL_RCC_OscConfig+0x5dc>)
 80007bc:	4413      	add	r3, r2
 80007be:	009b      	lsls	r3, r3, #2
 80007c0:	2200      	movs	r2, #0
 80007c2:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80007c4:	f7ff fd42 	bl	800024c <HAL_GetTick>
 80007c8:	4605      	mov	r5, r0
 80007ca:	2302      	movs	r3, #2
 80007cc:	fa93 f2a3 	rbit	r2, r3
 80007d0:	fa93 f2a3 	rbit	r2, r3
 80007d4:	fa93 f2a3 	rbit	r2, r3
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80007d8:	4ab0      	ldr	r2, [pc, #704]	; (8000a9c <HAL_RCC_OscConfig+0x5e0>)
 80007da:	6a51      	ldr	r1, [r2, #36]	; 0x24
 80007dc:	fa93 f3a3 	rbit	r3, r3
 80007e0:	fab3 f383 	clz	r3, r3
 80007e4:	f003 031f 	and.w	r3, r3, #31
 80007e8:	2201      	movs	r2, #1
 80007ea:	fa02 f303 	lsl.w	r3, r2, r3
 80007ee:	420b      	tst	r3, r1
 80007f0:	d006      	beq.n	8000800 <HAL_RCC_OscConfig+0x344>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80007f2:	f7ff fd2b 	bl	800024c <HAL_GetTick>
 80007f6:	1b40      	subs	r0, r0, r5
 80007f8:	2802      	cmp	r0, #2
 80007fa:	d9e6      	bls.n	80007ca <HAL_RCC_OscConfig+0x30e>
        {
          return HAL_TIMEOUT;
 80007fc:	2003      	movs	r0, #3
 80007fe:	e16c      	b.n	8000ada <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000800:	6823      	ldr	r3, [r4, #0]
 8000802:	f013 0f04 	tst.w	r3, #4
 8000806:	f000 80a9 	beq.w	800095c <HAL_RCC_OscConfig+0x4a0>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800080a:	4ba4      	ldr	r3, [pc, #656]	; (8000a9c <HAL_RCC_OscConfig+0x5e0>)
 800080c:	69db      	ldr	r3, [r3, #28]
 800080e:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8000812:	d10b      	bne.n	800082c <HAL_RCC_OscConfig+0x370>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000814:	4ba1      	ldr	r3, [pc, #644]	; (8000a9c <HAL_RCC_OscConfig+0x5e0>)
 8000816:	69da      	ldr	r2, [r3, #28]
 8000818:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800081c:	61da      	str	r2, [r3, #28]
 800081e:	69db      	ldr	r3, [r3, #28]
 8000820:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000824:	9301      	str	r3, [sp, #4]
 8000826:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000828:	2501      	movs	r5, #1
 800082a:	e000      	b.n	800082e <HAL_RCC_OscConfig+0x372>
    FlagStatus       pwrclkchanged = RESET;
 800082c:	2500      	movs	r5, #0
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800082e:	4b9c      	ldr	r3, [pc, #624]	; (8000aa0 <HAL_RCC_OscConfig+0x5e4>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000836:	d010      	beq.n	800085a <HAL_RCC_OscConfig+0x39e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000838:	68e3      	ldr	r3, [r4, #12]
 800083a:	2b01      	cmp	r3, #1
 800083c:	d021      	beq.n	8000882 <HAL_RCC_OscConfig+0x3c6>
 800083e:	bb63      	cbnz	r3, 800089a <HAL_RCC_OscConfig+0x3de>
 8000840:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000844:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8000848:	6a1a      	ldr	r2, [r3, #32]
 800084a:	f022 0201 	bic.w	r2, r2, #1
 800084e:	621a      	str	r2, [r3, #32]
 8000850:	6a1a      	ldr	r2, [r3, #32]
 8000852:	f022 0204 	bic.w	r2, r2, #4
 8000856:	621a      	str	r2, [r3, #32]
 8000858:	e018      	b.n	800088c <HAL_RCC_OscConfig+0x3d0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800085a:	4a91      	ldr	r2, [pc, #580]	; (8000aa0 <HAL_RCC_OscConfig+0x5e4>)
 800085c:	6813      	ldr	r3, [r2, #0]
 800085e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000862:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8000864:	f7ff fcf2 	bl	800024c <HAL_GetTick>
 8000868:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800086a:	4b8d      	ldr	r3, [pc, #564]	; (8000aa0 <HAL_RCC_OscConfig+0x5e4>)
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000872:	d1e1      	bne.n	8000838 <HAL_RCC_OscConfig+0x37c>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000874:	f7ff fcea 	bl	800024c <HAL_GetTick>
 8000878:	1b80      	subs	r0, r0, r6
 800087a:	2864      	cmp	r0, #100	; 0x64
 800087c:	d9f5      	bls.n	800086a <HAL_RCC_OscConfig+0x3ae>
          return HAL_TIMEOUT;
 800087e:	2003      	movs	r0, #3
 8000880:	e12b      	b.n	8000ada <HAL_RCC_OscConfig+0x61e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000882:	4a86      	ldr	r2, [pc, #536]	; (8000a9c <HAL_RCC_OscConfig+0x5e0>)
 8000884:	6a13      	ldr	r3, [r2, #32]
 8000886:	f043 0301 	orr.w	r3, r3, #1
 800088a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800088c:	68e3      	ldr	r3, [r4, #12]
 800088e:	2b00      	cmp	r3, #0
 8000890:	d03c      	beq.n	800090c <HAL_RCC_OscConfig+0x450>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000892:	f7ff fcdb 	bl	800024c <HAL_GetTick>
 8000896:	4606      	mov	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000898:	e02e      	b.n	80008f8 <HAL_RCC_OscConfig+0x43c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800089a:	2b05      	cmp	r3, #5
 800089c:	d009      	beq.n	80008b2 <HAL_RCC_OscConfig+0x3f6>
 800089e:	4b7f      	ldr	r3, [pc, #508]	; (8000a9c <HAL_RCC_OscConfig+0x5e0>)
 80008a0:	6a1a      	ldr	r2, [r3, #32]
 80008a2:	f022 0201 	bic.w	r2, r2, #1
 80008a6:	621a      	str	r2, [r3, #32]
 80008a8:	6a1a      	ldr	r2, [r3, #32]
 80008aa:	f022 0204 	bic.w	r2, r2, #4
 80008ae:	621a      	str	r2, [r3, #32]
 80008b0:	e7ec      	b.n	800088c <HAL_RCC_OscConfig+0x3d0>
 80008b2:	4b7a      	ldr	r3, [pc, #488]	; (8000a9c <HAL_RCC_OscConfig+0x5e0>)
 80008b4:	6a1a      	ldr	r2, [r3, #32]
 80008b6:	f042 0204 	orr.w	r2, r2, #4
 80008ba:	621a      	str	r2, [r3, #32]
 80008bc:	6a1a      	ldr	r2, [r3, #32]
 80008be:	f042 0201 	orr.w	r2, r2, #1
 80008c2:	621a      	str	r2, [r3, #32]
 80008c4:	e7e2      	b.n	800088c <HAL_RCC_OscConfig+0x3d0>
 80008c6:	2302      	movs	r3, #2
 80008c8:	fa93 f3a3 	rbit	r3, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80008cc:	4b73      	ldr	r3, [pc, #460]	; (8000a9c <HAL_RCC_OscConfig+0x5e0>)
 80008ce:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80008d0:	2302      	movs	r3, #2
 80008d2:	fa93 f3a3 	rbit	r3, r3
 80008d6:	fab3 f383 	clz	r3, r3
 80008da:	f003 031f 	and.w	r3, r3, #31
 80008de:	2201      	movs	r2, #1
 80008e0:	fa02 f303 	lsl.w	r3, r2, r3
 80008e4:	4219      	tst	r1, r3
 80008e6:	d138      	bne.n	800095a <HAL_RCC_OscConfig+0x49e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80008e8:	f7ff fcb0 	bl	800024c <HAL_GetTick>
 80008ec:	1b80      	subs	r0, r0, r6
 80008ee:	f241 3388 	movw	r3, #5000	; 0x1388
 80008f2:	4298      	cmp	r0, r3
 80008f4:	f200 80ec 	bhi.w	8000ad0 <HAL_RCC_OscConfig+0x614>
 80008f8:	2302      	movs	r3, #2
 80008fa:	fa93 f2a3 	rbit	r2, r3
 80008fe:	fa93 f3a3 	rbit	r3, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000902:	2b00      	cmp	r3, #0
 8000904:	d0df      	beq.n	80008c6 <HAL_RCC_OscConfig+0x40a>
 8000906:	4b65      	ldr	r3, [pc, #404]	; (8000a9c <HAL_RCC_OscConfig+0x5e0>)
 8000908:	6a19      	ldr	r1, [r3, #32]
 800090a:	e7e1      	b.n	80008d0 <HAL_RCC_OscConfig+0x414>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800090c:	f7ff fc9e 	bl	800024c <HAL_GetTick>
 8000910:	4606      	mov	r6, r0
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000912:	e018      	b.n	8000946 <HAL_RCC_OscConfig+0x48a>
 8000914:	2302      	movs	r3, #2
 8000916:	fa93 f3a3 	rbit	r3, r3
 800091a:	4b60      	ldr	r3, [pc, #384]	; (8000a9c <HAL_RCC_OscConfig+0x5e0>)
 800091c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800091e:	2302      	movs	r3, #2
 8000920:	fa93 f3a3 	rbit	r3, r3
 8000924:	fab3 f383 	clz	r3, r3
 8000928:	f003 031f 	and.w	r3, r3, #31
 800092c:	2201      	movs	r2, #1
 800092e:	fa02 f303 	lsl.w	r3, r2, r3
 8000932:	4219      	tst	r1, r3
 8000934:	d011      	beq.n	800095a <HAL_RCC_OscConfig+0x49e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000936:	f7ff fc89 	bl	800024c <HAL_GetTick>
 800093a:	1b80      	subs	r0, r0, r6
 800093c:	f241 3388 	movw	r3, #5000	; 0x1388
 8000940:	4298      	cmp	r0, r3
 8000942:	f200 80c7 	bhi.w	8000ad4 <HAL_RCC_OscConfig+0x618>
 8000946:	2302      	movs	r3, #2
 8000948:	fa93 f2a3 	rbit	r2, r3
 800094c:	fa93 f3a3 	rbit	r3, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000950:	2b00      	cmp	r3, #0
 8000952:	d0df      	beq.n	8000914 <HAL_RCC_OscConfig+0x458>
 8000954:	4b51      	ldr	r3, [pc, #324]	; (8000a9c <HAL_RCC_OscConfig+0x5e0>)
 8000956:	6a19      	ldr	r1, [r3, #32]
 8000958:	e7e1      	b.n	800091e <HAL_RCC_OscConfig+0x462>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800095a:	bbb5      	cbnz	r5, 80009ca <HAL_RCC_OscConfig+0x50e>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800095c:	69e3      	ldr	r3, [r4, #28]
 800095e:	2b00      	cmp	r3, #0
 8000960:	f000 80ba 	beq.w	8000ad8 <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000964:	4a4d      	ldr	r2, [pc, #308]	; (8000a9c <HAL_RCC_OscConfig+0x5e0>)
 8000966:	6852      	ldr	r2, [r2, #4]
 8000968:	f002 020c 	and.w	r2, r2, #12
 800096c:	2a08      	cmp	r2, #8
 800096e:	f000 8099 	beq.w	8000aa4 <HAL_RCC_OscConfig+0x5e8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000972:	2b02      	cmp	r3, #2
 8000974:	d02f      	beq.n	80009d6 <HAL_RCC_OscConfig+0x51a>
 8000976:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800097a:	fa93 f3a3 	rbit	r3, r3
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800097e:	fab3 f383 	clz	r3, r3
 8000982:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000986:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800098a:	009b      	lsls	r3, r3, #2
 800098c:	2200      	movs	r2, #0
 800098e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000990:	f7ff fc5c 	bl	800024c <HAL_GetTick>
 8000994:	4604      	mov	r4, r0
 8000996:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800099a:	fa93 f3a3 	rbit	r3, r3
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800099e:	4b3f      	ldr	r3, [pc, #252]	; (8000a9c <HAL_RCC_OscConfig+0x5e0>)
 80009a0:	6819      	ldr	r1, [r3, #0]
 80009a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80009a6:	fa93 f3a3 	rbit	r3, r3
 80009aa:	fab3 f383 	clz	r3, r3
 80009ae:	f003 031f 	and.w	r3, r3, #31
 80009b2:	2201      	movs	r2, #1
 80009b4:	fa02 f303 	lsl.w	r3, r2, r3
 80009b8:	4219      	tst	r1, r3
 80009ba:	d06b      	beq.n	8000a94 <HAL_RCC_OscConfig+0x5d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80009bc:	f7ff fc46 	bl	800024c <HAL_GetTick>
 80009c0:	1b00      	subs	r0, r0, r4
 80009c2:	2802      	cmp	r0, #2
 80009c4:	d9e7      	bls.n	8000996 <HAL_RCC_OscConfig+0x4da>
          {
            return HAL_TIMEOUT;
 80009c6:	2003      	movs	r0, #3
 80009c8:	e087      	b.n	8000ada <HAL_RCC_OscConfig+0x61e>
      __HAL_RCC_PWR_CLK_DISABLE();
 80009ca:	4a34      	ldr	r2, [pc, #208]	; (8000a9c <HAL_RCC_OscConfig+0x5e0>)
 80009cc:	69d3      	ldr	r3, [r2, #28]
 80009ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80009d2:	61d3      	str	r3, [r2, #28]
 80009d4:	e7c2      	b.n	800095c <HAL_RCC_OscConfig+0x4a0>
 80009d6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80009da:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 80009de:	fab3 f383 	clz	r3, r3
 80009e2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80009e6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80009ea:	009b      	lsls	r3, r3, #2
 80009ec:	2200      	movs	r2, #0
 80009ee:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80009f0:	f7ff fc2c 	bl	800024c <HAL_GetTick>
 80009f4:	4605      	mov	r5, r0
 80009f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80009fa:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80009fe:	4b27      	ldr	r3, [pc, #156]	; (8000a9c <HAL_RCC_OscConfig+0x5e0>)
 8000a00:	6819      	ldr	r1, [r3, #0]
 8000a02:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000a06:	fa93 f3a3 	rbit	r3, r3
 8000a0a:	fab3 f383 	clz	r3, r3
 8000a0e:	f003 031f 	and.w	r3, r3, #31
 8000a12:	2201      	movs	r2, #1
 8000a14:	fa02 f303 	lsl.w	r3, r2, r3
 8000a18:	4219      	tst	r1, r3
 8000a1a:	d006      	beq.n	8000a2a <HAL_RCC_OscConfig+0x56e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000a1c:	f7ff fc16 	bl	800024c <HAL_GetTick>
 8000a20:	1b40      	subs	r0, r0, r5
 8000a22:	2802      	cmp	r0, #2
 8000a24:	d9e7      	bls.n	80009f6 <HAL_RCC_OscConfig+0x53a>
            return HAL_TIMEOUT;
 8000a26:	2003      	movs	r0, #3
 8000a28:	e057      	b.n	8000ada <HAL_RCC_OscConfig+0x61e>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000a2a:	491c      	ldr	r1, [pc, #112]	; (8000a9c <HAL_RCC_OscConfig+0x5e0>)
 8000a2c:	684b      	ldr	r3, [r1, #4]
 8000a2e:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 8000a32:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000a34:	6a20      	ldr	r0, [r4, #32]
 8000a36:	4302      	orrs	r2, r0
 8000a38:	4313      	orrs	r3, r2
 8000a3a:	604b      	str	r3, [r1, #4]
 8000a3c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000a40:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8000a44:	fab3 f383 	clz	r3, r3
 8000a48:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000a4c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000a50:	009b      	lsls	r3, r3, #2
 8000a52:	2201      	movs	r2, #1
 8000a54:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000a56:	f7ff fbf9 	bl	800024c <HAL_GetTick>
 8000a5a:	4604      	mov	r4, r0
 8000a5c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000a60:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000a64:	4b0d      	ldr	r3, [pc, #52]	; (8000a9c <HAL_RCC_OscConfig+0x5e0>)
 8000a66:	6819      	ldr	r1, [r3, #0]
 8000a68:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000a6c:	fa93 f3a3 	rbit	r3, r3
 8000a70:	fab3 f383 	clz	r3, r3
 8000a74:	f003 031f 	and.w	r3, r3, #31
 8000a78:	2201      	movs	r2, #1
 8000a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a7e:	4219      	tst	r1, r3
 8000a80:	d106      	bne.n	8000a90 <HAL_RCC_OscConfig+0x5d4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000a82:	f7ff fbe3 	bl	800024c <HAL_GetTick>
 8000a86:	1b00      	subs	r0, r0, r4
 8000a88:	2802      	cmp	r0, #2
 8000a8a:	d9e7      	bls.n	8000a5c <HAL_RCC_OscConfig+0x5a0>
            return HAL_TIMEOUT;
 8000a8c:	2003      	movs	r0, #3
 8000a8e:	e024      	b.n	8000ada <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 8000a90:	2000      	movs	r0, #0
 8000a92:	e022      	b.n	8000ada <HAL_RCC_OscConfig+0x61e>
 8000a94:	2000      	movs	r0, #0
 8000a96:	e020      	b.n	8000ada <HAL_RCC_OscConfig+0x61e>
 8000a98:	10908120 	.word	0x10908120
 8000a9c:	40021000 	.word	0x40021000
 8000aa0:	40007000 	.word	0x40007000
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000aa4:	2b01      	cmp	r3, #1
 8000aa6:	d01a      	beq.n	8000ade <HAL_RCC_OscConfig+0x622>
        pll_config = RCC->CFGR;
 8000aa8:	4b10      	ldr	r3, [pc, #64]	; (8000aec <HAL_RCC_OscConfig+0x630>)
 8000aaa:	685b      	ldr	r3, [r3, #4]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8000aac:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8000ab0:	6a22      	ldr	r2, [r4, #32]
 8000ab2:	4291      	cmp	r1, r2
 8000ab4:	d115      	bne.n	8000ae2 <HAL_RCC_OscConfig+0x626>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8000ab6:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8000aba:	6a62      	ldr	r2, [r4, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8000abc:	4293      	cmp	r3, r2
 8000abe:	d112      	bne.n	8000ae6 <HAL_RCC_OscConfig+0x62a>
  return HAL_OK;
 8000ac0:	2000      	movs	r0, #0
 8000ac2:	e00a      	b.n	8000ada <HAL_RCC_OscConfig+0x61e>
    return HAL_ERROR;
 8000ac4:	2001      	movs	r0, #1
}
 8000ac6:	4770      	bx	lr
        return HAL_ERROR;
 8000ac8:	2001      	movs	r0, #1
 8000aca:	e006      	b.n	8000ada <HAL_RCC_OscConfig+0x61e>
        return HAL_ERROR;
 8000acc:	2001      	movs	r0, #1
 8000ace:	e004      	b.n	8000ada <HAL_RCC_OscConfig+0x61e>
          return HAL_TIMEOUT;
 8000ad0:	2003      	movs	r0, #3
 8000ad2:	e002      	b.n	8000ada <HAL_RCC_OscConfig+0x61e>
          return HAL_TIMEOUT;
 8000ad4:	2003      	movs	r0, #3
 8000ad6:	e000      	b.n	8000ada <HAL_RCC_OscConfig+0x61e>
  return HAL_OK;
 8000ad8:	2000      	movs	r0, #0
}
 8000ada:	b002      	add	sp, #8
 8000adc:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8000ade:	2001      	movs	r0, #1
 8000ae0:	e7fb      	b.n	8000ada <HAL_RCC_OscConfig+0x61e>
          return HAL_ERROR;
 8000ae2:	2001      	movs	r0, #1
 8000ae4:	e7f9      	b.n	8000ada <HAL_RCC_OscConfig+0x61e>
 8000ae6:	2001      	movs	r0, #1
 8000ae8:	e7f7      	b.n	8000ada <HAL_RCC_OscConfig+0x61e>
 8000aea:	bf00      	nop
 8000aec:	40021000 	.word	0x40021000

08000af0 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 8000af0:	4b17      	ldr	r3, [pc, #92]	; (8000b50 <HAL_RCC_GetSysClockFreq+0x60>)
 8000af2:	685b      	ldr	r3, [r3, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000af4:	f003 020c 	and.w	r2, r3, #12
 8000af8:	2a08      	cmp	r2, #8
 8000afa:	d001      	beq.n	8000b00 <HAL_RCC_GetSysClockFreq+0x10>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8000afc:	4815      	ldr	r0, [pc, #84]	; (8000b54 <HAL_RCC_GetSysClockFreq+0x64>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000afe:	4770      	bx	lr
{
 8000b00:	b410      	push	{r4}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8000b02:	f403 1170 	and.w	r1, r3, #3932160	; 0x3c0000
 8000b06:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8000b0a:	fa92 f2a2 	rbit	r2, r2
 8000b0e:	fab2 f282 	clz	r2, r2
 8000b12:	fa21 f202 	lsr.w	r2, r1, r2
 8000b16:	4c10      	ldr	r4, [pc, #64]	; (8000b58 <HAL_RCC_GetSysClockFreq+0x68>)
 8000b18:	5ca0      	ldrb	r0, [r4, r2]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8000b1a:	4a0d      	ldr	r2, [pc, #52]	; (8000b50 <HAL_RCC_GetSysClockFreq+0x60>)
 8000b1c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000b1e:	f002 020f 	and.w	r2, r2, #15
 8000b22:	210f      	movs	r1, #15
 8000b24:	fa91 f1a1 	rbit	r1, r1
 8000b28:	fab1 f181 	clz	r1, r1
 8000b2c:	40ca      	lsrs	r2, r1
 8000b2e:	4422      	add	r2, r4
 8000b30:	7c12      	ldrb	r2, [r2, #16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8000b32:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8000b36:	d007      	beq.n	8000b48 <HAL_RCC_GetSysClockFreq+0x58>
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8000b38:	4b06      	ldr	r3, [pc, #24]	; (8000b54 <HAL_RCC_GetSysClockFreq+0x64>)
 8000b3a:	fbb3 f3f2 	udiv	r3, r3, r2
 8000b3e:	fb00 f003 	mul.w	r0, r0, r3
}
 8000b42:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000b46:	4770      	bx	lr
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8000b48:	4b04      	ldr	r3, [pc, #16]	; (8000b5c <HAL_RCC_GetSysClockFreq+0x6c>)
 8000b4a:	fb03 f000 	mul.w	r0, r3, r0
 8000b4e:	e7f8      	b.n	8000b42 <HAL_RCC_GetSysClockFreq+0x52>
 8000b50:	40021000 	.word	0x40021000
 8000b54:	007a1200 	.word	0x007a1200
 8000b58:	08002098 	.word	0x08002098
 8000b5c:	003d0900 	.word	0x003d0900

08000b60 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8000b60:	2800      	cmp	r0, #0
 8000b62:	f000 80be 	beq.w	8000ce2 <HAL_RCC_ClockConfig+0x182>
{
 8000b66:	b570      	push	{r4, r5, r6, lr}
 8000b68:	460d      	mov	r5, r1
 8000b6a:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000b6c:	4b61      	ldr	r3, [pc, #388]	; (8000cf4 <HAL_RCC_ClockConfig+0x194>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	f003 0307 	and.w	r3, r3, #7
 8000b74:	428b      	cmp	r3, r1
 8000b76:	d20b      	bcs.n	8000b90 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000b78:	4a5e      	ldr	r2, [pc, #376]	; (8000cf4 <HAL_RCC_ClockConfig+0x194>)
 8000b7a:	6813      	ldr	r3, [r2, #0]
 8000b7c:	f023 0307 	bic.w	r3, r3, #7
 8000b80:	430b      	orrs	r3, r1
 8000b82:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000b84:	6813      	ldr	r3, [r2, #0]
 8000b86:	f003 0307 	and.w	r3, r3, #7
 8000b8a:	428b      	cmp	r3, r1
 8000b8c:	f040 80ab 	bne.w	8000ce6 <HAL_RCC_ClockConfig+0x186>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000b90:	6823      	ldr	r3, [r4, #0]
 8000b92:	f013 0f02 	tst.w	r3, #2
 8000b96:	d006      	beq.n	8000ba6 <HAL_RCC_ClockConfig+0x46>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000b98:	4a57      	ldr	r2, [pc, #348]	; (8000cf8 <HAL_RCC_ClockConfig+0x198>)
 8000b9a:	6853      	ldr	r3, [r2, #4]
 8000b9c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000ba0:	68a1      	ldr	r1, [r4, #8]
 8000ba2:	430b      	orrs	r3, r1
 8000ba4:	6053      	str	r3, [r2, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000ba6:	6823      	ldr	r3, [r4, #0]
 8000ba8:	f013 0f01 	tst.w	r3, #1
 8000bac:	d05a      	beq.n	8000c64 <HAL_RCC_ClockConfig+0x104>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000bae:	6863      	ldr	r3, [r4, #4]
 8000bb0:	2b01      	cmp	r3, #1
 8000bb2:	d02d      	beq.n	8000c10 <HAL_RCC_ClockConfig+0xb0>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000bb4:	2b02      	cmp	r3, #2
 8000bb6:	d040      	beq.n	8000c3a <HAL_RCC_ClockConfig+0xda>
 8000bb8:	2202      	movs	r2, #2
 8000bba:	fa92 f2a2 	rbit	r2, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000bbe:	4a4e      	ldr	r2, [pc, #312]	; (8000cf8 <HAL_RCC_ClockConfig+0x198>)
 8000bc0:	6810      	ldr	r0, [r2, #0]
 8000bc2:	2202      	movs	r2, #2
 8000bc4:	fa92 f2a2 	rbit	r2, r2
 8000bc8:	fab2 f282 	clz	r2, r2
 8000bcc:	f002 021f 	and.w	r2, r2, #31
 8000bd0:	2101      	movs	r1, #1
 8000bd2:	fa01 f202 	lsl.w	r2, r1, r2
 8000bd6:	4210      	tst	r0, r2
 8000bd8:	f000 8087 	beq.w	8000cea <HAL_RCC_ClockConfig+0x18a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000bdc:	4946      	ldr	r1, [pc, #280]	; (8000cf8 <HAL_RCC_ClockConfig+0x198>)
 8000bde:	684a      	ldr	r2, [r1, #4]
 8000be0:	f022 0203 	bic.w	r2, r2, #3
 8000be4:	4313      	orrs	r3, r2
 8000be6:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8000be8:	f7ff fb30 	bl	800024c <HAL_GetTick>
 8000bec:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000bee:	4b42      	ldr	r3, [pc, #264]	; (8000cf8 <HAL_RCC_ClockConfig+0x198>)
 8000bf0:	685b      	ldr	r3, [r3, #4]
 8000bf2:	f003 030c 	and.w	r3, r3, #12
 8000bf6:	6862      	ldr	r2, [r4, #4]
 8000bf8:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000bfc:	d032      	beq.n	8000c64 <HAL_RCC_ClockConfig+0x104>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000bfe:	f7ff fb25 	bl	800024c <HAL_GetTick>
 8000c02:	1b80      	subs	r0, r0, r6
 8000c04:	f241 3388 	movw	r3, #5000	; 0x1388
 8000c08:	4298      	cmp	r0, r3
 8000c0a:	d9f0      	bls.n	8000bee <HAL_RCC_ClockConfig+0x8e>
        return HAL_TIMEOUT;
 8000c0c:	2003      	movs	r0, #3
 8000c0e:	e067      	b.n	8000ce0 <HAL_RCC_ClockConfig+0x180>
 8000c10:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000c14:	fa92 f2a2 	rbit	r2, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c18:	4a37      	ldr	r2, [pc, #220]	; (8000cf8 <HAL_RCC_ClockConfig+0x198>)
 8000c1a:	6810      	ldr	r0, [r2, #0]
 8000c1c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000c20:	fa92 f2a2 	rbit	r2, r2
 8000c24:	fab2 f282 	clz	r2, r2
 8000c28:	f002 021f 	and.w	r2, r2, #31
 8000c2c:	2101      	movs	r1, #1
 8000c2e:	fa01 f202 	lsl.w	r2, r1, r2
 8000c32:	4202      	tst	r2, r0
 8000c34:	d1d2      	bne.n	8000bdc <HAL_RCC_ClockConfig+0x7c>
        return HAL_ERROR;
 8000c36:	2001      	movs	r0, #1
 8000c38:	e052      	b.n	8000ce0 <HAL_RCC_ClockConfig+0x180>
 8000c3a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000c3e:	fa92 f2a2 	rbit	r2, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000c42:	4a2d      	ldr	r2, [pc, #180]	; (8000cf8 <HAL_RCC_ClockConfig+0x198>)
 8000c44:	6810      	ldr	r0, [r2, #0]
 8000c46:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000c4a:	fa92 f2a2 	rbit	r2, r2
 8000c4e:	fab2 f282 	clz	r2, r2
 8000c52:	f002 021f 	and.w	r2, r2, #31
 8000c56:	2101      	movs	r1, #1
 8000c58:	fa01 f202 	lsl.w	r2, r1, r2
 8000c5c:	4210      	tst	r0, r2
 8000c5e:	d1bd      	bne.n	8000bdc <HAL_RCC_ClockConfig+0x7c>
        return HAL_ERROR;
 8000c60:	2001      	movs	r0, #1
 8000c62:	e03d      	b.n	8000ce0 <HAL_RCC_ClockConfig+0x180>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000c64:	4b23      	ldr	r3, [pc, #140]	; (8000cf4 <HAL_RCC_ClockConfig+0x194>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	f003 0307 	and.w	r3, r3, #7
 8000c6c:	42ab      	cmp	r3, r5
 8000c6e:	d90a      	bls.n	8000c86 <HAL_RCC_ClockConfig+0x126>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000c70:	4a20      	ldr	r2, [pc, #128]	; (8000cf4 <HAL_RCC_ClockConfig+0x194>)
 8000c72:	6813      	ldr	r3, [r2, #0]
 8000c74:	f023 0307 	bic.w	r3, r3, #7
 8000c78:	432b      	orrs	r3, r5
 8000c7a:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000c7c:	6813      	ldr	r3, [r2, #0]
 8000c7e:	f003 0307 	and.w	r3, r3, #7
 8000c82:	42ab      	cmp	r3, r5
 8000c84:	d133      	bne.n	8000cee <HAL_RCC_ClockConfig+0x18e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000c86:	6823      	ldr	r3, [r4, #0]
 8000c88:	f013 0f04 	tst.w	r3, #4
 8000c8c:	d006      	beq.n	8000c9c <HAL_RCC_ClockConfig+0x13c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000c8e:	4a1a      	ldr	r2, [pc, #104]	; (8000cf8 <HAL_RCC_ClockConfig+0x198>)
 8000c90:	6853      	ldr	r3, [r2, #4]
 8000c92:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000c96:	68e1      	ldr	r1, [r4, #12]
 8000c98:	430b      	orrs	r3, r1
 8000c9a:	6053      	str	r3, [r2, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000c9c:	6823      	ldr	r3, [r4, #0]
 8000c9e:	f013 0f08 	tst.w	r3, #8
 8000ca2:	d007      	beq.n	8000cb4 <HAL_RCC_ClockConfig+0x154>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000ca4:	4a14      	ldr	r2, [pc, #80]	; (8000cf8 <HAL_RCC_ClockConfig+0x198>)
 8000ca6:	6853      	ldr	r3, [r2, #4]
 8000ca8:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000cac:	6921      	ldr	r1, [r4, #16]
 8000cae:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000cb2:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8000cb4:	f7ff ff1c 	bl	8000af0 <HAL_RCC_GetSysClockFreq>
 8000cb8:	4b0f      	ldr	r3, [pc, #60]	; (8000cf8 <HAL_RCC_ClockConfig+0x198>)
 8000cba:	685b      	ldr	r3, [r3, #4]
 8000cbc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000cc0:	22f0      	movs	r2, #240	; 0xf0
 8000cc2:	fa92 f2a2 	rbit	r2, r2
 8000cc6:	fab2 f282 	clz	r2, r2
 8000cca:	40d3      	lsrs	r3, r2
 8000ccc:	4a0b      	ldr	r2, [pc, #44]	; (8000cfc <HAL_RCC_ClockConfig+0x19c>)
 8000cce:	5cd3      	ldrb	r3, [r2, r3]
 8000cd0:	40d8      	lsrs	r0, r3
 8000cd2:	4b0b      	ldr	r3, [pc, #44]	; (8000d00 <HAL_RCC_ClockConfig+0x1a0>)
 8000cd4:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8000cd6:	4b0b      	ldr	r3, [pc, #44]	; (8000d04 <HAL_RCC_ClockConfig+0x1a4>)
 8000cd8:	6818      	ldr	r0, [r3, #0]
 8000cda:	f7ff fa75 	bl	80001c8 <HAL_InitTick>
  return HAL_OK;
 8000cde:	2000      	movs	r0, #0
}
 8000ce0:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8000ce2:	2001      	movs	r0, #1
}
 8000ce4:	4770      	bx	lr
      return HAL_ERROR;
 8000ce6:	2001      	movs	r0, #1
 8000ce8:	e7fa      	b.n	8000ce0 <HAL_RCC_ClockConfig+0x180>
        return HAL_ERROR;
 8000cea:	2001      	movs	r0, #1
 8000cec:	e7f8      	b.n	8000ce0 <HAL_RCC_ClockConfig+0x180>
      return HAL_ERROR;
 8000cee:	2001      	movs	r0, #1
 8000cf0:	e7f6      	b.n	8000ce0 <HAL_RCC_ClockConfig+0x180>
 8000cf2:	bf00      	nop
 8000cf4:	40022000 	.word	0x40022000
 8000cf8:	40021000 	.word	0x40021000
 8000cfc:	080020dc 	.word	0x080020dc
 8000d00:	20000030 	.word	0x20000030
 8000d04:	20000004 	.word	0x20000004

08000d08 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8000d08:	4b01      	ldr	r3, [pc, #4]	; (8000d10 <HAL_RCC_GetHCLKFreq+0x8>)
 8000d0a:	6818      	ldr	r0, [r3, #0]
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	20000030 	.word	0x20000030

08000d14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8000d14:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8000d16:	f7ff fff7 	bl	8000d08 <HAL_RCC_GetHCLKFreq>
 8000d1a:	4b07      	ldr	r3, [pc, #28]	; (8000d38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8000d1c:	685b      	ldr	r3, [r3, #4]
 8000d1e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000d22:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000d26:	fa92 f2a2 	rbit	r2, r2
 8000d2a:	fab2 f282 	clz	r2, r2
 8000d2e:	40d3      	lsrs	r3, r2
 8000d30:	4a02      	ldr	r2, [pc, #8]	; (8000d3c <HAL_RCC_GetPCLK1Freq+0x28>)
 8000d32:	5cd3      	ldrb	r3, [r2, r3]
}    
 8000d34:	40d8      	lsrs	r0, r3
 8000d36:	bd08      	pop	{r3, pc}
 8000d38:	40021000 	.word	0x40021000
 8000d3c:	080020ec 	.word	0x080020ec

08000d40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8000d40:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8000d42:	f7ff ffe1 	bl	8000d08 <HAL_RCC_GetHCLKFreq>
 8000d46:	4b07      	ldr	r3, [pc, #28]	; (8000d64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8000d48:	685b      	ldr	r3, [r3, #4]
 8000d4a:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8000d4e:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000d52:	fa92 f2a2 	rbit	r2, r2
 8000d56:	fab2 f282 	clz	r2, r2
 8000d5a:	40d3      	lsrs	r3, r2
 8000d5c:	4a02      	ldr	r2, [pc, #8]	; (8000d68 <HAL_RCC_GetPCLK2Freq+0x28>)
 8000d5e:	5cd3      	ldrb	r3, [r2, r3]
} 
 8000d60:	40d8      	lsrs	r0, r3
 8000d62:	bd08      	pop	{r3, pc}
 8000d64:	40021000 	.word	0x40021000
 8000d68:	080020ec 	.word	0x080020ec

08000d6c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8000d6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d6e:	b083      	sub	sp, #12
 8000d70:	4604      	mov	r4, r0
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8000d72:	6803      	ldr	r3, [r0, #0]
 8000d74:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8000d78:	d048      	beq.n	8000e0c <HAL_RCCEx_PeriphCLKConfig+0xa0>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000d7a:	4b91      	ldr	r3, [pc, #580]	; (8000fc0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8000d7c:	69db      	ldr	r3, [r3, #28]
 8000d7e:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8000d82:	f040 80d4 	bne.w	8000f2e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000d86:	4b8e      	ldr	r3, [pc, #568]	; (8000fc0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8000d88:	69da      	ldr	r2, [r3, #28]
 8000d8a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000d8e:	61da      	str	r2, [r3, #28]
 8000d90:	69db      	ldr	r3, [r3, #28]
 8000d92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d96:	9301      	str	r3, [sp, #4]
 8000d98:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000d9a:	2501      	movs	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d9c:	4b89      	ldr	r3, [pc, #548]	; (8000fc4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000da4:	f000 80c5 	beq.w	8000f32 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8000da8:	4b85      	ldr	r3, [pc, #532]	; (8000fc0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8000daa:	6a1b      	ldr	r3, [r3, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8000dac:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8000db0:	d022      	beq.n	8000df8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
 8000db2:	6862      	ldr	r2, [r4, #4]
 8000db4:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8000db8:	429a      	cmp	r2, r3
 8000dba:	d01d      	beq.n	8000df8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8000dbc:	4880      	ldr	r0, [pc, #512]	; (8000fc0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8000dbe:	6a01      	ldr	r1, [r0, #32]
 8000dc0:	f421 7640 	bic.w	r6, r1, #768	; 0x300
 8000dc4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000dc8:	fa93 f2a3 	rbit	r2, r3
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8000dcc:	fab2 f282 	clz	r2, r2
 8000dd0:	4f7d      	ldr	r7, [pc, #500]	; (8000fc8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8000dd2:	443a      	add	r2, r7
 8000dd4:	0092      	lsls	r2, r2, #2
 8000dd6:	f04f 0c01 	mov.w	ip, #1
 8000dda:	f8c2 c000 	str.w	ip, [r2]
 8000dde:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 8000de2:	fab3 f383 	clz	r3, r3
 8000de6:	443b      	add	r3, r7
 8000de8:	009b      	lsls	r3, r3, #2
 8000dea:	2200      	movs	r2, #0
 8000dec:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8000dee:	6206      	str	r6, [r0, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8000df0:	f011 0f01 	tst.w	r1, #1
 8000df4:	f040 80b2 	bne.w	8000f5c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8000df8:	4a71      	ldr	r2, [pc, #452]	; (8000fc0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8000dfa:	6a13      	ldr	r3, [r2, #32]
 8000dfc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000e00:	6861      	ldr	r1, [r4, #4]
 8000e02:	430b      	orrs	r3, r1
 8000e04:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000e06:	2d00      	cmp	r5, #0
 8000e08:	f040 80cf 	bne.w	8000faa <HAL_RCCEx_PeriphCLKConfig+0x23e>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8000e0c:	6823      	ldr	r3, [r4, #0]
 8000e0e:	f013 0f01 	tst.w	r3, #1
 8000e12:	d006      	beq.n	8000e22 <HAL_RCCEx_PeriphCLKConfig+0xb6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8000e14:	4a6a      	ldr	r2, [pc, #424]	; (8000fc0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8000e16:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000e18:	f023 0303 	bic.w	r3, r3, #3
 8000e1c:	68a1      	ldr	r1, [r4, #8]
 8000e1e:	430b      	orrs	r3, r1
 8000e20:	6313      	str	r3, [r2, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8000e22:	6823      	ldr	r3, [r4, #0]
 8000e24:	f013 0f02 	tst.w	r3, #2
 8000e28:	d006      	beq.n	8000e38 <HAL_RCCEx_PeriphCLKConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8000e2a:	4a65      	ldr	r2, [pc, #404]	; (8000fc0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8000e2c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000e2e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8000e32:	68e1      	ldr	r1, [r4, #12]
 8000e34:	430b      	orrs	r3, r1
 8000e36:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8000e38:	6823      	ldr	r3, [r4, #0]
 8000e3a:	f013 0f04 	tst.w	r3, #4
 8000e3e:	d006      	beq.n	8000e4e <HAL_RCCEx_PeriphCLKConfig+0xe2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8000e40:	4a5f      	ldr	r2, [pc, #380]	; (8000fc0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8000e42:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000e44:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8000e48:	6921      	ldr	r1, [r4, #16]
 8000e4a:	430b      	orrs	r3, r1
 8000e4c:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8000e4e:	6823      	ldr	r3, [r4, #0]
 8000e50:	f013 0f20 	tst.w	r3, #32
 8000e54:	d006      	beq.n	8000e64 <HAL_RCCEx_PeriphCLKConfig+0xf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8000e56:	4a5a      	ldr	r2, [pc, #360]	; (8000fc0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8000e58:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000e5a:	f023 0310 	bic.w	r3, r3, #16
 8000e5e:	69e1      	ldr	r1, [r4, #28]
 8000e60:	430b      	orrs	r3, r1
 8000e62:	6313      	str	r3, [r2, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8000e64:	6823      	ldr	r3, [r4, #0]
 8000e66:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000e6a:	d006      	beq.n	8000e7a <HAL_RCCEx_PeriphCLKConfig+0x10e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8000e6c:	4a54      	ldr	r2, [pc, #336]	; (8000fc0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8000e6e:	6853      	ldr	r3, [r2, #4]
 8000e70:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000e74:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8000e76:	430b      	orrs	r3, r1
 8000e78:	6053      	str	r3, [r2, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8000e7a:	6823      	ldr	r3, [r4, #0]
 8000e7c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8000e80:	d006      	beq.n	8000e90 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8000e82:	4a4f      	ldr	r2, [pc, #316]	; (8000fc0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8000e84:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000e86:	f023 0320 	bic.w	r3, r3, #32
 8000e8a:	6a21      	ldr	r1, [r4, #32]
 8000e8c:	430b      	orrs	r3, r1
 8000e8e:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8000e90:	6823      	ldr	r3, [r4, #0]
 8000e92:	f013 0f08 	tst.w	r3, #8
 8000e96:	d006      	beq.n	8000ea6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8000e98:	4a49      	ldr	r2, [pc, #292]	; (8000fc0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8000e9a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000e9c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8000ea0:	6961      	ldr	r1, [r4, #20]
 8000ea2:	430b      	orrs	r3, r1
 8000ea4:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8000ea6:	6823      	ldr	r3, [r4, #0]
 8000ea8:	f013 0f10 	tst.w	r3, #16
 8000eac:	d006      	beq.n	8000ebc <HAL_RCCEx_PeriphCLKConfig+0x150>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8000eae:	4a44      	ldr	r2, [pc, #272]	; (8000fc0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8000eb0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000eb2:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8000eb6:	69a1      	ldr	r1, [r4, #24]
 8000eb8:	430b      	orrs	r3, r1
 8000eba:	6313      	str	r3, [r2, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8000ebc:	6823      	ldr	r3, [r4, #0]
 8000ebe:	f413 7f00 	tst.w	r3, #512	; 0x200
 8000ec2:	d006      	beq.n	8000ed2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8000ec4:	4a3e      	ldr	r2, [pc, #248]	; (8000fc0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8000ec6:	6853      	ldr	r3, [r2, #4]
 8000ec8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000ecc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8000ece:	430b      	orrs	r3, r1
 8000ed0:	6053      	str	r3, [r2, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8000ed2:	6823      	ldr	r3, [r4, #0]
 8000ed4:	f013 0f80 	tst.w	r3, #128	; 0x80
 8000ed8:	d006      	beq.n	8000ee8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8000eda:	4a39      	ldr	r2, [pc, #228]	; (8000fc0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8000edc:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8000ede:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 8000ee2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8000ee4:	430b      	orrs	r3, r1
 8000ee6:	62d3      	str	r3, [r2, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8000ee8:	6823      	ldr	r3, [r4, #0]
 8000eea:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000eee:	d006      	beq.n	8000efe <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8000ef0:	4a33      	ldr	r2, [pc, #204]	; (8000fc0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8000ef2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8000ef4:	f423 5378 	bic.w	r3, r3, #15872	; 0x3e00
 8000ef8:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8000efa:	430b      	orrs	r3, r1
 8000efc:	62d3      	str	r3, [r2, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8000efe:	6823      	ldr	r3, [r4, #0]
 8000f00:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8000f04:	d006      	beq.n	8000f14 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8000f06:	4a2e      	ldr	r2, [pc, #184]	; (8000fc0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8000f08:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000f0a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000f0e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8000f10:	430b      	orrs	r3, r1
 8000f12:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8000f14:	6823      	ldr	r3, [r4, #0]
 8000f16:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8000f1a:	d04d      	beq.n	8000fb8 <HAL_RCCEx_PeriphCLKConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8000f1c:	4a28      	ldr	r2, [pc, #160]	; (8000fc0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8000f1e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000f20:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000f24:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000f26:	430b      	orrs	r3, r1
 8000f28:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8000f2a:	2000      	movs	r0, #0
 8000f2c:	e045      	b.n	8000fba <HAL_RCCEx_PeriphCLKConfig+0x24e>
  FlagStatus       pwrclkchanged = RESET;
 8000f2e:	2500      	movs	r5, #0
 8000f30:	e734      	b.n	8000d9c <HAL_RCCEx_PeriphCLKConfig+0x30>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f32:	4a24      	ldr	r2, [pc, #144]	; (8000fc4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8000f34:	6813      	ldr	r3, [r2, #0]
 8000f36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f3a:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8000f3c:	f7ff f986 	bl	800024c <HAL_GetTick>
 8000f40:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f42:	4b20      	ldr	r3, [pc, #128]	; (8000fc4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000f4a:	f47f af2d 	bne.w	8000da8 <HAL_RCCEx_PeriphCLKConfig+0x3c>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f4e:	f7ff f97d 	bl	800024c <HAL_GetTick>
 8000f52:	1b80      	subs	r0, r0, r6
 8000f54:	2864      	cmp	r0, #100	; 0x64
 8000f56:	d9f4      	bls.n	8000f42 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
          return HAL_TIMEOUT;
 8000f58:	2003      	movs	r0, #3
 8000f5a:	e02e      	b.n	8000fba <HAL_RCCEx_PeriphCLKConfig+0x24e>
        tickstart = HAL_GetTick();
 8000f5c:	f7ff f976 	bl	800024c <HAL_GetTick>
 8000f60:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f62:	e018      	b.n	8000f96 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8000f64:	2302      	movs	r3, #2
 8000f66:	fa93 f3a3 	rbit	r3, r3
 8000f6a:	4b15      	ldr	r3, [pc, #84]	; (8000fc0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8000f6c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8000f6e:	2302      	movs	r3, #2
 8000f70:	fa93 f3a3 	rbit	r3, r3
 8000f74:	fab3 f383 	clz	r3, r3
 8000f78:	f003 031f 	and.w	r3, r3, #31
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f82:	420b      	tst	r3, r1
 8000f84:	f47f af38 	bne.w	8000df8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f88:	f7ff f960 	bl	800024c <HAL_GetTick>
 8000f8c:	1b80      	subs	r0, r0, r6
 8000f8e:	f241 3388 	movw	r3, #5000	; 0x1388
 8000f92:	4298      	cmp	r0, r3
 8000f94:	d80e      	bhi.n	8000fb4 <HAL_RCCEx_PeriphCLKConfig+0x248>
 8000f96:	2302      	movs	r3, #2
 8000f98:	fa93 f2a3 	rbit	r2, r3
 8000f9c:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d0df      	beq.n	8000f64 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8000fa4:	4b06      	ldr	r3, [pc, #24]	; (8000fc0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8000fa6:	6a19      	ldr	r1, [r3, #32]
 8000fa8:	e7e1      	b.n	8000f6e <HAL_RCCEx_PeriphCLKConfig+0x202>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000faa:	69d3      	ldr	r3, [r2, #28]
 8000fac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000fb0:	61d3      	str	r3, [r2, #28]
 8000fb2:	e72b      	b.n	8000e0c <HAL_RCCEx_PeriphCLKConfig+0xa0>
            return HAL_TIMEOUT;
 8000fb4:	2003      	movs	r0, #3
 8000fb6:	e000      	b.n	8000fba <HAL_RCCEx_PeriphCLKConfig+0x24e>
  return HAL_OK;
 8000fb8:	2000      	movs	r0, #0
}
 8000fba:	b003      	add	sp, #12
 8000fbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	40021000 	.word	0x40021000
 8000fc4:	40007000 	.word	0x40007000
 8000fc8:	10908100 	.word	0x10908100

08000fcc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8000fcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000fd0:	b082      	sub	sp, #8
 8000fd2:	4605      	mov	r5, r0
 8000fd4:	4688      	mov	r8, r1
 8000fd6:	4617      	mov	r7, r2
 8000fd8:	461e      	mov	r6, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8000fda:	f7ff f937 	bl	800024c <HAL_GetTick>
 8000fde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000fe0:	1a1b      	subs	r3, r3, r0
 8000fe2:	eb03 0906 	add.w	r9, r3, r6
  tmp_tickstart = HAL_GetTick();
 8000fe6:	f7ff f931 	bl	800024c <HAL_GetTick>
 8000fea:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8000fec:	4b2a      	ldr	r3, [pc, #168]	; (8001098 <SPI_WaitFlagStateUntilTimeout+0xcc>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8000ff4:	fb09 f303 	mul.w	r3, r9, r3
 8000ff8:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8000ffa:	682b      	ldr	r3, [r5, #0]
 8000ffc:	689c      	ldr	r4, [r3, #8]
 8000ffe:	ea38 0304 	bics.w	r3, r8, r4
 8001002:	bf0c      	ite	eq
 8001004:	2401      	moveq	r4, #1
 8001006:	2400      	movne	r4, #0
 8001008:	42bc      	cmp	r4, r7
 800100a:	d040      	beq.n	800108e <SPI_WaitFlagStateUntilTimeout+0xc2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800100c:	f1b6 3fff 	cmp.w	r6, #4294967295
 8001010:	d0f3      	beq.n	8000ffa <SPI_WaitFlagStateUntilTimeout+0x2e>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001012:	f7ff f91b 	bl	800024c <HAL_GetTick>
 8001016:	eba0 000a 	sub.w	r0, r0, sl
 800101a:	4548      	cmp	r0, r9
 800101c:	d20a      	bcs.n	8001034 <SPI_WaitFlagStateUntilTimeout+0x68>
 800101e:	f1b9 0f00 	cmp.w	r9, #0
 8001022:	d007      	beq.n	8001034 <SPI_WaitFlagStateUntilTimeout+0x68>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8001024:	9a01      	ldr	r2, [sp, #4]
 8001026:	b102      	cbz	r2, 800102a <SPI_WaitFlagStateUntilTimeout+0x5e>
 8001028:	464a      	mov	r2, r9
      {
        tmp_timeout = 0U;
      }
      count--;
 800102a:	9b01      	ldr	r3, [sp, #4]
 800102c:	3b01      	subs	r3, #1
 800102e:	9301      	str	r3, [sp, #4]
 8001030:	4691      	mov	r9, r2
 8001032:	e7e2      	b.n	8000ffa <SPI_WaitFlagStateUntilTimeout+0x2e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001034:	682a      	ldr	r2, [r5, #0]
 8001036:	6853      	ldr	r3, [r2, #4]
 8001038:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 800103c:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800103e:	686b      	ldr	r3, [r5, #4]
 8001040:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001044:	d00b      	beq.n	800105e <SPI_WaitFlagStateUntilTimeout+0x92>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001046:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8001048:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800104c:	d014      	beq.n	8001078 <SPI_WaitFlagStateUntilTimeout+0xac>
        hspi->State = HAL_SPI_STATE_READY;
 800104e:	2301      	movs	r3, #1
 8001050:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 8001054:	2300      	movs	r3, #0
 8001056:	f885 305c 	strb.w	r3, [r5, #92]	; 0x5c
        return HAL_TIMEOUT;
 800105a:	2003      	movs	r0, #3
 800105c:	e018      	b.n	8001090 <SPI_WaitFlagStateUntilTimeout+0xc4>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800105e:	68ab      	ldr	r3, [r5, #8]
 8001060:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001064:	d002      	beq.n	800106c <SPI_WaitFlagStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001066:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800106a:	d1ec      	bne.n	8001046 <SPI_WaitFlagStateUntilTimeout+0x7a>
          __HAL_SPI_DISABLE(hspi);
 800106c:	682a      	ldr	r2, [r5, #0]
 800106e:	6813      	ldr	r3, [r2, #0]
 8001070:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001074:	6013      	str	r3, [r2, #0]
 8001076:	e7e6      	b.n	8001046 <SPI_WaitFlagStateUntilTimeout+0x7a>
          SPI_RESET_CRC(hspi);
 8001078:	682a      	ldr	r2, [r5, #0]
 800107a:	6813      	ldr	r3, [r2, #0]
 800107c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001080:	6013      	str	r3, [r2, #0]
 8001082:	682a      	ldr	r2, [r5, #0]
 8001084:	6813      	ldr	r3, [r2, #0]
 8001086:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800108a:	6013      	str	r3, [r2, #0]
 800108c:	e7df      	b.n	800104e <SPI_WaitFlagStateUntilTimeout+0x82>
    }
  }

  return HAL_OK;
 800108e:	2000      	movs	r0, #0
}
 8001090:	b002      	add	sp, #8
 8001092:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001096:	bf00      	nop
 8001098:	20000030 	.word	0x20000030

0800109c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800109c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80010a0:	b083      	sub	sp, #12
 80010a2:	4607      	mov	r7, r0
 80010a4:	460d      	mov	r5, r1
 80010a6:	4616      	mov	r6, r2
 80010a8:	4698      	mov	r8, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80010aa:	2300      	movs	r3, #0
 80010ac:	f88d 3003 	strb.w	r3, [sp, #3]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80010b0:	f7ff f8cc 	bl	800024c <HAL_GetTick>
 80010b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80010b6:	1a1b      	subs	r3, r3, r0
 80010b8:	eb03 0908 	add.w	r9, r3, r8
  tmp_tickstart = HAL_GetTick();
 80010bc:	f7ff f8c6 	bl	800024c <HAL_GetTick>
 80010c0:	4682      	mov	sl, r0

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80010c2:	f8d7 b000 	ldr.w	fp, [r7]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80010c6:	4b31      	ldr	r3, [pc, #196]	; (800118c <SPI_WaitFifoStateUntilTimeout+0xf0>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80010ce:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80010d2:	0d1b      	lsrs	r3, r3, #20
 80010d4:	fb09 f303 	mul.w	r3, r9, r3
 80010d8:	9301      	str	r3, [sp, #4]

  while ((hspi->Instance->SR & Fifo) != State)
 80010da:	e002      	b.n	80010e2 <SPI_WaitFifoStateUntilTimeout+0x46>
      tmpreg8 = *ptmpreg8;
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
    }

    if (Timeout != HAL_MAX_DELAY)
 80010dc:	f1b8 3fff 	cmp.w	r8, #4294967295
 80010e0:	d111      	bne.n	8001106 <SPI_WaitFifoStateUntilTimeout+0x6a>
  while ((hspi->Instance->SR & Fifo) != State)
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	689c      	ldr	r4, [r3, #8]
 80010e6:	402c      	ands	r4, r5
 80010e8:	42b4      	cmp	r4, r6
 80010ea:	d04a      	beq.n	8001182 <SPI_WaitFifoStateUntilTimeout+0xe6>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80010ec:	f5b5 6fc0 	cmp.w	r5, #1536	; 0x600
 80010f0:	d1f4      	bne.n	80010dc <SPI_WaitFifoStateUntilTimeout+0x40>
 80010f2:	2e00      	cmp	r6, #0
 80010f4:	d1f2      	bne.n	80010dc <SPI_WaitFifoStateUntilTimeout+0x40>
      tmpreg8 = *ptmpreg8;
 80010f6:	f89b 300c 	ldrb.w	r3, [fp, #12]
 80010fa:	b2db      	uxtb	r3, r3
 80010fc:	f88d 3003 	strb.w	r3, [sp, #3]
      UNUSED(tmpreg8);
 8001100:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8001104:	e7ea      	b.n	80010dc <SPI_WaitFifoStateUntilTimeout+0x40>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001106:	f7ff f8a1 	bl	800024c <HAL_GetTick>
 800110a:	eba0 000a 	sub.w	r0, r0, sl
 800110e:	4548      	cmp	r0, r9
 8001110:	d20a      	bcs.n	8001128 <SPI_WaitFifoStateUntilTimeout+0x8c>
 8001112:	f1b9 0f00 	cmp.w	r9, #0
 8001116:	d007      	beq.n	8001128 <SPI_WaitFifoStateUntilTimeout+0x8c>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8001118:	9a01      	ldr	r2, [sp, #4]
 800111a:	b102      	cbz	r2, 800111e <SPI_WaitFifoStateUntilTimeout+0x82>
 800111c:	464a      	mov	r2, r9
      {
        tmp_timeout = 0U;
      }      
      count--;
 800111e:	9b01      	ldr	r3, [sp, #4]
 8001120:	3b01      	subs	r3, #1
 8001122:	9301      	str	r3, [sp, #4]
 8001124:	4691      	mov	r9, r2
 8001126:	e7dc      	b.n	80010e2 <SPI_WaitFifoStateUntilTimeout+0x46>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001128:	683a      	ldr	r2, [r7, #0]
 800112a:	6853      	ldr	r3, [r2, #4]
 800112c:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8001130:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001138:	d00b      	beq.n	8001152 <SPI_WaitFifoStateUntilTimeout+0xb6>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800113a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800113c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001140:	d014      	beq.n	800116c <SPI_WaitFifoStateUntilTimeout+0xd0>
        hspi->State = HAL_SPI_STATE_READY;
 8001142:	2301      	movs	r3, #1
 8001144:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 8001148:	2300      	movs	r3, #0
 800114a:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
        return HAL_TIMEOUT;
 800114e:	2003      	movs	r0, #3
 8001150:	e018      	b.n	8001184 <SPI_WaitFifoStateUntilTimeout+0xe8>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001152:	68bb      	ldr	r3, [r7, #8]
 8001154:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001158:	d002      	beq.n	8001160 <SPI_WaitFifoStateUntilTimeout+0xc4>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800115a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800115e:	d1ec      	bne.n	800113a <SPI_WaitFifoStateUntilTimeout+0x9e>
          __HAL_SPI_DISABLE(hspi);
 8001160:	683a      	ldr	r2, [r7, #0]
 8001162:	6813      	ldr	r3, [r2, #0]
 8001164:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001168:	6013      	str	r3, [r2, #0]
 800116a:	e7e6      	b.n	800113a <SPI_WaitFifoStateUntilTimeout+0x9e>
          SPI_RESET_CRC(hspi);
 800116c:	683a      	ldr	r2, [r7, #0]
 800116e:	6813      	ldr	r3, [r2, #0]
 8001170:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001174:	6013      	str	r3, [r2, #0]
 8001176:	683a      	ldr	r2, [r7, #0]
 8001178:	6813      	ldr	r3, [r2, #0]
 800117a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800117e:	6013      	str	r3, [r2, #0]
 8001180:	e7df      	b.n	8001142 <SPI_WaitFifoStateUntilTimeout+0xa6>
    }
  }

  return HAL_OK;
 8001182:	2000      	movs	r0, #0
}
 8001184:	b003      	add	sp, #12
 8001186:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800118a:	bf00      	nop
 800118c:	20000030 	.word	0x20000030

08001190 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001190:	b570      	push	{r4, r5, r6, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	4604      	mov	r4, r0
 8001196:	460d      	mov	r5, r1
 8001198:	4616      	mov	r6, r2
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800119a:	9200      	str	r2, [sp, #0]
 800119c:	460b      	mov	r3, r1
 800119e:	2200      	movs	r2, #0
 80011a0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80011a4:	f7ff ff7a 	bl	800109c <SPI_WaitFifoStateUntilTimeout>
 80011a8:	b9b0      	cbnz	r0, 80011d8 <SPI_EndRxTxTransaction+0x48>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80011aa:	9600      	str	r6, [sp, #0]
 80011ac:	462b      	mov	r3, r5
 80011ae:	2200      	movs	r2, #0
 80011b0:	2180      	movs	r1, #128	; 0x80
 80011b2:	4620      	mov	r0, r4
 80011b4:	f7ff ff0a 	bl	8000fcc <SPI_WaitFlagStateUntilTimeout>
 80011b8:	b9a8      	cbnz	r0, 80011e6 <SPI_EndRxTxTransaction+0x56>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80011ba:	9600      	str	r6, [sp, #0]
 80011bc:	462b      	mov	r3, r5
 80011be:	2200      	movs	r2, #0
 80011c0:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80011c4:	4620      	mov	r0, r4
 80011c6:	f7ff ff69 	bl	800109c <SPI_WaitFifoStateUntilTimeout>
 80011ca:	b150      	cbz	r0, 80011e2 <SPI_EndRxTxTransaction+0x52>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80011cc:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80011ce:	f043 0320 	orr.w	r3, r3, #32
 80011d2:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 80011d4:	2003      	movs	r0, #3
 80011d6:	e004      	b.n	80011e2 <SPI_EndRxTxTransaction+0x52>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80011d8:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80011da:	f043 0320 	orr.w	r3, r3, #32
 80011de:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 80011e0:	2003      	movs	r0, #3
  }

  return HAL_OK;
}
 80011e2:	b002      	add	sp, #8
 80011e4:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80011e6:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80011e8:	f043 0320 	orr.w	r3, r3, #32
 80011ec:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 80011ee:	2003      	movs	r0, #3
 80011f0:	e7f7      	b.n	80011e2 <SPI_EndRxTxTransaction+0x52>

080011f2 <HAL_SPI_Init>:
  if (hspi == NULL)
 80011f2:	2800      	cmp	r0, #0
 80011f4:	d06f      	beq.n	80012d6 <HAL_SPI_Init+0xe4>
{
 80011f6:	b510      	push	{r4, lr}
 80011f8:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80011fa:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80011fc:	b933      	cbnz	r3, 800120c <HAL_SPI_Init+0x1a>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80011fe:	6843      	ldr	r3, [r0, #4]
 8001200:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001204:	d005      	beq.n	8001212 <HAL_SPI_Init+0x20>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001206:	2300      	movs	r3, #0
 8001208:	61c3      	str	r3, [r0, #28]
 800120a:	e002      	b.n	8001212 <HAL_SPI_Init+0x20>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800120c:	2300      	movs	r3, #0
 800120e:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001210:	6143      	str	r3, [r0, #20]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001212:	2300      	movs	r3, #0
 8001214:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8001216:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 800121a:	2b00      	cmp	r3, #0
 800121c:	d052      	beq.n	80012c4 <HAL_SPI_Init+0xd2>
  hspi->State = HAL_SPI_STATE_BUSY;
 800121e:	2302      	movs	r3, #2
 8001220:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 8001224:	6822      	ldr	r2, [r4, #0]
 8001226:	6813      	ldr	r3, [r2, #0]
 8001228:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800122c:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800122e:	68e3      	ldr	r3, [r4, #12]
 8001230:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001234:	d94c      	bls.n	80012d0 <HAL_SPI_Init+0xde>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001236:	2200      	movs	r2, #0
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001238:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800123c:	d004      	beq.n	8001248 <HAL_SPI_Init+0x56>
 800123e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001242:	d001      	beq.n	8001248 <HAL_SPI_Init+0x56>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001244:	2300      	movs	r3, #0
 8001246:	62a3      	str	r3, [r4, #40]	; 0x28
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001248:	6863      	ldr	r3, [r4, #4]
 800124a:	f403 7382 	and.w	r3, r3, #260	; 0x104
 800124e:	68a1      	ldr	r1, [r4, #8]
 8001250:	f401 4104 	and.w	r1, r1, #33792	; 0x8400
 8001254:	430b      	orrs	r3, r1
 8001256:	6921      	ldr	r1, [r4, #16]
 8001258:	f001 0102 	and.w	r1, r1, #2
 800125c:	430b      	orrs	r3, r1
 800125e:	6961      	ldr	r1, [r4, #20]
 8001260:	f001 0101 	and.w	r1, r1, #1
 8001264:	430b      	orrs	r3, r1
 8001266:	69a1      	ldr	r1, [r4, #24]
 8001268:	f401 7100 	and.w	r1, r1, #512	; 0x200
 800126c:	430b      	orrs	r3, r1
 800126e:	69e1      	ldr	r1, [r4, #28]
 8001270:	f001 0138 	and.w	r1, r1, #56	; 0x38
 8001274:	430b      	orrs	r3, r1
 8001276:	6a21      	ldr	r1, [r4, #32]
 8001278:	f001 0180 	and.w	r1, r1, #128	; 0x80
 800127c:	430b      	orrs	r3, r1
 800127e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8001280:	f401 5100 	and.w	r1, r1, #8192	; 0x2000
 8001284:	6820      	ldr	r0, [r4, #0]
 8001286:	430b      	orrs	r3, r1
 8001288:	6003      	str	r3, [r0, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800128a:	8b63      	ldrh	r3, [r4, #26]
 800128c:	f003 0304 	and.w	r3, r3, #4
 8001290:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001292:	f001 0110 	and.w	r1, r1, #16
 8001296:	430b      	orrs	r3, r1
 8001298:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800129a:	f001 0108 	and.w	r1, r1, #8
 800129e:	430b      	orrs	r3, r1
 80012a0:	68e1      	ldr	r1, [r4, #12]
 80012a2:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
 80012a6:	430b      	orrs	r3, r1
 80012a8:	6821      	ldr	r1, [r4, #0]
 80012aa:	4313      	orrs	r3, r2
 80012ac:	604b      	str	r3, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80012ae:	6822      	ldr	r2, [r4, #0]
 80012b0:	69d3      	ldr	r3, [r2, #28]
 80012b2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80012b6:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80012b8:	2000      	movs	r0, #0
 80012ba:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80012bc:	2301      	movs	r3, #1
 80012be:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
}
 80012c2:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 80012c4:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 80012c8:	4620      	mov	r0, r4
 80012ca:	f000 fdc1 	bl	8001e50 <HAL_SPI_MspInit>
 80012ce:	e7a6      	b.n	800121e <HAL_SPI_Init+0x2c>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80012d0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80012d4:	e7b0      	b.n	8001238 <HAL_SPI_Init+0x46>
    return HAL_ERROR;
 80012d6:	2001      	movs	r0, #1
}
 80012d8:	4770      	bx	lr

080012da <HAL_SPI_Transmit>:
{
 80012da:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80012de:	b083      	sub	sp, #12
 80012e0:	461d      	mov	r5, r3
  __HAL_LOCK(hspi);
 80012e2:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 80012e6:	2b01      	cmp	r3, #1
 80012e8:	f000 80f1 	beq.w	80014ce <HAL_SPI_Transmit+0x1f4>
 80012ec:	4604      	mov	r4, r0
 80012ee:	4688      	mov	r8, r1
 80012f0:	4691      	mov	r9, r2
 80012f2:	2301      	movs	r3, #1
 80012f4:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 80012f8:	f7fe ffa8 	bl	800024c <HAL_GetTick>
 80012fc:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 80012fe:	f894 605d 	ldrb.w	r6, [r4, #93]	; 0x5d
 8001302:	b2f6      	uxtb	r6, r6
 8001304:	2e01      	cmp	r6, #1
 8001306:	f040 80cf 	bne.w	80014a8 <HAL_SPI_Transmit+0x1ce>
  if ((pData == NULL) || (Size == 0U))
 800130a:	f1b8 0f00 	cmp.w	r8, #0
 800130e:	f000 80cc 	beq.w	80014aa <HAL_SPI_Transmit+0x1d0>
 8001312:	f1b9 0f00 	cmp.w	r9, #0
 8001316:	f000 80c8 	beq.w	80014aa <HAL_SPI_Transmit+0x1d0>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800131a:	2303      	movs	r3, #3
 800131c:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001320:	2300      	movs	r3, #0
 8001322:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001324:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8001328:	f8a4 903c 	strh.w	r9, [r4, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800132c:	f8a4 903e 	strh.w	r9, [r4, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001330:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8001332:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8001336:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
  hspi->TxISR       = NULL;
 800133a:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->RxISR       = NULL;
 800133c:	64e3      	str	r3, [r4, #76]	; 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800133e:	68a3      	ldr	r3, [r4, #8]
 8001340:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001344:	d01e      	beq.n	8001384 <HAL_SPI_Transmit+0xaa>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001346:	6823      	ldr	r3, [r4, #0]
 8001348:	681a      	ldr	r2, [r3, #0]
 800134a:	f012 0f40 	tst.w	r2, #64	; 0x40
 800134e:	d103      	bne.n	8001358 <HAL_SPI_Transmit+0x7e>
    __HAL_SPI_ENABLE(hspi);
 8001350:	681a      	ldr	r2, [r3, #0]
 8001352:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001356:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001358:	68e3      	ldr	r3, [r4, #12]
 800135a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800135e:	d93d      	bls.n	80013dc <HAL_SPI_Transmit+0x102>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001360:	6863      	ldr	r3, [r4, #4]
 8001362:	b113      	cbz	r3, 800136a <HAL_SPI_Transmit+0x90>
 8001364:	f1b9 0f01 	cmp.w	r9, #1
 8001368:	d123      	bne.n	80013b2 <HAL_SPI_Transmit+0xd8>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800136a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800136c:	6823      	ldr	r3, [r4, #0]
 800136e:	8812      	ldrh	r2, [r2, #0]
 8001370:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001372:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001374:	3302      	adds	r3, #2
 8001376:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 8001378:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800137a:	b29b      	uxth	r3, r3
 800137c:	3b01      	subs	r3, #1
 800137e:	b29b      	uxth	r3, r3
 8001380:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8001382:	e016      	b.n	80013b2 <HAL_SPI_Transmit+0xd8>
    __HAL_SPI_DISABLE(hspi);
 8001384:	6822      	ldr	r2, [r4, #0]
 8001386:	6813      	ldr	r3, [r2, #0]
 8001388:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800138c:	6013      	str	r3, [r2, #0]
    SPI_1LINE_TX(hspi);
 800138e:	6822      	ldr	r2, [r4, #0]
 8001390:	6813      	ldr	r3, [r2, #0]
 8001392:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001396:	6013      	str	r3, [r2, #0]
 8001398:	e7d5      	b.n	8001346 <HAL_SPI_Transmit+0x6c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800139a:	f7fe ff57 	bl	800024c <HAL_GetTick>
 800139e:	1bc0      	subs	r0, r0, r7
 80013a0:	42a8      	cmp	r0, r5
 80013a2:	d303      	bcc.n	80013ac <HAL_SPI_Transmit+0xd2>
 80013a4:	f1b5 3fff 	cmp.w	r5, #4294967295
 80013a8:	f040 8089 	bne.w	80014be <HAL_SPI_Transmit+0x1e4>
 80013ac:	2d00      	cmp	r5, #0
 80013ae:	f000 8088 	beq.w	80014c2 <HAL_SPI_Transmit+0x1e8>
    while (hspi->TxXferCount > 0U)
 80013b2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80013b4:	b29b      	uxth	r3, r3
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d061      	beq.n	800147e <HAL_SPI_Transmit+0x1a4>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80013ba:	6823      	ldr	r3, [r4, #0]
 80013bc:	689a      	ldr	r2, [r3, #8]
 80013be:	f012 0f02 	tst.w	r2, #2
 80013c2:	d0ea      	beq.n	800139a <HAL_SPI_Transmit+0xc0>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80013c4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80013c6:	8812      	ldrh	r2, [r2, #0]
 80013c8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80013ca:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80013cc:	3302      	adds	r3, #2
 80013ce:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 80013d0:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80013d2:	b292      	uxth	r2, r2
 80013d4:	3a01      	subs	r2, #1
 80013d6:	b292      	uxth	r2, r2
 80013d8:	87e2      	strh	r2, [r4, #62]	; 0x3e
 80013da:	e7ea      	b.n	80013b2 <HAL_SPI_Transmit+0xd8>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80013dc:	6863      	ldr	r3, [r4, #4]
 80013de:	b113      	cbz	r3, 80013e6 <HAL_SPI_Transmit+0x10c>
 80013e0:	f1b9 0f01 	cmp.w	r9, #1
 80013e4:	d133      	bne.n	800144e <HAL_SPI_Transmit+0x174>
      if (hspi->TxXferCount > 1U)
 80013e6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80013e8:	b29b      	uxth	r3, r3
 80013ea:	2b01      	cmp	r3, #1
 80013ec:	d90c      	bls.n	8001408 <HAL_SPI_Transmit+0x12e>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80013ee:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80013f0:	6823      	ldr	r3, [r4, #0]
 80013f2:	8812      	ldrh	r2, [r2, #0]
 80013f4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80013f6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80013f8:	3302      	adds	r3, #2
 80013fa:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80013fc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80013fe:	b29b      	uxth	r3, r3
 8001400:	3b02      	subs	r3, #2
 8001402:	b29b      	uxth	r3, r3
 8001404:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8001406:	e022      	b.n	800144e <HAL_SPI_Transmit+0x174>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001408:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800140a:	6823      	ldr	r3, [r4, #0]
 800140c:	7812      	ldrb	r2, [r2, #0]
 800140e:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr ++;
 8001410:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001412:	3301      	adds	r3, #1
 8001414:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8001416:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001418:	b29b      	uxth	r3, r3
 800141a:	3b01      	subs	r3, #1
 800141c:	b29b      	uxth	r3, r3
 800141e:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8001420:	e015      	b.n	800144e <HAL_SPI_Transmit+0x174>
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001422:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	7313      	strb	r3, [r2, #12]
          hspi->pTxBuffPtr++;
 8001428:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800142a:	3301      	adds	r3, #1
 800142c:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 800142e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001430:	b29b      	uxth	r3, r3
 8001432:	3b01      	subs	r3, #1
 8001434:	b29b      	uxth	r3, r3
 8001436:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8001438:	e009      	b.n	800144e <HAL_SPI_Transmit+0x174>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800143a:	f7fe ff07 	bl	800024c <HAL_GetTick>
 800143e:	1bc0      	subs	r0, r0, r7
 8001440:	42a8      	cmp	r0, r5
 8001442:	d302      	bcc.n	800144a <HAL_SPI_Transmit+0x170>
 8001444:	f1b5 3fff 	cmp.w	r5, #4294967295
 8001448:	d13d      	bne.n	80014c6 <HAL_SPI_Transmit+0x1ec>
 800144a:	2d00      	cmp	r5, #0
 800144c:	d03d      	beq.n	80014ca <HAL_SPI_Transmit+0x1f0>
    while (hspi->TxXferCount > 0U)
 800144e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001450:	b29b      	uxth	r3, r3
 8001452:	b1a3      	cbz	r3, 800147e <HAL_SPI_Transmit+0x1a4>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001454:	6822      	ldr	r2, [r4, #0]
 8001456:	6893      	ldr	r3, [r2, #8]
 8001458:	f013 0f02 	tst.w	r3, #2
 800145c:	d0ed      	beq.n	800143a <HAL_SPI_Transmit+0x160>
        if (hspi->TxXferCount > 1U)
 800145e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001460:	b29b      	uxth	r3, r3
 8001462:	2b01      	cmp	r3, #1
 8001464:	d9dd      	bls.n	8001422 <HAL_SPI_Transmit+0x148>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001466:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001468:	881b      	ldrh	r3, [r3, #0]
 800146a:	60d3      	str	r3, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800146c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800146e:	3302      	adds	r3, #2
 8001470:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8001472:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001474:	b29b      	uxth	r3, r3
 8001476:	3b02      	subs	r3, #2
 8001478:	b29b      	uxth	r3, r3
 800147a:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800147c:	e7e7      	b.n	800144e <HAL_SPI_Transmit+0x174>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800147e:	463a      	mov	r2, r7
 8001480:	4629      	mov	r1, r5
 8001482:	4620      	mov	r0, r4
 8001484:	f7ff fe84 	bl	8001190 <SPI_EndRxTxTransaction>
 8001488:	b108      	cbz	r0, 800148e <HAL_SPI_Transmit+0x1b4>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800148a:	2320      	movs	r3, #32
 800148c:	6623      	str	r3, [r4, #96]	; 0x60
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800148e:	68a3      	ldr	r3, [r4, #8]
 8001490:	b933      	cbnz	r3, 80014a0 <HAL_SPI_Transmit+0x1c6>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001492:	9301      	str	r3, [sp, #4]
 8001494:	6823      	ldr	r3, [r4, #0]
 8001496:	68da      	ldr	r2, [r3, #12]
 8001498:	9201      	str	r2, [sp, #4]
 800149a:	689b      	ldr	r3, [r3, #8]
 800149c:	9301      	str	r3, [sp, #4]
 800149e:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80014a0:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80014a2:	b913      	cbnz	r3, 80014aa <HAL_SPI_Transmit+0x1d0>
  HAL_StatusTypeDef errorcode = HAL_OK;
 80014a4:	2600      	movs	r6, #0
 80014a6:	e000      	b.n	80014aa <HAL_SPI_Transmit+0x1d0>
    errorcode = HAL_BUSY;
 80014a8:	2602      	movs	r6, #2
  hspi->State = HAL_SPI_STATE_READY;
 80014aa:	2301      	movs	r3, #1
 80014ac:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80014b0:	2300      	movs	r3, #0
 80014b2:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 80014b6:	4630      	mov	r0, r6
 80014b8:	b003      	add	sp, #12
 80014ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          errorcode = HAL_TIMEOUT;
 80014be:	2603      	movs	r6, #3
 80014c0:	e7f3      	b.n	80014aa <HAL_SPI_Transmit+0x1d0>
 80014c2:	2603      	movs	r6, #3
 80014c4:	e7f1      	b.n	80014aa <HAL_SPI_Transmit+0x1d0>
          errorcode = HAL_TIMEOUT;
 80014c6:	2603      	movs	r6, #3
 80014c8:	e7ef      	b.n	80014aa <HAL_SPI_Transmit+0x1d0>
 80014ca:	2603      	movs	r6, #3
 80014cc:	e7ed      	b.n	80014aa <HAL_SPI_Transmit+0x1d0>
  __HAL_LOCK(hspi);
 80014ce:	2602      	movs	r6, #2
 80014d0:	e7f1      	b.n	80014b6 <HAL_SPI_Transmit+0x1dc>
	...

080014d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80014d4:	b510      	push	{r4, lr}
 80014d6:	4604      	mov	r4, r0
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80014d8:	6883      	ldr	r3, [r0, #8]
 80014da:	6902      	ldr	r2, [r0, #16]
 80014dc:	4313      	orrs	r3, r2
 80014de:	6942      	ldr	r2, [r0, #20]
 80014e0:	4313      	orrs	r3, r2
 80014e2:	69c2      	ldr	r2, [r0, #28]
 80014e4:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80014e6:	6801      	ldr	r1, [r0, #0]
 80014e8:	680b      	ldr	r3, [r1, #0]
 80014ea:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80014ee:	f023 030c 	bic.w	r3, r3, #12
 80014f2:	4313      	orrs	r3, r2
 80014f4:	600b      	str	r3, [r1, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80014f6:	6802      	ldr	r2, [r0, #0]
 80014f8:	6853      	ldr	r3, [r2, #4]
 80014fa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80014fe:	68c1      	ldr	r1, [r0, #12]
 8001500:	430b      	orrs	r3, r1
 8001502:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001504:	6982      	ldr	r2, [r0, #24]

  tmpreg |= huart->Init.OneBitSampling;
 8001506:	6a03      	ldr	r3, [r0, #32]
 8001508:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800150a:	6801      	ldr	r1, [r0, #0]
 800150c:	688b      	ldr	r3, [r1, #8]
 800150e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8001512:	4313      	orrs	r3, r2
 8001514:	608b      	str	r3, [r1, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001516:	6803      	ldr	r3, [r0, #0]
 8001518:	4a7b      	ldr	r2, [pc, #492]	; (8001708 <UART_SetConfig+0x234>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d00d      	beq.n	800153a <UART_SetConfig+0x66>
 800151e:	4a7b      	ldr	r2, [pc, #492]	; (800170c <UART_SetConfig+0x238>)
 8001520:	4293      	cmp	r3, r2
 8001522:	d01c      	beq.n	800155e <UART_SetConfig+0x8a>
 8001524:	4a7a      	ldr	r2, [pc, #488]	; (8001710 <UART_SetConfig+0x23c>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d03a      	beq.n	80015a0 <UART_SetConfig+0xcc>
 800152a:	4a7a      	ldr	r2, [pc, #488]	; (8001714 <UART_SetConfig+0x240>)
 800152c:	4293      	cmp	r3, r2
 800152e:	d04a      	beq.n	80015c6 <UART_SetConfig+0xf2>
 8001530:	4a79      	ldr	r2, [pc, #484]	; (8001718 <UART_SetConfig+0x244>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d05a      	beq.n	80015ec <UART_SetConfig+0x118>
 8001536:	2310      	movs	r3, #16
 8001538:	e01f      	b.n	800157a <UART_SetConfig+0xa6>
 800153a:	4b78      	ldr	r3, [pc, #480]	; (800171c <UART_SetConfig+0x248>)
 800153c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153e:	f003 0303 	and.w	r3, r3, #3
 8001542:	2b03      	cmp	r3, #3
 8001544:	d809      	bhi.n	800155a <UART_SetConfig+0x86>
 8001546:	e8df f003 	tbb	[pc, r3]
 800154a:	0402      	.short	0x0402
 800154c:	6406      	.short	0x6406
 800154e:	2301      	movs	r3, #1
 8001550:	e013      	b.n	800157a <UART_SetConfig+0xa6>
 8001552:	2304      	movs	r3, #4
 8001554:	e011      	b.n	800157a <UART_SetConfig+0xa6>
 8001556:	2308      	movs	r3, #8
 8001558:	e00f      	b.n	800157a <UART_SetConfig+0xa6>
 800155a:	2310      	movs	r3, #16
 800155c:	e00d      	b.n	800157a <UART_SetConfig+0xa6>
 800155e:	4b6f      	ldr	r3, [pc, #444]	; (800171c <UART_SetConfig+0x248>)
 8001560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001562:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001566:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800156a:	d054      	beq.n	8001616 <UART_SetConfig+0x142>
 800156c:	d813      	bhi.n	8001596 <UART_SetConfig+0xc2>
 800156e:	2b00      	cmp	r3, #0
 8001570:	d053      	beq.n	800161a <UART_SetConfig+0x146>
 8001572:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001576:	d152      	bne.n	800161e <UART_SetConfig+0x14a>
 8001578:	2304      	movs	r3, #4

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800157a:	69e0      	ldr	r0, [r4, #28]
 800157c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8001580:	d069      	beq.n	8001656 <UART_SetConfig+0x182>
      }
    }
  }
  else
  {
    switch (clocksource)
 8001582:	2b08      	cmp	r3, #8
 8001584:	f200 80b9 	bhi.w	80016fa <UART_SetConfig+0x226>
 8001588:	e8df f003 	tbb	[pc, r3]
 800158c:	b790a892 	.word	0xb790a892
 8001590:	b7b7b7ab 	.word	0xb7b7b7ab
 8001594:	ae          	.byte	0xae
 8001595:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001596:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800159a:	d142      	bne.n	8001622 <UART_SetConfig+0x14e>
 800159c:	2302      	movs	r3, #2
 800159e:	e7ec      	b.n	800157a <UART_SetConfig+0xa6>
 80015a0:	4b5e      	ldr	r3, [pc, #376]	; (800171c <UART_SetConfig+0x248>)
 80015a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80015a8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80015ac:	d03b      	beq.n	8001626 <UART_SetConfig+0x152>
 80015ae:	d805      	bhi.n	80015bc <UART_SetConfig+0xe8>
 80015b0:	b3db      	cbz	r3, 800162a <UART_SetConfig+0x156>
 80015b2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80015b6:	d13a      	bne.n	800162e <UART_SetConfig+0x15a>
 80015b8:	2304      	movs	r3, #4
 80015ba:	e7de      	b.n	800157a <UART_SetConfig+0xa6>
 80015bc:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80015c0:	d137      	bne.n	8001632 <UART_SetConfig+0x15e>
 80015c2:	2302      	movs	r3, #2
 80015c4:	e7d9      	b.n	800157a <UART_SetConfig+0xa6>
 80015c6:	4b55      	ldr	r3, [pc, #340]	; (800171c <UART_SetConfig+0x248>)
 80015c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ca:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80015ce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80015d2:	d030      	beq.n	8001636 <UART_SetConfig+0x162>
 80015d4:	d805      	bhi.n	80015e2 <UART_SetConfig+0x10e>
 80015d6:	b383      	cbz	r3, 800163a <UART_SetConfig+0x166>
 80015d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80015dc:	d12f      	bne.n	800163e <UART_SetConfig+0x16a>
 80015de:	2304      	movs	r3, #4
 80015e0:	e7cb      	b.n	800157a <UART_SetConfig+0xa6>
 80015e2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80015e6:	d12c      	bne.n	8001642 <UART_SetConfig+0x16e>
 80015e8:	2302      	movs	r3, #2
 80015ea:	e7c6      	b.n	800157a <UART_SetConfig+0xa6>
 80015ec:	4b4b      	ldr	r3, [pc, #300]	; (800171c <UART_SetConfig+0x248>)
 80015ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f0:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80015f4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80015f8:	d025      	beq.n	8001646 <UART_SetConfig+0x172>
 80015fa:	d805      	bhi.n	8001608 <UART_SetConfig+0x134>
 80015fc:	b32b      	cbz	r3, 800164a <UART_SetConfig+0x176>
 80015fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001602:	d124      	bne.n	800164e <UART_SetConfig+0x17a>
 8001604:	2304      	movs	r3, #4
 8001606:	e7b8      	b.n	800157a <UART_SetConfig+0xa6>
 8001608:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800160c:	d121      	bne.n	8001652 <UART_SetConfig+0x17e>
 800160e:	2302      	movs	r3, #2
 8001610:	e7b3      	b.n	800157a <UART_SetConfig+0xa6>
 8001612:	2302      	movs	r3, #2
 8001614:	e7b1      	b.n	800157a <UART_SetConfig+0xa6>
 8001616:	2308      	movs	r3, #8
 8001618:	e7af      	b.n	800157a <UART_SetConfig+0xa6>
 800161a:	2300      	movs	r3, #0
 800161c:	e7ad      	b.n	800157a <UART_SetConfig+0xa6>
 800161e:	2310      	movs	r3, #16
 8001620:	e7ab      	b.n	800157a <UART_SetConfig+0xa6>
 8001622:	2310      	movs	r3, #16
 8001624:	e7a9      	b.n	800157a <UART_SetConfig+0xa6>
 8001626:	2308      	movs	r3, #8
 8001628:	e7a7      	b.n	800157a <UART_SetConfig+0xa6>
 800162a:	2300      	movs	r3, #0
 800162c:	e7a5      	b.n	800157a <UART_SetConfig+0xa6>
 800162e:	2310      	movs	r3, #16
 8001630:	e7a3      	b.n	800157a <UART_SetConfig+0xa6>
 8001632:	2310      	movs	r3, #16
 8001634:	e7a1      	b.n	800157a <UART_SetConfig+0xa6>
 8001636:	2308      	movs	r3, #8
 8001638:	e79f      	b.n	800157a <UART_SetConfig+0xa6>
 800163a:	2300      	movs	r3, #0
 800163c:	e79d      	b.n	800157a <UART_SetConfig+0xa6>
 800163e:	2310      	movs	r3, #16
 8001640:	e79b      	b.n	800157a <UART_SetConfig+0xa6>
 8001642:	2310      	movs	r3, #16
 8001644:	e799      	b.n	800157a <UART_SetConfig+0xa6>
 8001646:	2308      	movs	r3, #8
 8001648:	e797      	b.n	800157a <UART_SetConfig+0xa6>
 800164a:	2300      	movs	r3, #0
 800164c:	e795      	b.n	800157a <UART_SetConfig+0xa6>
 800164e:	2310      	movs	r3, #16
 8001650:	e793      	b.n	800157a <UART_SetConfig+0xa6>
 8001652:	2310      	movs	r3, #16
 8001654:	e791      	b.n	800157a <UART_SetConfig+0xa6>
    switch (clocksource)
 8001656:	2b08      	cmp	r3, #8
 8001658:	d849      	bhi.n	80016ee <UART_SetConfig+0x21a>
 800165a:	e8df f003 	tbb	[pc, r3]
 800165e:	1f05      	.short	0x1f05
 8001660:	48224825 	.word	0x48224825
 8001664:	4848      	.short	0x4848
 8001666:	09          	.byte	0x09
 8001667:	00          	.byte	0x00
        pclk = HAL_RCC_GetPCLK1Freq();
 8001668:	f7ff fb54 	bl	8000d14 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800166c:	2800      	cmp	r0, #0
 800166e:	d040      	beq.n	80016f2 <UART_SetConfig+0x21e>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8001670:	6862      	ldr	r2, [r4, #4]
 8001672:	0853      	lsrs	r3, r2, #1
 8001674:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8001678:	fbb0 f0f2 	udiv	r0, r0, r2
 800167c:	b280      	uxth	r0, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800167e:	f1a0 0210 	sub.w	r2, r0, #16
 8001682:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8001686:	429a      	cmp	r2, r3
 8001688:	d835      	bhi.n	80016f6 <UART_SetConfig+0x222>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800168a:	f020 030f 	bic.w	r3, r0, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800168e:	f3c0 0042 	ubfx	r0, r0, #1, #3
 8001692:	4318      	orrs	r0, r3
        huart->Instance->BRR = brrtemp;
 8001694:	6823      	ldr	r3, [r4, #0]
 8001696:	60d8      	str	r0, [r3, #12]
 8001698:	2000      	movs	r0, #0
 800169a:	e01b      	b.n	80016d4 <UART_SetConfig+0x200>
        pclk = HAL_RCC_GetPCLK2Freq();
 800169c:	f7ff fb50 	bl	8000d40 <HAL_RCC_GetPCLK2Freq>
        break;
 80016a0:	e7e4      	b.n	800166c <UART_SetConfig+0x198>
        pclk = HAL_RCC_GetSysClockFreq();
 80016a2:	f7ff fa25 	bl	8000af0 <HAL_RCC_GetSysClockFreq>
        break;
 80016a6:	e7e1      	b.n	800166c <UART_SetConfig+0x198>
        pclk = (uint32_t) HSI_VALUE;
 80016a8:	481d      	ldr	r0, [pc, #116]	; (8001720 <UART_SetConfig+0x24c>)
 80016aa:	e7e1      	b.n	8001670 <UART_SetConfig+0x19c>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80016ac:	481c      	ldr	r0, [pc, #112]	; (8001720 <UART_SetConfig+0x24c>)
 80016ae:	e002      	b.n	80016b6 <UART_SetConfig+0x1e2>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80016b0:	f7ff fb30 	bl	8000d14 <HAL_RCC_GetPCLK1Freq>
        pclk = 0U;
        ret = HAL_ERROR;
        break;
    }

    if (pclk != 0U)
 80016b4:	b318      	cbz	r0, 80016fe <UART_SetConfig+0x22a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80016b6:	6863      	ldr	r3, [r4, #4]
 80016b8:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80016bc:	fbb0 f0f3 	udiv	r0, r0, r3
 80016c0:	b280      	uxth	r0, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80016c2:	f1a0 0210 	sub.w	r2, r0, #16
 80016c6:	f64f 73ef 	movw	r3, #65519	; 0xffef
 80016ca:	429a      	cmp	r2, r3
 80016cc:	d819      	bhi.n	8001702 <UART_SetConfig+0x22e>
      {
        huart->Instance->BRR = usartdiv;
 80016ce:	6823      	ldr	r3, [r4, #0]
 80016d0:	60d8      	str	r0, [r3, #12]
 80016d2:	2000      	movs	r0, #0
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80016d4:	2300      	movs	r3, #0
 80016d6:	6663      	str	r3, [r4, #100]	; 0x64
  huart->TxISR = NULL;
 80016d8:	66a3      	str	r3, [r4, #104]	; 0x68

  return ret;
}
 80016da:	bd10      	pop	{r4, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 80016dc:	f7ff fb30 	bl	8000d40 <HAL_RCC_GetPCLK2Freq>
        break;
 80016e0:	e7e8      	b.n	80016b4 <UART_SetConfig+0x1e0>
        pclk = HAL_RCC_GetSysClockFreq();
 80016e2:	f7ff fa05 	bl	8000af0 <HAL_RCC_GetSysClockFreq>
        break;
 80016e6:	e7e5      	b.n	80016b4 <UART_SetConfig+0x1e0>
        pclk = (uint32_t) LSE_VALUE;
 80016e8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80016ec:	e7e3      	b.n	80016b6 <UART_SetConfig+0x1e2>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80016ee:	2001      	movs	r0, #1
 80016f0:	e7f0      	b.n	80016d4 <UART_SetConfig+0x200>
 80016f2:	2000      	movs	r0, #0
 80016f4:	e7ee      	b.n	80016d4 <UART_SetConfig+0x200>
        ret = HAL_ERROR;
 80016f6:	2001      	movs	r0, #1
 80016f8:	e7ec      	b.n	80016d4 <UART_SetConfig+0x200>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80016fa:	2001      	movs	r0, #1
 80016fc:	e7ea      	b.n	80016d4 <UART_SetConfig+0x200>
 80016fe:	2000      	movs	r0, #0
 8001700:	e7e8      	b.n	80016d4 <UART_SetConfig+0x200>
        ret = HAL_ERROR;
 8001702:	2001      	movs	r0, #1
 8001704:	e7e6      	b.n	80016d4 <UART_SetConfig+0x200>
 8001706:	bf00      	nop
 8001708:	40013800 	.word	0x40013800
 800170c:	40004400 	.word	0x40004400
 8001710:	40004800 	.word	0x40004800
 8001714:	40004c00 	.word	0x40004c00
 8001718:	40005000 	.word	0x40005000
 800171c:	40021000 	.word	0x40021000
 8001720:	007a1200 	.word	0x007a1200

08001724 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001724:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001726:	f013 0f01 	tst.w	r3, #1
 800172a:	d006      	beq.n	800173a <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800172c:	6802      	ldr	r2, [r0, #0]
 800172e:	6853      	ldr	r3, [r2, #4]
 8001730:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001734:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8001736:	430b      	orrs	r3, r1
 8001738:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800173a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800173c:	f013 0f02 	tst.w	r3, #2
 8001740:	d006      	beq.n	8001750 <UART_AdvFeatureConfig+0x2c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001742:	6802      	ldr	r2, [r0, #0]
 8001744:	6853      	ldr	r3, [r2, #4]
 8001746:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800174a:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800174c:	430b      	orrs	r3, r1
 800174e:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001750:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001752:	f013 0f04 	tst.w	r3, #4
 8001756:	d006      	beq.n	8001766 <UART_AdvFeatureConfig+0x42>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001758:	6802      	ldr	r2, [r0, #0]
 800175a:	6853      	ldr	r3, [r2, #4]
 800175c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001760:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8001762:	430b      	orrs	r3, r1
 8001764:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001766:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001768:	f013 0f08 	tst.w	r3, #8
 800176c:	d006      	beq.n	800177c <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800176e:	6802      	ldr	r2, [r0, #0]
 8001770:	6853      	ldr	r3, [r2, #4]
 8001772:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001776:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8001778:	430b      	orrs	r3, r1
 800177a:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800177c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800177e:	f013 0f10 	tst.w	r3, #16
 8001782:	d006      	beq.n	8001792 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001784:	6802      	ldr	r2, [r0, #0]
 8001786:	6893      	ldr	r3, [r2, #8]
 8001788:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800178c:	6b81      	ldr	r1, [r0, #56]	; 0x38
 800178e:	430b      	orrs	r3, r1
 8001790:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001792:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001794:	f013 0f20 	tst.w	r3, #32
 8001798:	d006      	beq.n	80017a8 <UART_AdvFeatureConfig+0x84>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800179a:	6802      	ldr	r2, [r0, #0]
 800179c:	6893      	ldr	r3, [r2, #8]
 800179e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80017a2:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 80017a4:	430b      	orrs	r3, r1
 80017a6:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80017a8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80017aa:	f013 0f40 	tst.w	r3, #64	; 0x40
 80017ae:	d00a      	beq.n	80017c6 <UART_AdvFeatureConfig+0xa2>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80017b0:	6802      	ldr	r2, [r0, #0]
 80017b2:	6853      	ldr	r3, [r2, #4]
 80017b4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80017b8:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80017ba:	430b      	orrs	r3, r1
 80017bc:	6053      	str	r3, [r2, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80017be:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80017c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80017c4:	d00b      	beq.n	80017de <UART_AdvFeatureConfig+0xba>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80017c6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80017c8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80017cc:	d006      	beq.n	80017dc <UART_AdvFeatureConfig+0xb8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80017ce:	6802      	ldr	r2, [r0, #0]
 80017d0:	6853      	ldr	r3, [r2, #4]
 80017d2:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80017d6:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80017d8:	430b      	orrs	r3, r1
 80017da:	6053      	str	r3, [r2, #4]
  }
}
 80017dc:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80017de:	6802      	ldr	r2, [r0, #0]
 80017e0:	6853      	ldr	r3, [r2, #4]
 80017e2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80017e6:	6c41      	ldr	r1, [r0, #68]	; 0x44
 80017e8:	430b      	orrs	r3, r1
 80017ea:	6053      	str	r3, [r2, #4]
 80017ec:	e7eb      	b.n	80017c6 <UART_AdvFeatureConfig+0xa2>

080017ee <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80017ee:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80017f2:	4605      	mov	r5, r0
 80017f4:	460f      	mov	r7, r1
 80017f6:	4616      	mov	r6, r2
 80017f8:	4699      	mov	r9, r3
 80017fa:	f8dd 8020 	ldr.w	r8, [sp, #32]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80017fe:	682c      	ldr	r4, [r5, #0]
 8001800:	69e4      	ldr	r4, [r4, #28]
 8001802:	ea37 0304 	bics.w	r3, r7, r4
 8001806:	bf0c      	ite	eq
 8001808:	2401      	moveq	r4, #1
 800180a:	2400      	movne	r4, #0
 800180c:	42b4      	cmp	r4, r6
 800180e:	d153      	bne.n	80018b8 <UART_WaitOnFlagUntilTimeout+0xca>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001810:	f1b8 3fff 	cmp.w	r8, #4294967295
 8001814:	d0f3      	beq.n	80017fe <UART_WaitOnFlagUntilTimeout+0x10>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001816:	f7fe fd19 	bl	800024c <HAL_GetTick>
 800181a:	eba0 0009 	sub.w	r0, r0, r9
 800181e:	4540      	cmp	r0, r8
 8001820:	d82d      	bhi.n	800187e <UART_WaitOnFlagUntilTimeout+0x90>
 8001822:	f1b8 0f00 	cmp.w	r8, #0
 8001826:	d02a      	beq.n	800187e <UART_WaitOnFlagUntilTimeout+0x90>
        __HAL_UNLOCK(huart);

        return HAL_TIMEOUT;
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8001828:	682b      	ldr	r3, [r5, #0]
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	f012 0f04 	tst.w	r2, #4
 8001830:	d0e5      	beq.n	80017fe <UART_WaitOnFlagUntilTimeout+0x10>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8001832:	69da      	ldr	r2, [r3, #28]
 8001834:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8001838:	d0e1      	beq.n	80017fe <UART_WaitOnFlagUntilTimeout+0x10>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800183a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800183e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001840:	682a      	ldr	r2, [r5, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001842:	e852 3f00 	ldrex	r3, [r2]
 8001846:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800184a:	e842 3100 	strex	r1, r3, [r2]
 800184e:	2900      	cmp	r1, #0
 8001850:	d1f6      	bne.n	8001840 <UART_WaitOnFlagUntilTimeout+0x52>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001852:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001854:	f102 0308 	add.w	r3, r2, #8
 8001858:	e853 3f00 	ldrex	r3, [r3]
 800185c:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001860:	3208      	adds	r2, #8
 8001862:	e842 3100 	strex	r1, r3, [r2]
 8001866:	2900      	cmp	r1, #0
 8001868:	d1f3      	bne.n	8001852 <UART_WaitOnFlagUntilTimeout+0x64>

          huart->gState = HAL_UART_STATE_READY;
 800186a:	2320      	movs	r3, #32
 800186c:	67ab      	str	r3, [r5, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800186e:	67eb      	str	r3, [r5, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8001870:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001874:	2300      	movs	r3, #0
 8001876:	f885 3074 	strb.w	r3, [r5, #116]	; 0x74

          return HAL_TIMEOUT;
 800187a:	2003      	movs	r0, #3
 800187c:	e01d      	b.n	80018ba <UART_WaitOnFlagUntilTimeout+0xcc>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800187e:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001880:	e852 3f00 	ldrex	r3, [r2]
 8001884:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001888:	e842 3100 	strex	r1, r3, [r2]
 800188c:	2900      	cmp	r1, #0
 800188e:	d1f6      	bne.n	800187e <UART_WaitOnFlagUntilTimeout+0x90>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001890:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001892:	f102 0308 	add.w	r3, r2, #8
 8001896:	e853 3f00 	ldrex	r3, [r3]
 800189a:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800189e:	3208      	adds	r2, #8
 80018a0:	e842 3100 	strex	r1, r3, [r2]
 80018a4:	2900      	cmp	r1, #0
 80018a6:	d1f3      	bne.n	8001890 <UART_WaitOnFlagUntilTimeout+0xa2>
        huart->gState = HAL_UART_STATE_READY;
 80018a8:	2320      	movs	r3, #32
 80018aa:	67ab      	str	r3, [r5, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80018ac:	67eb      	str	r3, [r5, #124]	; 0x7c
        __HAL_UNLOCK(huart);
 80018ae:	2300      	movs	r3, #0
 80018b0:	f885 3074 	strb.w	r3, [r5, #116]	; 0x74
        return HAL_TIMEOUT;
 80018b4:	2003      	movs	r0, #3
 80018b6:	e000      	b.n	80018ba <UART_WaitOnFlagUntilTimeout+0xcc>
        }
      }
    }
  }
  return HAL_OK;
 80018b8:	2000      	movs	r0, #0
}
 80018ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080018be <UART_CheckIdleState>:
{
 80018be:	b530      	push	{r4, r5, lr}
 80018c0:	b083      	sub	sp, #12
 80018c2:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80018c4:	2300      	movs	r3, #0
 80018c6:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  tickstart = HAL_GetTick();
 80018ca:	f7fe fcbf 	bl	800024c <HAL_GetTick>
 80018ce:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80018d0:	6823      	ldr	r3, [r4, #0]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f013 0f08 	tst.w	r3, #8
 80018d8:	d10d      	bne.n	80018f6 <UART_CheckIdleState+0x38>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80018da:	6823      	ldr	r3, [r4, #0]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f013 0f04 	tst.w	r3, #4
 80018e2:	d116      	bne.n	8001912 <UART_CheckIdleState+0x54>
  huart->gState = HAL_UART_STATE_READY;
 80018e4:	2320      	movs	r3, #32
 80018e6:	67a3      	str	r3, [r4, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80018e8:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80018ea:	2000      	movs	r0, #0
 80018ec:	6620      	str	r0, [r4, #96]	; 0x60
  __HAL_UNLOCK(huart);
 80018ee:	f884 0074 	strb.w	r0, [r4, #116]	; 0x74
}
 80018f2:	b003      	add	sp, #12
 80018f4:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80018f6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80018fa:	9300      	str	r3, [sp, #0]
 80018fc:	4603      	mov	r3, r0
 80018fe:	2200      	movs	r2, #0
 8001900:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8001904:	4620      	mov	r0, r4
 8001906:	f7ff ff72 	bl	80017ee <UART_WaitOnFlagUntilTimeout>
 800190a:	2800      	cmp	r0, #0
 800190c:	d0e5      	beq.n	80018da <UART_CheckIdleState+0x1c>
      return HAL_TIMEOUT;
 800190e:	2003      	movs	r0, #3
 8001910:	e7ef      	b.n	80018f2 <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001912:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001916:	9300      	str	r3, [sp, #0]
 8001918:	462b      	mov	r3, r5
 800191a:	2200      	movs	r2, #0
 800191c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8001920:	4620      	mov	r0, r4
 8001922:	f7ff ff64 	bl	80017ee <UART_WaitOnFlagUntilTimeout>
 8001926:	2800      	cmp	r0, #0
 8001928:	d0dc      	beq.n	80018e4 <UART_CheckIdleState+0x26>
      return HAL_TIMEOUT;
 800192a:	2003      	movs	r0, #3
 800192c:	e7e1      	b.n	80018f2 <UART_CheckIdleState+0x34>

0800192e <HAL_UART_Init>:
  if (huart == NULL)
 800192e:	b368      	cbz	r0, 800198c <HAL_UART_Init+0x5e>
{
 8001930:	b510      	push	{r4, lr}
 8001932:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8001934:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8001936:	b303      	cbz	r3, 800197a <HAL_UART_Init+0x4c>
  huart->gState = HAL_UART_STATE_BUSY;
 8001938:	2324      	movs	r3, #36	; 0x24
 800193a:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 800193c:	6822      	ldr	r2, [r4, #0]
 800193e:	6813      	ldr	r3, [r2, #0]
 8001940:	f023 0301 	bic.w	r3, r3, #1
 8001944:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001946:	4620      	mov	r0, r4
 8001948:	f7ff fdc4 	bl	80014d4 <UART_SetConfig>
 800194c:	2801      	cmp	r0, #1
 800194e:	d013      	beq.n	8001978 <HAL_UART_Init+0x4a>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001950:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001952:	b9bb      	cbnz	r3, 8001984 <HAL_UART_Init+0x56>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001954:	6822      	ldr	r2, [r4, #0]
 8001956:	6853      	ldr	r3, [r2, #4]
 8001958:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800195c:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800195e:	6822      	ldr	r2, [r4, #0]
 8001960:	6893      	ldr	r3, [r2, #8]
 8001962:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8001966:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8001968:	6822      	ldr	r2, [r4, #0]
 800196a:	6813      	ldr	r3, [r2, #0]
 800196c:	f043 0301 	orr.w	r3, r3, #1
 8001970:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8001972:	4620      	mov	r0, r4
 8001974:	f7ff ffa3 	bl	80018be <UART_CheckIdleState>
}
 8001978:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 800197a:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    HAL_UART_MspInit(huart);
 800197e:	f000 faf3 	bl	8001f68 <HAL_UART_MspInit>
 8001982:	e7d9      	b.n	8001938 <HAL_UART_Init+0xa>
    UART_AdvFeatureConfig(huart);
 8001984:	4620      	mov	r0, r4
 8001986:	f7ff fecd 	bl	8001724 <UART_AdvFeatureConfig>
 800198a:	e7e3      	b.n	8001954 <HAL_UART_Init+0x26>
    return HAL_ERROR;
 800198c:	2001      	movs	r0, #1
}
 800198e:	4770      	bx	lr

08001990 <MX_GPIO_Init>:
        * EXTI
     PA11   ------> USB_DM
     PA12   ------> USB_DP
*/
void MX_GPIO_Init(void)
{
 8001990:	b570      	push	{r4, r5, r6, lr}
 8001992:	b08a      	sub	sp, #40	; 0x28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001994:	2400      	movs	r4, #0
 8001996:	9405      	str	r4, [sp, #20]
 8001998:	9406      	str	r4, [sp, #24]
 800199a:	9407      	str	r4, [sp, #28]
 800199c:	9408      	str	r4, [sp, #32]
 800199e:	9409      	str	r4, [sp, #36]	; 0x24

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019a0:	4b2c      	ldr	r3, [pc, #176]	; (8001a54 <MX_GPIO_Init+0xc4>)
 80019a2:	695a      	ldr	r2, [r3, #20]
 80019a4:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80019a8:	615a      	str	r2, [r3, #20]
 80019aa:	695a      	ldr	r2, [r3, #20]
 80019ac:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 80019b0:	9200      	str	r2, [sp, #0]
 80019b2:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80019b4:	695a      	ldr	r2, [r3, #20]
 80019b6:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80019ba:	615a      	str	r2, [r3, #20]
 80019bc:	695a      	ldr	r2, [r3, #20]
 80019be:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 80019c2:	9201      	str	r2, [sp, #4]
 80019c4:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019c6:	695a      	ldr	r2, [r3, #20]
 80019c8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80019cc:	615a      	str	r2, [r3, #20]
 80019ce:	695a      	ldr	r2, [r3, #20]
 80019d0:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80019d4:	9202      	str	r2, [sp, #8]
 80019d6:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80019d8:	695a      	ldr	r2, [r3, #20]
 80019da:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80019de:	615a      	str	r2, [r3, #20]
 80019e0:	695a      	ldr	r2, [r3, #20]
 80019e2:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80019e6:	9203      	str	r2, [sp, #12]
 80019e8:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019ea:	695a      	ldr	r2, [r3, #20]
 80019ec:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80019f0:	615a      	str	r2, [r3, #20]
 80019f2:	695b      	ldr	r3, [r3, #20]
 80019f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80019f8:	9304      	str	r3, [sp, #16]
 80019fa:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LD4_Pin|LD3_Pin|LD5_Pin|LD7_Pin
 80019fc:	4d16      	ldr	r5, [pc, #88]	; (8001a58 <MX_GPIO_Init+0xc8>)
 80019fe:	4622      	mov	r2, r4
 8001a00:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 8001a04:	4628      	mov	r0, r5
 8001a06:	f7fe fd53 	bl	80004b0 <HAL_GPIO_WritePin>
                          |LD9_Pin|LD10_Pin|LD8_Pin|LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001a0a:	2601      	movs	r6, #1
 8001a0c:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a0e:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a10:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001a12:	a905      	add	r1, sp, #20
 8001a14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a18:	f7fe fc7a 	bl	8000310 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD7_Pin
 8001a1c:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8001a20:	9305      	str	r3, [sp, #20]
                          |LD9_Pin|LD10_Pin|LD8_Pin|LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a22:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a24:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a26:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a28:	a905      	add	r1, sp, #20
 8001a2a:	4628      	mov	r0, r5
 8001a2c:	f7fe fc70 	bl	8000310 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8001a30:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001a34:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a36:	2302      	movs	r3, #2
 8001a38:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3a:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a3c:	2303      	movs	r3, #3
 8001a3e:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8001a40:	230e      	movs	r3, #14
 8001a42:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a44:	a905      	add	r1, sp, #20
 8001a46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a4a:	f7fe fc61 	bl	8000310 <HAL_GPIO_Init>

}
 8001a4e:	b00a      	add	sp, #40	; 0x28
 8001a50:	bd70      	pop	{r4, r5, r6, pc}
 8001a52:	bf00      	nop
 8001a54:	40021000 	.word	0x40021000
 8001a58:	48001000 	.word	0x48001000

08001a5c <VFDLoadBMP>:
	for (int i = 0; i < count; ++i) {
	    count--;
	}
}

void VFDLoadBMP(uint8_t Grid, uint8_t *sBMP){
 8001a5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001a60:	4686      	mov	lr, r0
	// Logically thinking : Determine the Grid is Event or Odd number (Important, For the simple algorithm to convert abcdef to afbecd format).
		uint8_t EvOd = 0;
		if(Grid%2){
 8001a62:	f010 0201 	ands.w	r2, r0, #1
 8001a66:	d000      	beq.n	8001a6a <VFDLoadBMP+0xe>
			EvOd = 1;// odd number (odd grid), Only manipulate the a, b, c Dots
 8001a68:	2201      	movs	r2, #1
			EvOd = 0;// event number (event grid), Only manipulate the d, e, f Dots
		}

uint8_t nxtWrd = 0;
uint8_t CMP= 0;
for(uint8_t wdCount=0; wdCount < 2;wdCount++){// First 6 array repeat itself so do this twice.
 8001a6a:	2500      	movs	r5, #0
uint8_t nxtWrd = 0;
 8001a6c:	462c      	mov	r4, r5
for(uint8_t wdCount=0; wdCount < 2;wdCount++){// First 6 array repeat itself so do this twice.
 8001a6e:	e0ac      	b.n	8001bca <VFDLoadBMP+0x16e>
		for(uint8_t i=0;i < 32;i++){// for 2nd round
			memcpy(&CMP, sBMP,1);
			if(CMP & (1 << reOrder0[EvOd][i%6])){
				GPbuff[0+nxtWrd] |= (1 << i);
			}else{
				GPbuff[0+nxtWrd] &= ~(1 << i);
 8001a70:	2701      	movs	r7, #1
 8001a72:	fa07 fc06 	lsl.w	ip, r7, r6
 8001a76:	48a3      	ldr	r0, [pc, #652]	; (8001d04 <VFDLoadBMP+0x2a8>)
 8001a78:	f850 7024 	ldr.w	r7, [r0, r4, lsl #2]
 8001a7c:	ea27 070c 	bic.w	r7, r7, ip
 8001a80:	f840 7024 	str.w	r7, [r0, r4, lsl #2]
			}

			if((i%6) == 5){// move to next bitmap when we complete previous 6bit BMP
 8001a84:	2b05      	cmp	r3, #5
 8001a86:	d025      	beq.n	8001ad4 <VFDLoadBMP+0x78>
		for(uint8_t i=0;i < 32;i++){// for 2nd round
 8001a88:	3601      	adds	r6, #1
 8001a8a:	b2f6      	uxtb	r6, r6
 8001a8c:	2e1f      	cmp	r6, #31
 8001a8e:	d823      	bhi.n	8001ad8 <VFDLoadBMP+0x7c>
			if(CMP & (1 << reOrder0[EvOd][i%6])){
 8001a90:	4b9d      	ldr	r3, [pc, #628]	; (8001d08 <VFDLoadBMP+0x2ac>)
 8001a92:	fba3 0306 	umull	r0, r3, r3, r6
 8001a96:	089b      	lsrs	r3, r3, #2
 8001a98:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001a9c:	eba6 0343 	sub.w	r3, r6, r3, lsl #1
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	0057      	lsls	r7, r2, #1
 8001aa4:	eb07 0c02 	add.w	ip, r7, r2
 8001aa8:	4f98      	ldr	r7, [pc, #608]	; (8001d0c <VFDLoadBMP+0x2b0>)
 8001aaa:	eb07 074c 	add.w	r7, r7, ip, lsl #1
 8001aae:	f817 c003 	ldrb.w	ip, [r7, r3]
 8001ab2:	780f      	ldrb	r7, [r1, #0]
 8001ab4:	fa47 f70c 	asr.w	r7, r7, ip
 8001ab8:	f017 0f01 	tst.w	r7, #1
 8001abc:	d0d8      	beq.n	8001a70 <VFDLoadBMP+0x14>
				GPbuff[0+nxtWrd] |= (1 << i);
 8001abe:	2701      	movs	r7, #1
 8001ac0:	fa07 fc06 	lsl.w	ip, r7, r6
 8001ac4:	488f      	ldr	r0, [pc, #572]	; (8001d04 <VFDLoadBMP+0x2a8>)
 8001ac6:	f850 7024 	ldr.w	r7, [r0, r4, lsl #2]
 8001aca:	ea47 070c 	orr.w	r7, r7, ip
 8001ace:	f840 7024 	str.w	r7, [r0, r4, lsl #2]
 8001ad2:	e7d7      	b.n	8001a84 <VFDLoadBMP+0x28>
			sBMP++;
 8001ad4:	3101      	adds	r1, #1
 8001ad6:	e7d7      	b.n	8001a88 <VFDLoadBMP+0x2c>
		}

		// GPbuff[1] and GPbuff[4]
		//
		//4 bytes on second buffer array + 4 bits for 11a, 11f, 11b and 11e
		for(uint8_t i=0;i < 32;i++){
 8001ad8:	2600      	movs	r6, #0
 8001ada:	e00f      	b.n	8001afc <VFDLoadBMP+0xa0>
			memcpy(&CMP, sBMP,1);
			if(CMP & (1 << reOrder1[EvOd][(i%6)])){
				GPbuff[1+nxtWrd] |= (1 << i);
			}else{
				GPbuff[1+nxtWrd] &= ~(1 << i);
 8001adc:	f104 0801 	add.w	r8, r4, #1
 8001ae0:	2701      	movs	r7, #1
 8001ae2:	fa07 fc06 	lsl.w	ip, r7, r6
 8001ae6:	4887      	ldr	r0, [pc, #540]	; (8001d04 <VFDLoadBMP+0x2a8>)
 8001ae8:	f850 7028 	ldr.w	r7, [r0, r8, lsl #2]
 8001aec:	ea27 070c 	bic.w	r7, r7, ip
 8001af0:	f840 7028 	str.w	r7, [r0, r8, lsl #2]
			}

			if((i%6) == 3){// move to next bitmap when we complete previous 6bit BMP
 8001af4:	2b03      	cmp	r3, #3
 8001af6:	d028      	beq.n	8001b4a <VFDLoadBMP+0xee>
		for(uint8_t i=0;i < 32;i++){
 8001af8:	3601      	adds	r6, #1
 8001afa:	b2f6      	uxtb	r6, r6
 8001afc:	2e1f      	cmp	r6, #31
 8001afe:	d826      	bhi.n	8001b4e <VFDLoadBMP+0xf2>
			if(CMP & (1 << reOrder1[EvOd][(i%6)])){
 8001b00:	4b81      	ldr	r3, [pc, #516]	; (8001d08 <VFDLoadBMP+0x2ac>)
 8001b02:	fba3 0306 	umull	r0, r3, r3, r6
 8001b06:	089b      	lsrs	r3, r3, #2
 8001b08:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001b0c:	eba6 0343 	sub.w	r3, r6, r3, lsl #1
 8001b10:	b2db      	uxtb	r3, r3
 8001b12:	0057      	lsls	r7, r2, #1
 8001b14:	eb07 0c02 	add.w	ip, r7, r2
 8001b18:	4f7c      	ldr	r7, [pc, #496]	; (8001d0c <VFDLoadBMP+0x2b0>)
 8001b1a:	eb07 074c 	add.w	r7, r7, ip, lsl #1
 8001b1e:	441f      	add	r7, r3
 8001b20:	f897 c00c 	ldrb.w	ip, [r7, #12]
 8001b24:	780f      	ldrb	r7, [r1, #0]
 8001b26:	fa47 f70c 	asr.w	r7, r7, ip
 8001b2a:	f017 0f01 	tst.w	r7, #1
 8001b2e:	d0d5      	beq.n	8001adc <VFDLoadBMP+0x80>
				GPbuff[1+nxtWrd] |= (1 << i);
 8001b30:	f104 0801 	add.w	r8, r4, #1
 8001b34:	2701      	movs	r7, #1
 8001b36:	fa07 fc06 	lsl.w	ip, r7, r6
 8001b3a:	4872      	ldr	r0, [pc, #456]	; (8001d04 <VFDLoadBMP+0x2a8>)
 8001b3c:	f850 7028 	ldr.w	r7, [r0, r8, lsl #2]
 8001b40:	ea47 070c 	orr.w	r7, r7, ip
 8001b44:	f840 7028 	str.w	r7, [r0, r8, lsl #2]
 8001b48:	e7d4      	b.n	8001af4 <VFDLoadBMP+0x98>
			sBMP++;
 8001b4a:	3101      	adds	r1, #1
 8001b4c:	e7d4      	b.n	8001af8 <VFDLoadBMP+0x9c>
		}

		// GPbuff[2] and GPbuff[5]
		//
		//4 bytes on 3rd buffer array
		for(uint8_t i=0;i < 32;i++){
 8001b4e:	2600      	movs	r6, #0
 8001b50:	e00f      	b.n	8001b72 <VFDLoadBMP+0x116>
			memcpy(&CMP, sBMP,1);
			if(CMP & (1 << reOrder2[EvOd][i%6])){
				GPbuff[2+nxtWrd] |= (1 << i);
			}else{
				GPbuff[2+nxtWrd] &= ~(1 << i);
 8001b52:	f104 0802 	add.w	r8, r4, #2
 8001b56:	2701      	movs	r7, #1
 8001b58:	fa07 fc06 	lsl.w	ip, r7, r6
 8001b5c:	4869      	ldr	r0, [pc, #420]	; (8001d04 <VFDLoadBMP+0x2a8>)
 8001b5e:	f850 7028 	ldr.w	r7, [r0, r8, lsl #2]
 8001b62:	ea27 070c 	bic.w	r7, r7, ip
 8001b66:	f840 7028 	str.w	r7, [r0, r8, lsl #2]
			}

			if((i%6) == 1){// move to next bitmap when we complete previous 6bit BMP
 8001b6a:	2b01      	cmp	r3, #1
 8001b6c:	d028      	beq.n	8001bc0 <VFDLoadBMP+0x164>
		for(uint8_t i=0;i < 32;i++){
 8001b6e:	3601      	adds	r6, #1
 8001b70:	b2f6      	uxtb	r6, r6
 8001b72:	2e1f      	cmp	r6, #31
 8001b74:	d826      	bhi.n	8001bc4 <VFDLoadBMP+0x168>
			if(CMP & (1 << reOrder2[EvOd][i%6])){
 8001b76:	4b64      	ldr	r3, [pc, #400]	; (8001d08 <VFDLoadBMP+0x2ac>)
 8001b78:	fba3 0306 	umull	r0, r3, r3, r6
 8001b7c:	089b      	lsrs	r3, r3, #2
 8001b7e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001b82:	eba6 0343 	sub.w	r3, r6, r3, lsl #1
 8001b86:	b2db      	uxtb	r3, r3
 8001b88:	0057      	lsls	r7, r2, #1
 8001b8a:	eb07 0c02 	add.w	ip, r7, r2
 8001b8e:	4f5f      	ldr	r7, [pc, #380]	; (8001d0c <VFDLoadBMP+0x2b0>)
 8001b90:	eb07 074c 	add.w	r7, r7, ip, lsl #1
 8001b94:	441f      	add	r7, r3
 8001b96:	f897 c018 	ldrb.w	ip, [r7, #24]
 8001b9a:	780f      	ldrb	r7, [r1, #0]
 8001b9c:	fa47 f70c 	asr.w	r7, r7, ip
 8001ba0:	f017 0f01 	tst.w	r7, #1
 8001ba4:	d0d5      	beq.n	8001b52 <VFDLoadBMP+0xf6>
				GPbuff[2+nxtWrd] |= (1 << i);
 8001ba6:	f104 0802 	add.w	r8, r4, #2
 8001baa:	2701      	movs	r7, #1
 8001bac:	fa07 fc06 	lsl.w	ip, r7, r6
 8001bb0:	4854      	ldr	r0, [pc, #336]	; (8001d04 <VFDLoadBMP+0x2a8>)
 8001bb2:	f850 7028 	ldr.w	r7, [r0, r8, lsl #2]
 8001bb6:	ea47 070c 	orr.w	r7, r7, ip
 8001bba:	f840 7028 	str.w	r7, [r0, r8, lsl #2]
 8001bbe:	e7d4      	b.n	8001b6a <VFDLoadBMP+0x10e>
			sBMP++;
 8001bc0:	3101      	adds	r1, #1
 8001bc2:	e7d4      	b.n	8001b6e <VFDLoadBMP+0x112>
for(uint8_t wdCount=0; wdCount < 2;wdCount++){// First 6 array repeat itself so do this twice.
 8001bc4:	3501      	adds	r5, #1
 8001bc6:	b2ed      	uxtb	r5, r5
			}
		}

		nxtWrd = 3;// next time we start the array at GPbuff[3]
 8001bc8:	2403      	movs	r4, #3
for(uint8_t wdCount=0; wdCount < 2;wdCount++){// First 6 array repeat itself so do this twice.
 8001bca:	2d01      	cmp	r5, #1
 8001bcc:	d801      	bhi.n	8001bd2 <VFDLoadBMP+0x176>
		for(uint8_t i=0;i < 32;i++){// for 2nd round
 8001bce:	2600      	movs	r6, #0
 8001bd0:	e75c      	b.n	8001a8c <VFDLoadBMP+0x30>
}//for(uint8_t wdCount=0; wdCount < 2;wdCount++)

		// GPbuff[6]
		// 32a to 38f

		for(uint8_t i=0;i < 32;i++){// for 2nd round
 8001bd2:	2400      	movs	r4, #0
 8001bd4:	e00b      	b.n	8001bee <VFDLoadBMP+0x192>
			memcpy(&CMP, sBMP,1);
			if(CMP & (1 << reOrder0[EvOd][i%6])){
				GPbuff[6] |= (1 << i);
			}else{
				GPbuff[6] &= ~(1 << i);
 8001bd6:	2501      	movs	r5, #1
 8001bd8:	fa05 f604 	lsl.w	r6, r5, r4
 8001bdc:	4f49      	ldr	r7, [pc, #292]	; (8001d04 <VFDLoadBMP+0x2a8>)
 8001bde:	69bd      	ldr	r5, [r7, #24]
 8001be0:	ea25 0506 	bic.w	r5, r5, r6
 8001be4:	61bd      	str	r5, [r7, #24]
			}

			if((i%6) == 5){// move to next bitmap when we complete previous 6bit BMP
 8001be6:	2b05      	cmp	r3, #5
 8001be8:	d01f      	beq.n	8001c2a <VFDLoadBMP+0x1ce>
		for(uint8_t i=0;i < 32;i++){// for 2nd round
 8001bea:	3401      	adds	r4, #1
 8001bec:	b2e4      	uxtb	r4, r4
 8001bee:	2c1f      	cmp	r4, #31
 8001bf0:	d81d      	bhi.n	8001c2e <VFDLoadBMP+0x1d2>
			if(CMP & (1 << reOrder0[EvOd][i%6])){
 8001bf2:	4b45      	ldr	r3, [pc, #276]	; (8001d08 <VFDLoadBMP+0x2ac>)
 8001bf4:	fba3 0304 	umull	r0, r3, r3, r4
 8001bf8:	089b      	lsrs	r3, r3, #2
 8001bfa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001bfe:	eba4 0343 	sub.w	r3, r4, r3, lsl #1
 8001c02:	b2db      	uxtb	r3, r3
 8001c04:	0055      	lsls	r5, r2, #1
 8001c06:	18ae      	adds	r6, r5, r2
 8001c08:	4d40      	ldr	r5, [pc, #256]	; (8001d0c <VFDLoadBMP+0x2b0>)
 8001c0a:	eb05 0546 	add.w	r5, r5, r6, lsl #1
 8001c0e:	5cee      	ldrb	r6, [r5, r3]
 8001c10:	780d      	ldrb	r5, [r1, #0]
 8001c12:	4135      	asrs	r5, r6
 8001c14:	f015 0f01 	tst.w	r5, #1
 8001c18:	d0dd      	beq.n	8001bd6 <VFDLoadBMP+0x17a>
				GPbuff[6] |= (1 << i);
 8001c1a:	2501      	movs	r5, #1
 8001c1c:	fa05 f604 	lsl.w	r6, r5, r4
 8001c20:	4f38      	ldr	r7, [pc, #224]	; (8001d04 <VFDLoadBMP+0x2a8>)
 8001c22:	69bd      	ldr	r5, [r7, #24]
 8001c24:	4335      	orrs	r5, r6
 8001c26:	61bd      	str	r5, [r7, #24]
 8001c28:	e7dd      	b.n	8001be6 <VFDLoadBMP+0x18a>
			sBMP++;
 8001c2a:	3101      	adds	r1, #1
 8001c2c:	e7dd      	b.n	8001bea <VFDLoadBMP+0x18e>
			}
		}

		for(uint8_t i=0;i < 10;i++){
 8001c2e:	2400      	movs	r4, #0
 8001c30:	e00b      	b.n	8001c4a <VFDLoadBMP+0x1ee>
			memcpy(&CMP, sBMP,1);
			if(CMP & (1 << reOrder1[EvOd][i%6])){
				GPbuff[7] |= (1 << i);
			}else{
				GPbuff[7] &= ~(1 << i);
 8001c32:	2501      	movs	r5, #1
 8001c34:	fa05 f604 	lsl.w	r6, r5, r4
 8001c38:	4f32      	ldr	r7, [pc, #200]	; (8001d04 <VFDLoadBMP+0x2a8>)
 8001c3a:	69fd      	ldr	r5, [r7, #28]
 8001c3c:	ea25 0506 	bic.w	r5, r5, r6
 8001c40:	61fd      	str	r5, [r7, #28]
			}

			if((i%6) == 3){// move to next bitmap when we complete previous 6bit BMP
 8001c42:	2b03      	cmp	r3, #3
 8001c44:	d020      	beq.n	8001c88 <VFDLoadBMP+0x22c>
		for(uint8_t i=0;i < 10;i++){
 8001c46:	3401      	adds	r4, #1
 8001c48:	b2e4      	uxtb	r4, r4
 8001c4a:	2c09      	cmp	r4, #9
 8001c4c:	d81e      	bhi.n	8001c8c <VFDLoadBMP+0x230>
			if(CMP & (1 << reOrder1[EvOd][i%6])){
 8001c4e:	4b2e      	ldr	r3, [pc, #184]	; (8001d08 <VFDLoadBMP+0x2ac>)
 8001c50:	fba3 0304 	umull	r0, r3, r3, r4
 8001c54:	089b      	lsrs	r3, r3, #2
 8001c56:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001c5a:	eba4 0343 	sub.w	r3, r4, r3, lsl #1
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	0055      	lsls	r5, r2, #1
 8001c62:	18ae      	adds	r6, r5, r2
 8001c64:	4d29      	ldr	r5, [pc, #164]	; (8001d0c <VFDLoadBMP+0x2b0>)
 8001c66:	eb05 0546 	add.w	r5, r5, r6, lsl #1
 8001c6a:	441d      	add	r5, r3
 8001c6c:	7b2e      	ldrb	r6, [r5, #12]
 8001c6e:	780d      	ldrb	r5, [r1, #0]
 8001c70:	4135      	asrs	r5, r6
 8001c72:	f015 0f01 	tst.w	r5, #1
 8001c76:	d0dc      	beq.n	8001c32 <VFDLoadBMP+0x1d6>
				GPbuff[7] |= (1 << i);
 8001c78:	2501      	movs	r5, #1
 8001c7a:	fa05 f604 	lsl.w	r6, r5, r4
 8001c7e:	4f21      	ldr	r7, [pc, #132]	; (8001d04 <VFDLoadBMP+0x2a8>)
 8001c80:	69fd      	ldr	r5, [r7, #28]
 8001c82:	4335      	orrs	r5, r6
 8001c84:	61fd      	str	r5, [r7, #28]
 8001c86:	e7dc      	b.n	8001c42 <VFDLoadBMP+0x1e6>
			sBMP++;
 8001c88:	3101      	adds	r1, #1
 8001c8a:	e7dc      	b.n	8001c46 <VFDLoadBMP+0x1ea>
			}
		}

			if(Grid < 22){// Grid number is between 1 - 21
 8001c8c:	f1be 0f15 	cmp.w	lr, #21
 8001c90:	d81b      	bhi.n	8001cca <VFDLoadBMP+0x26e>
				GPbuff[7] |= (1 << (Grid+9));// Grid N on
 8001c92:	f10e 0309 	add.w	r3, lr, #9
 8001c96:	2201      	movs	r2, #1
 8001c98:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9c:	4919      	ldr	r1, [pc, #100]	; (8001d04 <VFDLoadBMP+0x2a8>)
 8001c9e:	69cc      	ldr	r4, [r1, #28]
 8001ca0:	4323      	orrs	r3, r4
				GPbuff[7] |= (1 << (Grid+10));// Grid  N+1 on
 8001ca2:	f10e 000a 	add.w	r0, lr, #10
 8001ca6:	4082      	lsls	r2, r0
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	61cb      	str	r3, [r1, #28]
			}else{// Grid number is between 23-54
				GPbuff[8] |= (1 << (Grid-23));
				GPbuff[8] |= (1 << (Grid-22));
			}

			memcpy(Sendbuffptr, GPbuff, 36);
 8001cac:	4e15      	ldr	r6, [pc, #84]	; (8001d04 <VFDLoadBMP+0x2a8>)
 8001cae:	f106 0424 	add.w	r4, r6, #36	; 0x24
 8001cb2:	4635      	mov	r5, r6
 8001cb4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cb6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cb8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cbc:	682b      	ldr	r3, [r5, #0]
 8001cbe:	6023      	str	r3, [r4, #0]
			GPbuff[7] = 0;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	61f3      	str	r3, [r6, #28]
			GPbuff[8] = 0;
 8001cc4:	6233      	str	r3, [r6, #32]
	}
 8001cc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			}else if(Grid == 22){// Grid number is 22
 8001cca:	f1be 0f16 	cmp.w	lr, #22
 8001cce:	d00e      	beq.n	8001cee <VFDLoadBMP+0x292>
				GPbuff[8] |= (1 << (Grid-23));
 8001cd0:	f1ae 0317 	sub.w	r3, lr, #23
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cda:	490a      	ldr	r1, [pc, #40]	; (8001d04 <VFDLoadBMP+0x2a8>)
 8001cdc:	6a0c      	ldr	r4, [r1, #32]
 8001cde:	4323      	orrs	r3, r4
				GPbuff[8] |= (1 << (Grid-22));
 8001ce0:	f1ae 0016 	sub.w	r0, lr, #22
 8001ce4:	fa02 f000 	lsl.w	r0, r2, r0
 8001ce8:	4303      	orrs	r3, r0
 8001cea:	620b      	str	r3, [r1, #32]
 8001cec:	e7de      	b.n	8001cac <VFDLoadBMP+0x250>
				GPbuff[7] |= (1 << 31);// Grid 22 on
 8001cee:	4b05      	ldr	r3, [pc, #20]	; (8001d04 <VFDLoadBMP+0x2a8>)
 8001cf0:	69da      	ldr	r2, [r3, #28]
 8001cf2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001cf6:	61da      	str	r2, [r3, #28]
				GPbuff[8] |= (1 << 0);// Grid 23 on
 8001cf8:	6a1a      	ldr	r2, [r3, #32]
 8001cfa:	f042 0201 	orr.w	r2, r2, #1
 8001cfe:	621a      	str	r2, [r3, #32]
 8001d00:	e7d4      	b.n	8001cac <VFDLoadBMP+0x250>
 8001d02:	bf00      	nop
 8001d04:	20000050 	.word	0x20000050
 8001d08:	aaaaaaab 	.word	0xaaaaaaab
 8001d0c:	080020b8 	.word	0x080020b8

08001d10 <VFDUpdate>:


void VFDUpdate(){
 8001d10:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(GPIOE, LD4_Pin, GPIO_PIN_SET);// BLK high
 8001d12:	4c10      	ldr	r4, [pc, #64]	; (8001d54 <VFDUpdate+0x44>)
 8001d14:	2201      	movs	r2, #1
 8001d16:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d1a:	4620      	mov	r0, r4
 8001d1c:	f7fe fbc8 	bl	80004b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, LD3_Pin, GPIO_PIN_SET);// LAT high
 8001d20:	2201      	movs	r2, #1
 8001d22:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001d26:	4620      	mov	r0, r4
 8001d28:	f7fe fbc2 	bl	80004b0 <HAL_GPIO_WritePin>
	Delay_us(50);
	HAL_GPIO_WritePin(GPIOE, LD3_Pin, GPIO_PIN_RESET);// LAT low
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001d32:	4620      	mov	r0, r4
 8001d34:	f7fe fbbc 	bl	80004b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, LD4_Pin, GPIO_PIN_RESET);// BLK low
 8001d38:	2200      	movs	r2, #0
 8001d3a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d3e:	4620      	mov	r0, r4
 8001d40:	f7fe fbb6 	bl	80004b0 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi2, Sendbuffptr, 36, HAL_MAX_DELAY);// Send data over SPI
 8001d44:	f04f 33ff 	mov.w	r3, #4294967295
 8001d48:	2224      	movs	r2, #36	; 0x24
 8001d4a:	4903      	ldr	r1, [pc, #12]	; (8001d58 <VFDUpdate+0x48>)
 8001d4c:	4803      	ldr	r0, [pc, #12]	; (8001d5c <VFDUpdate+0x4c>)
 8001d4e:	f7ff fac4 	bl	80012da <HAL_SPI_Transmit>
}
 8001d52:	bd10      	pop	{r4, pc}
 8001d54:	48001000 	.word	0x48001000
 8001d58:	20000074 	.word	0x20000074
 8001d5c:	2000009c 	.word	0x2000009c

08001d60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d60:	b570      	push	{r4, r5, r6, lr}
 8001d62:	b09e      	sub	sp, #120	; 0x78
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d64:	2400      	movs	r4, #0
 8001d66:	9415      	str	r4, [sp, #84]	; 0x54
 8001d68:	9416      	str	r4, [sp, #88]	; 0x58
 8001d6a:	9417      	str	r4, [sp, #92]	; 0x5c
 8001d6c:	941a      	str	r4, [sp, #104]	; 0x68
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d6e:	940f      	str	r4, [sp, #60]	; 0x3c
 8001d70:	9410      	str	r4, [sp, #64]	; 0x40
 8001d72:	9411      	str	r4, [sp, #68]	; 0x44
 8001d74:	9412      	str	r4, [sp, #72]	; 0x48
 8001d76:	9413      	str	r4, [sp, #76]	; 0x4c
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d78:	223c      	movs	r2, #60	; 0x3c
 8001d7a:	4621      	mov	r1, r4
 8001d7c:	4668      	mov	r0, sp
 8001d7e:	f000 f977 	bl	8002070 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001d82:	2602      	movs	r6, #2
 8001d84:	9614      	str	r6, [sp, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d86:	2501      	movs	r5, #1
 8001d88:	9518      	str	r5, [sp, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001d8a:	2310      	movs	r3, #16
 8001d8c:	9319      	str	r3, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d8e:	961b      	str	r6, [sp, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001d90:	941c      	str	r4, [sp, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8001d92:	f44f 1320 	mov.w	r3, #2621440	; 0x280000
 8001d96:	931d      	str	r3, [sp, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d98:	a814      	add	r0, sp, #80	; 0x50
 8001d9a:	f7fe fb8f 	bl	80004bc <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d9e:	230f      	movs	r3, #15
 8001da0:	930f      	str	r3, [sp, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001da2:	9610      	str	r6, [sp, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001da4:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001da6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001daa:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001dac:	9413      	str	r4, [sp, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001dae:	4629      	mov	r1, r5
 8001db0:	a80f      	add	r0, sp, #60	; 0x3c
 8001db2:	f7fe fed5 	bl	8000b60 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001db6:	9500      	str	r5, [sp, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001db8:	9402      	str	r4, [sp, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001dba:	4668      	mov	r0, sp
 8001dbc:	f7fe ffd6 	bl	8000d6c <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8001dc0:	b01e      	add	sp, #120	; 0x78
 8001dc2:	bd70      	pop	{r4, r5, r6, pc}

08001dc4 <main>:
{
 8001dc4:	b510      	push	{r4, lr}
  HAL_Init();
 8001dc6:	f7fe fa23 	bl	8000210 <HAL_Init>
  SystemClock_Config();
 8001dca:	f7ff ffc9 	bl	8001d60 <SystemClock_Config>
  MX_GPIO_Init();
 8001dce:	f7ff fddf 	bl	8001990 <MX_GPIO_Init>
  MX_SPI2_Init();
 8001dd2:	f000 f815 	bl	8001e00 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8001dd6:	f000 f8ab 	bl	8001f30 <MX_USART1_UART_Init>
  uint8_t GridNum = 1;
 8001dda:	2001      	movs	r0, #1
 8001ddc:	e000      	b.n	8001de0 <main+0x1c>
	VFDLoadBMP(GridNum++, img1);
 8001dde:	4620      	mov	r0, r4
 8001de0:	1c44      	adds	r4, r0, #1
 8001de2:	b2e4      	uxtb	r4, r4
 8001de4:	4904      	ldr	r1, [pc, #16]	; (8001df8 <main+0x34>)
 8001de6:	f7ff fe39 	bl	8001a5c <VFDLoadBMP>
	VFDUpdate();
 8001dea:	f7ff ff91 	bl	8001d10 <VFDUpdate>
	if(GridNum > 52)
 8001dee:	2c34      	cmp	r4, #52	; 0x34
 8001df0:	d9f5      	bls.n	8001dde <main+0x1a>
		GridNum = 1;
 8001df2:	2001      	movs	r0, #1
 8001df4:	e7f4      	b.n	8001de0 <main+0x1c>
 8001df6:	bf00      	nop
 8001df8:	20000008 	.word	0x20000008

08001dfc <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001dfc:	4770      	bx	lr
	...

08001e00 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001e00:	b508      	push	{r3, lr}
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001e02:	4811      	ldr	r0, [pc, #68]	; (8001e48 <MX_SPI2_Init+0x48>)
 8001e04:	4b11      	ldr	r3, [pc, #68]	; (8001e4c <MX_SPI2_Init+0x4c>)
 8001e06:	6003      	str	r3, [r0, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001e08:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001e0c:	6043      	str	r3, [r0, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	6083      	str	r3, [r0, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e12:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001e16:	60c2      	str	r2, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001e18:	2202      	movs	r2, #2
 8001e1a:	6102      	str	r2, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	6142      	str	r2, [r0, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001e20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e24:	6182      	str	r2, [r0, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001e26:	2210      	movs	r2, #16
 8001e28:	61c2      	str	r2, [r0, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_LSB;
 8001e2a:	2280      	movs	r2, #128	; 0x80
 8001e2c:	6202      	str	r2, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e2e:	6243      	str	r3, [r0, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e30:	6283      	str	r3, [r0, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001e32:	2207      	movs	r2, #7
 8001e34:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001e36:	6303      	str	r3, [r0, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001e38:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001e3a:	f7ff f9da 	bl	80011f2 <HAL_SPI_Init>
 8001e3e:	b900      	cbnz	r0, 8001e42 <MX_SPI2_Init+0x42>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001e40:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001e42:	f7ff ffdb 	bl	8001dfc <Error_Handler>
}
 8001e46:	e7fb      	b.n	8001e40 <MX_SPI2_Init+0x40>
 8001e48:	2000009c 	.word	0x2000009c
 8001e4c:	40003800 	.word	0x40003800

08001e50 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001e50:	b500      	push	{lr}
 8001e52:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e54:	2300      	movs	r3, #0
 8001e56:	9303      	str	r3, [sp, #12]
 8001e58:	9304      	str	r3, [sp, #16]
 8001e5a:	9305      	str	r3, [sp, #20]
 8001e5c:	9306      	str	r3, [sp, #24]
 8001e5e:	9307      	str	r3, [sp, #28]
  if(spiHandle->Instance==SPI2)
 8001e60:	6802      	ldr	r2, [r0, #0]
 8001e62:	4b15      	ldr	r3, [pc, #84]	; (8001eb8 <HAL_SPI_MspInit+0x68>)
 8001e64:	429a      	cmp	r2, r3
 8001e66:	d002      	beq.n	8001e6e <HAL_SPI_MspInit+0x1e>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001e68:	b009      	add	sp, #36	; 0x24
 8001e6a:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001e6e:	f503 33ec 	add.w	r3, r3, #120832	; 0x1d800
 8001e72:	69da      	ldr	r2, [r3, #28]
 8001e74:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001e78:	61da      	str	r2, [r3, #28]
 8001e7a:	69da      	ldr	r2, [r3, #28]
 8001e7c:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001e80:	9201      	str	r2, [sp, #4]
 8001e82:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e84:	695a      	ldr	r2, [r3, #20]
 8001e86:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001e8a:	615a      	str	r2, [r3, #20]
 8001e8c:	695b      	ldr	r3, [r3, #20]
 8001e8e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e92:	9302      	str	r3, [sp, #8]
 8001e94:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001e96:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001e9a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e9c:	2302      	movs	r3, #2
 8001e9e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ea4:	2303      	movs	r3, #3
 8001ea6:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001ea8:	2305      	movs	r3, #5
 8001eaa:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eac:	a903      	add	r1, sp, #12
 8001eae:	4803      	ldr	r0, [pc, #12]	; (8001ebc <HAL_SPI_MspInit+0x6c>)
 8001eb0:	f7fe fa2e 	bl	8000310 <HAL_GPIO_Init>
}
 8001eb4:	e7d8      	b.n	8001e68 <HAL_SPI_MspInit+0x18>
 8001eb6:	bf00      	nop
 8001eb8:	40003800 	.word	0x40003800
 8001ebc:	48000400 	.word	0x48000400

08001ec0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ec0:	b500      	push	{lr}
 8001ec2:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ec4:	4b0c      	ldr	r3, [pc, #48]	; (8001ef8 <HAL_MspInit+0x38>)
 8001ec6:	699a      	ldr	r2, [r3, #24]
 8001ec8:	f042 0201 	orr.w	r2, r2, #1
 8001ecc:	619a      	str	r2, [r3, #24]
 8001ece:	699a      	ldr	r2, [r3, #24]
 8001ed0:	f002 0201 	and.w	r2, r2, #1
 8001ed4:	9200      	str	r2, [sp, #0]
 8001ed6:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ed8:	69da      	ldr	r2, [r3, #28]
 8001eda:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001ede:	61da      	str	r2, [r3, #28]
 8001ee0:	69db      	ldr	r3, [r3, #28]
 8001ee2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ee6:	9301      	str	r3, [sp, #4]
 8001ee8:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001eea:	2007      	movs	r0, #7
 8001eec:	f7fe f9b4 	bl	8000258 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ef0:	b003      	add	sp, #12
 8001ef2:	f85d fb04 	ldr.w	pc, [sp], #4
 8001ef6:	bf00      	nop
 8001ef8:	40021000 	.word	0x40021000

08001efc <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001efc:	4770      	bx	lr

08001efe <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001efe:	e7fe      	b.n	8001efe <HardFault_Handler>

08001f00 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f00:	e7fe      	b.n	8001f00 <MemManage_Handler>

08001f02 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f02:	e7fe      	b.n	8001f02 <BusFault_Handler>

08001f04 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f04:	e7fe      	b.n	8001f04 <UsageFault_Handler>

08001f06 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f06:	4770      	bx	lr

08001f08 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f08:	4770      	bx	lr

08001f0a <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f0a:	4770      	bx	lr

08001f0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f0c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f0e:	f7fe f991 	bl	8000234 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f12:	bd08      	pop	{r3, pc}

08001f14 <SystemInit>:
  */
void SystemInit(void)
{
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f14:	4b05      	ldr	r3, [pc, #20]	; (8001f2c <SystemInit+0x18>)
 8001f16:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001f1a:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8001f1e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001f22:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001f26:	609a      	str	r2, [r3, #8]
#endif
}
 8001f28:	4770      	bx	lr
 8001f2a:	bf00      	nop
 8001f2c:	e000ed00 	.word	0xe000ed00

08001f30 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001f30:	b508      	push	{r3, lr}
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001f32:	480b      	ldr	r0, [pc, #44]	; (8001f60 <MX_USART1_UART_Init+0x30>)
 8001f34:	4b0b      	ldr	r3, [pc, #44]	; (8001f64 <MX_USART1_UART_Init+0x34>)
 8001f36:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 38400;
 8001f38:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 8001f3c:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001f42:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001f44:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001f46:	220c      	movs	r2, #12
 8001f48:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f4a:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f4c:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f4e:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f50:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001f52:	f7ff fcec 	bl	800192e <HAL_UART_Init>
 8001f56:	b900      	cbnz	r0, 8001f5a <MX_USART1_UART_Init+0x2a>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001f58:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001f5a:	f7ff ff4f 	bl	8001dfc <Error_Handler>
}
 8001f5e:	e7fb      	b.n	8001f58 <MX_USART1_UART_Init+0x28>
 8001f60:	20000100 	.word	0x20000100
 8001f64:	40013800 	.word	0x40013800

08001f68 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001f68:	b500      	push	{lr}
 8001f6a:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	9303      	str	r3, [sp, #12]
 8001f70:	9304      	str	r3, [sp, #16]
 8001f72:	9305      	str	r3, [sp, #20]
 8001f74:	9306      	str	r3, [sp, #24]
 8001f76:	9307      	str	r3, [sp, #28]
  if(uartHandle->Instance==USART1)
 8001f78:	6802      	ldr	r2, [r0, #0]
 8001f7a:	4b14      	ldr	r3, [pc, #80]	; (8001fcc <HAL_UART_MspInit+0x64>)
 8001f7c:	429a      	cmp	r2, r3
 8001f7e:	d002      	beq.n	8001f86 <HAL_UART_MspInit+0x1e>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001f80:	b009      	add	sp, #36	; 0x24
 8001f82:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_USART1_CLK_ENABLE();
 8001f86:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8001f8a:	699a      	ldr	r2, [r3, #24]
 8001f8c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001f90:	619a      	str	r2, [r3, #24]
 8001f92:	699a      	ldr	r2, [r3, #24]
 8001f94:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001f98:	9201      	str	r2, [sp, #4]
 8001f9a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f9c:	695a      	ldr	r2, [r3, #20]
 8001f9e:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001fa2:	615a      	str	r2, [r3, #20]
 8001fa4:	695b      	ldr	r3, [r3, #20]
 8001fa6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001faa:	9302      	str	r3, [sp, #8]
 8001fac:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001fae:	2330      	movs	r3, #48	; 0x30
 8001fb0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fb2:	2302      	movs	r3, #2
 8001fb4:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001fba:	2303      	movs	r3, #3
 8001fbc:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001fbe:	2307      	movs	r3, #7
 8001fc0:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fc2:	a903      	add	r1, sp, #12
 8001fc4:	4802      	ldr	r0, [pc, #8]	; (8001fd0 <HAL_UART_MspInit+0x68>)
 8001fc6:	f7fe f9a3 	bl	8000310 <HAL_GPIO_Init>
}
 8001fca:	e7d9      	b.n	8001f80 <HAL_UART_MspInit+0x18>
 8001fcc:	40013800 	.word	0x40013800
 8001fd0:	48000800 	.word	0x48000800

08001fd4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001fd4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800200c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001fd8:	480d      	ldr	r0, [pc, #52]	; (8002010 <LoopForever+0x6>)
  ldr r1, =_edata
 8001fda:	490e      	ldr	r1, [pc, #56]	; (8002014 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001fdc:	4a0e      	ldr	r2, [pc, #56]	; (8002018 <LoopForever+0xe>)
  movs r3, #0
 8001fde:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fe0:	e002      	b.n	8001fe8 <LoopCopyDataInit>

08001fe2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fe2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fe4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fe6:	3304      	adds	r3, #4

08001fe8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fe8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fec:	d3f9      	bcc.n	8001fe2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fee:	4a0b      	ldr	r2, [pc, #44]	; (800201c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ff0:	4c0b      	ldr	r4, [pc, #44]	; (8002020 <LoopForever+0x16>)
  movs r3, #0
 8001ff2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ff4:	e001      	b.n	8001ffa <LoopFillZerobss>

08001ff6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ff6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ff8:	3204      	adds	r2, #4

08001ffa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ffa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ffc:	d3fb      	bcc.n	8001ff6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001ffe:	f7ff ff89 	bl	8001f14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002002:	f000 f811 	bl	8002028 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002006:	f7ff fedd 	bl	8001dc4 <main>

0800200a <LoopForever>:

LoopForever:
    b LoopForever
 800200a:	e7fe      	b.n	800200a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800200c:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8002010:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002014:	20000034 	.word	0x20000034
  ldr r2, =_sidata
 8002018:	080020fc 	.word	0x080020fc
  ldr r2, =_sbss
 800201c:	20000034 	.word	0x20000034
  ldr r4, =_ebss
 8002020:	20000184 	.word	0x20000184

08002024 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002024:	e7fe      	b.n	8002024 <ADC1_2_IRQHandler>
	...

08002028 <__libc_init_array>:
 8002028:	b570      	push	{r4, r5, r6, lr}
 800202a:	4d0d      	ldr	r5, [pc, #52]	; (8002060 <__libc_init_array+0x38>)
 800202c:	4c0d      	ldr	r4, [pc, #52]	; (8002064 <__libc_init_array+0x3c>)
 800202e:	1b64      	subs	r4, r4, r5
 8002030:	10a4      	asrs	r4, r4, #2
 8002032:	2600      	movs	r6, #0
 8002034:	42a6      	cmp	r6, r4
 8002036:	d109      	bne.n	800204c <__libc_init_array+0x24>
 8002038:	4d0b      	ldr	r5, [pc, #44]	; (8002068 <__libc_init_array+0x40>)
 800203a:	4c0c      	ldr	r4, [pc, #48]	; (800206c <__libc_init_array+0x44>)
 800203c:	f000 f820 	bl	8002080 <_init>
 8002040:	1b64      	subs	r4, r4, r5
 8002042:	10a4      	asrs	r4, r4, #2
 8002044:	2600      	movs	r6, #0
 8002046:	42a6      	cmp	r6, r4
 8002048:	d105      	bne.n	8002056 <__libc_init_array+0x2e>
 800204a:	bd70      	pop	{r4, r5, r6, pc}
 800204c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002050:	4798      	blx	r3
 8002052:	3601      	adds	r6, #1
 8002054:	e7ee      	b.n	8002034 <__libc_init_array+0xc>
 8002056:	f855 3b04 	ldr.w	r3, [r5], #4
 800205a:	4798      	blx	r3
 800205c:	3601      	adds	r6, #1
 800205e:	e7f2      	b.n	8002046 <__libc_init_array+0x1e>
 8002060:	080020f4 	.word	0x080020f4
 8002064:	080020f4 	.word	0x080020f4
 8002068:	080020f4 	.word	0x080020f4
 800206c:	080020f8 	.word	0x080020f8

08002070 <memset>:
 8002070:	4402      	add	r2, r0
 8002072:	4603      	mov	r3, r0
 8002074:	4293      	cmp	r3, r2
 8002076:	d100      	bne.n	800207a <memset+0xa>
 8002078:	4770      	bx	lr
 800207a:	f803 1b01 	strb.w	r1, [r3], #1
 800207e:	e7f9      	b.n	8002074 <memset+0x4>

08002080 <_init>:
 8002080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002082:	bf00      	nop
 8002084:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002086:	bc08      	pop	{r3}
 8002088:	469e      	mov	lr, r3
 800208a:	4770      	bx	lr

0800208c <_fini>:
 800208c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800208e:	bf00      	nop
 8002090:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002092:	bc08      	pop	{r3}
 8002094:	469e      	mov	lr, r3
 8002096:	4770      	bx	lr
