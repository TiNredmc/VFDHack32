
VFDHack32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001480  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  08001608  08001608  00011608  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800164c  0800164c  0001164c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001650  08001650  00011650  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000038  20000000  08001654  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020038  2**0
                  CONTENTS
  7 .bss          00000114  20000038  20000038  00020038  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2000014c  2000014c  00020038  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
 10 .debug_info   00008067  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000016d8  00000000  00000000  000280cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    00003e76  00000000  00000000  000297a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000005a0  00000000  00000000  0002d620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 000005b8  00000000  00000000  0002dbc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0001c049  00000000  00000000  0002e178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000098be  00000000  00000000  0004a1c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000a6ab0  00000000  00000000  00053a7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  000fa52f  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00000dac  00000000  00000000  000fa584  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000038 	.word	0x20000038
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080015f0 	.word	0x080015f0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000003c 	.word	0x2000003c
 80001c4:	080015f0 	.word	0x080015f0

080001c8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80001cc:	4b0e      	ldr	r3, [pc, #56]	; (8000208 <HAL_InitTick+0x40>)
 80001ce:	7818      	ldrb	r0, [r3, #0]
 80001d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001d4:	fbb3 f3f0 	udiv	r3, r3, r0
 80001d8:	4a0c      	ldr	r2, [pc, #48]	; (800020c <HAL_InitTick+0x44>)
 80001da:	6810      	ldr	r0, [r2, #0]
 80001dc:	fbb0 f0f3 	udiv	r0, r0, r3
 80001e0:	f000 f880 	bl	80002e4 <HAL_SYSTICK_Config>
 80001e4:	b968      	cbnz	r0, 8000202 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80001e6:	2c0f      	cmp	r4, #15
 80001e8:	d901      	bls.n	80001ee <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 80001ea:	2001      	movs	r0, #1
 80001ec:	e00a      	b.n	8000204 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001ee:	2200      	movs	r2, #0
 80001f0:	4621      	mov	r1, r4
 80001f2:	f04f 30ff 	mov.w	r0, #4294967295
 80001f6:	f000 f841 	bl	800027c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80001fa:	4b03      	ldr	r3, [pc, #12]	; (8000208 <HAL_InitTick+0x40>)
 80001fc:	605c      	str	r4, [r3, #4]
  }
   /* Return function status */
  return HAL_OK;
 80001fe:	2000      	movs	r0, #0
 8000200:	e000      	b.n	8000204 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8000202:	2001      	movs	r0, #1
}
 8000204:	bd10      	pop	{r4, pc}
 8000206:	bf00      	nop
 8000208:	20000000 	.word	0x20000000
 800020c:	20000034 	.word	0x20000034

08000210 <HAL_Init>:
{
 8000210:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000212:	4a07      	ldr	r2, [pc, #28]	; (8000230 <HAL_Init+0x20>)
 8000214:	6813      	ldr	r3, [r2, #0]
 8000216:	f043 0310 	orr.w	r3, r3, #16
 800021a:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800021c:	2003      	movs	r0, #3
 800021e:	f000 f81b 	bl	8000258 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000222:	2000      	movs	r0, #0
 8000224:	f7ff ffd0 	bl	80001c8 <HAL_InitTick>
  HAL_MspInit();
 8000228:	f001 f95c 	bl	80014e4 <HAL_MspInit>
}
 800022c:	2000      	movs	r0, #0
 800022e:	bd08      	pop	{r3, pc}
 8000230:	40022000 	.word	0x40022000

08000234 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000234:	4a03      	ldr	r2, [pc, #12]	; (8000244 <HAL_IncTick+0x10>)
 8000236:	6811      	ldr	r1, [r2, #0]
 8000238:	4b03      	ldr	r3, [pc, #12]	; (8000248 <HAL_IncTick+0x14>)
 800023a:	781b      	ldrb	r3, [r3, #0]
 800023c:	440b      	add	r3, r1
 800023e:	6013      	str	r3, [r2, #0]
}
 8000240:	4770      	bx	lr
 8000242:	bf00      	nop
 8000244:	200000e4 	.word	0x200000e4
 8000248:	20000000 	.word	0x20000000

0800024c <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 800024c:	4b01      	ldr	r3, [pc, #4]	; (8000254 <HAL_GetTick+0x8>)
 800024e:	6818      	ldr	r0, [r3, #0]
}
 8000250:	4770      	bx	lr
 8000252:	bf00      	nop
 8000254:	200000e4 	.word	0x200000e4

08000258 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000258:	4a07      	ldr	r2, [pc, #28]	; (8000278 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800025a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800025c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000260:	041b      	lsls	r3, r3, #16
 8000262:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000264:	0200      	lsls	r0, r0, #8
 8000266:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800026a:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 800026c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000270:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000274:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000276:	4770      	bx	lr
 8000278:	e000ed00 	.word	0xe000ed00

0800027c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800027c:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800027e:	4b17      	ldr	r3, [pc, #92]	; (80002dc <HAL_NVIC_SetPriority+0x60>)
 8000280:	68db      	ldr	r3, [r3, #12]
 8000282:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000286:	f1c3 0407 	rsb	r4, r3, #7
 800028a:	2c04      	cmp	r4, #4
 800028c:	bf28      	it	cs
 800028e:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000290:	1d1d      	adds	r5, r3, #4
 8000292:	2d06      	cmp	r5, #6
 8000294:	d918      	bls.n	80002c8 <HAL_NVIC_SetPriority+0x4c>
 8000296:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000298:	f04f 35ff 	mov.w	r5, #4294967295
 800029c:	fa05 f404 	lsl.w	r4, r5, r4
 80002a0:	ea21 0104 	bic.w	r1, r1, r4
 80002a4:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80002a6:	fa05 f303 	lsl.w	r3, r5, r3
 80002aa:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002ae:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 80002b0:	2800      	cmp	r0, #0
 80002b2:	db0b      	blt.n	80002cc <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002b4:	0109      	lsls	r1, r1, #4
 80002b6:	b2c9      	uxtb	r1, r1
 80002b8:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80002bc:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80002c0:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80002c4:	bc30      	pop	{r4, r5}
 80002c6:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002c8:	2300      	movs	r3, #0
 80002ca:	e7e5      	b.n	8000298 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002cc:	f000 000f 	and.w	r0, r0, #15
 80002d0:	0109      	lsls	r1, r1, #4
 80002d2:	b2c9      	uxtb	r1, r1
 80002d4:	4b02      	ldr	r3, [pc, #8]	; (80002e0 <HAL_NVIC_SetPriority+0x64>)
 80002d6:	5419      	strb	r1, [r3, r0]
 80002d8:	e7f4      	b.n	80002c4 <HAL_NVIC_SetPriority+0x48>
 80002da:	bf00      	nop
 80002dc:	e000ed00 	.word	0xe000ed00
 80002e0:	e000ed14 	.word	0xe000ed14

080002e4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80002e4:	3801      	subs	r0, #1
 80002e6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80002ea:	d20a      	bcs.n	8000302 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80002ec:	4b06      	ldr	r3, [pc, #24]	; (8000308 <HAL_SYSTICK_Config+0x24>)
 80002ee:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002f0:	4a06      	ldr	r2, [pc, #24]	; (800030c <HAL_SYSTICK_Config+0x28>)
 80002f2:	21f0      	movs	r1, #240	; 0xf0
 80002f4:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002f8:	2000      	movs	r0, #0
 80002fa:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002fc:	2207      	movs	r2, #7
 80002fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000300:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000302:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000304:	4770      	bx	lr
 8000306:	bf00      	nop
 8000308:	e000e010 	.word	0xe000e010
 800030c:	e000ed00 	.word	0xe000ed00

08000310 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	b082      	sub	sp, #8
  uint32_t position = 0x00u;
 8000314:	2300      	movs	r3, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000316:	e05b      	b.n	80003d0 <HAL_GPIO_Init+0xc0>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000318:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800031a:	005f      	lsls	r7, r3, #1
 800031c:	2503      	movs	r5, #3
 800031e:	40bd      	lsls	r5, r7
 8000320:	ea26 0605 	bic.w	r6, r6, r5
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000324:	68cd      	ldr	r5, [r1, #12]
 8000326:	40bd      	lsls	r5, r7
 8000328:	4335      	orrs	r5, r6
        GPIOx->OSPEEDR = temp;
 800032a:	6085      	str	r5, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800032c:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800032e:	ea26 0604 	bic.w	r6, r6, r4
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000332:	684d      	ldr	r5, [r1, #4]
 8000334:	f3c5 1400 	ubfx	r4, r5, #4, #1
 8000338:	409c      	lsls	r4, r3
 800033a:	4334      	orrs	r4, r6
        GPIOx->OTYPER = temp;
 800033c:	6044      	str	r4, [r0, #4]
 800033e:	e055      	b.n	80003ec <HAL_GPIO_Init+0xdc>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000340:	08dd      	lsrs	r5, r3, #3
 8000342:	3508      	adds	r5, #8
 8000344:	f850 7025 	ldr.w	r7, [r0, r5, lsl #2]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000348:	f003 0407 	and.w	r4, r3, #7
 800034c:	00a6      	lsls	r6, r4, #2
 800034e:	240f      	movs	r4, #15
 8000350:	40b4      	lsls	r4, r6
 8000352:	ea27 0704 	bic.w	r7, r7, r4
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000356:	690c      	ldr	r4, [r1, #16]
 8000358:	40b4      	lsls	r4, r6
 800035a:	433c      	orrs	r4, r7
        GPIOx->AFR[position >> 3u] = temp;
 800035c:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
 8000360:	e058      	b.n	8000414 <HAL_GPIO_Init+0x104>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000362:	2404      	movs	r4, #4
 8000364:	e000      	b.n	8000368 <HAL_GPIO_Init+0x58>
 8000366:	2400      	movs	r4, #0
 8000368:	40b4      	lsls	r4, r6
 800036a:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 800036c:	3502      	adds	r5, #2
 800036e:	4e4c      	ldr	r6, [pc, #304]	; (80004a0 <HAL_GPIO_Init+0x190>)
 8000370:	f846 4025 	str.w	r4, [r6, r5, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000374:	4c4b      	ldr	r4, [pc, #300]	; (80004a4 <HAL_GPIO_Init+0x194>)
 8000376:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 8000378:	43d4      	mvns	r4, r2
 800037a:	ea25 0602 	bic.w	r6, r5, r2
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800037e:	684f      	ldr	r7, [r1, #4]
 8000380:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8000384:	d001      	beq.n	800038a <HAL_GPIO_Init+0x7a>
        {
          temp |= iocurrent;
 8000386:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->IMR = temp;
 800038a:	4d46      	ldr	r5, [pc, #280]	; (80004a4 <HAL_GPIO_Init+0x194>)
 800038c:	602e      	str	r6, [r5, #0]

        temp = EXTI->EMR;
 800038e:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 8000390:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000394:	684f      	ldr	r7, [r1, #4]
 8000396:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 800039a:	d001      	beq.n	80003a0 <HAL_GPIO_Init+0x90>
        {
          temp |= iocurrent;
 800039c:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->EMR = temp;
 80003a0:	4d40      	ldr	r5, [pc, #256]	; (80004a4 <HAL_GPIO_Init+0x194>)
 80003a2:	606e      	str	r6, [r5, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80003a4:	68ad      	ldr	r5, [r5, #8]
        temp &= ~(iocurrent);
 80003a6:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80003aa:	684f      	ldr	r7, [r1, #4]
 80003ac:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 80003b0:	d001      	beq.n	80003b6 <HAL_GPIO_Init+0xa6>
        {
          temp |= iocurrent;
 80003b2:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR = temp;
 80003b6:	4d3b      	ldr	r5, [pc, #236]	; (80004a4 <HAL_GPIO_Init+0x194>)
 80003b8:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR;
 80003ba:	68ed      	ldr	r5, [r5, #12]
        temp &= ~(iocurrent);
 80003bc:	402c      	ands	r4, r5
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80003be:	684e      	ldr	r6, [r1, #4]
 80003c0:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 80003c4:	d001      	beq.n	80003ca <HAL_GPIO_Init+0xba>
        {
          temp |= iocurrent;
 80003c6:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->FTSR = temp;
 80003ca:	4a36      	ldr	r2, [pc, #216]	; (80004a4 <HAL_GPIO_Init+0x194>)
 80003cc:	60d4      	str	r4, [r2, #12]
      }
    }

    position++;
 80003ce:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80003d0:	680a      	ldr	r2, [r1, #0]
 80003d2:	fa32 f403 	lsrs.w	r4, r2, r3
 80003d6:	d05f      	beq.n	8000498 <HAL_GPIO_Init+0x188>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80003d8:	2401      	movs	r4, #1
 80003da:	409c      	lsls	r4, r3
    if (iocurrent != 0x00u)
 80003dc:	4022      	ands	r2, r4
 80003de:	d0f6      	beq.n	80003ce <HAL_GPIO_Init+0xbe>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80003e0:	684d      	ldr	r5, [r1, #4]
 80003e2:	f005 0503 	and.w	r5, r5, #3
 80003e6:	3d01      	subs	r5, #1
 80003e8:	2d01      	cmp	r5, #1
 80003ea:	d995      	bls.n	8000318 <HAL_GPIO_Init+0x8>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80003ec:	684c      	ldr	r4, [r1, #4]
 80003ee:	f004 0403 	and.w	r4, r4, #3
 80003f2:	2c03      	cmp	r4, #3
 80003f4:	d009      	beq.n	800040a <HAL_GPIO_Init+0xfa>
        temp = GPIOx->PUPDR;
 80003f6:	68c5      	ldr	r5, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80003f8:	005e      	lsls	r6, r3, #1
 80003fa:	2403      	movs	r4, #3
 80003fc:	40b4      	lsls	r4, r6
 80003fe:	ea25 0504 	bic.w	r5, r5, r4
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000402:	688c      	ldr	r4, [r1, #8]
 8000404:	40b4      	lsls	r4, r6
 8000406:	432c      	orrs	r4, r5
        GPIOx->PUPDR = temp;
 8000408:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800040a:	684c      	ldr	r4, [r1, #4]
 800040c:	f004 0403 	and.w	r4, r4, #3
 8000410:	2c02      	cmp	r4, #2
 8000412:	d095      	beq.n	8000340 <HAL_GPIO_Init+0x30>
      temp = GPIOx->MODER;
 8000414:	6805      	ldr	r5, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000416:	005e      	lsls	r6, r3, #1
 8000418:	2403      	movs	r4, #3
 800041a:	40b4      	lsls	r4, r6
 800041c:	ea25 0504 	bic.w	r5, r5, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000420:	684c      	ldr	r4, [r1, #4]
 8000422:	f004 0403 	and.w	r4, r4, #3
 8000426:	40b4      	lsls	r4, r6
 8000428:	432c      	orrs	r4, r5
      GPIOx->MODER = temp;
 800042a:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800042c:	684c      	ldr	r4, [r1, #4]
 800042e:	f414 3f40 	tst.w	r4, #196608	; 0x30000
 8000432:	d0cc      	beq.n	80003ce <HAL_GPIO_Init+0xbe>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000434:	4c1c      	ldr	r4, [pc, #112]	; (80004a8 <HAL_GPIO_Init+0x198>)
 8000436:	69a5      	ldr	r5, [r4, #24]
 8000438:	f045 0501 	orr.w	r5, r5, #1
 800043c:	61a5      	str	r5, [r4, #24]
 800043e:	69a4      	ldr	r4, [r4, #24]
 8000440:	f004 0401 	and.w	r4, r4, #1
 8000444:	9401      	str	r4, [sp, #4]
 8000446:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 8000448:	089d      	lsrs	r5, r3, #2
 800044a:	1cae      	adds	r6, r5, #2
 800044c:	4c14      	ldr	r4, [pc, #80]	; (80004a0 <HAL_GPIO_Init+0x190>)
 800044e:	f854 7026 	ldr.w	r7, [r4, r6, lsl #2]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000452:	f003 0403 	and.w	r4, r3, #3
 8000456:	00a6      	lsls	r6, r4, #2
 8000458:	240f      	movs	r4, #15
 800045a:	40b4      	lsls	r4, r6
 800045c:	ea27 0704 	bic.w	r7, r7, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000460:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8000464:	f43f af7f 	beq.w	8000366 <HAL_GPIO_Init+0x56>
 8000468:	4c10      	ldr	r4, [pc, #64]	; (80004ac <HAL_GPIO_Init+0x19c>)
 800046a:	42a0      	cmp	r0, r4
 800046c:	d00e      	beq.n	800048c <HAL_GPIO_Init+0x17c>
 800046e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000472:	42a0      	cmp	r0, r4
 8000474:	d00c      	beq.n	8000490 <HAL_GPIO_Init+0x180>
 8000476:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800047a:	42a0      	cmp	r0, r4
 800047c:	d00a      	beq.n	8000494 <HAL_GPIO_Init+0x184>
 800047e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000482:	42a0      	cmp	r0, r4
 8000484:	f43f af6d 	beq.w	8000362 <HAL_GPIO_Init+0x52>
 8000488:	2405      	movs	r4, #5
 800048a:	e76d      	b.n	8000368 <HAL_GPIO_Init+0x58>
 800048c:	2401      	movs	r4, #1
 800048e:	e76b      	b.n	8000368 <HAL_GPIO_Init+0x58>
 8000490:	2402      	movs	r4, #2
 8000492:	e769      	b.n	8000368 <HAL_GPIO_Init+0x58>
 8000494:	2403      	movs	r4, #3
 8000496:	e767      	b.n	8000368 <HAL_GPIO_Init+0x58>
  }
}
 8000498:	b002      	add	sp, #8
 800049a:	bcf0      	pop	{r4, r5, r6, r7}
 800049c:	4770      	bx	lr
 800049e:	bf00      	nop
 80004a0:	40010000 	.word	0x40010000
 80004a4:	40010400 	.word	0x40010400
 80004a8:	40021000 	.word	0x40021000
 80004ac:	48000400 	.word	0x48000400

080004b0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80004b0:	b10a      	cbz	r2, 80004b6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80004b2:	6181      	str	r1, [r0, #24]
 80004b4:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80004b6:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 80004b8:	4770      	bx	lr
	...

080004bc <HAL_RCC_OscConfig>:
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80004bc:	2800      	cmp	r0, #0
 80004be:	f000 8301 	beq.w	8000ac4 <HAL_RCC_OscConfig+0x608>
{
 80004c2:	b570      	push	{r4, r5, r6, lr}
 80004c4:	b082      	sub	sp, #8
 80004c6:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80004c8:	6803      	ldr	r3, [r0, #0]
 80004ca:	f013 0f01 	tst.w	r3, #1
 80004ce:	d03b      	beq.n	8000548 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80004d0:	4bb5      	ldr	r3, [pc, #724]	; (80007a8 <HAL_RCC_OscConfig+0x2ec>)
 80004d2:	685b      	ldr	r3, [r3, #4]
 80004d4:	f003 030c 	and.w	r3, r3, #12
 80004d8:	2b04      	cmp	r3, #4
 80004da:	d01e      	beq.n	800051a <HAL_RCC_OscConfig+0x5e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80004dc:	4bb2      	ldr	r3, [pc, #712]	; (80007a8 <HAL_RCC_OscConfig+0x2ec>)
 80004de:	685b      	ldr	r3, [r3, #4]
 80004e0:	f003 030c 	and.w	r3, r3, #12
 80004e4:	2b08      	cmp	r3, #8
 80004e6:	d013      	beq.n	8000510 <HAL_RCC_OscConfig+0x54>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80004e8:	6863      	ldr	r3, [r4, #4]
 80004ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80004ee:	d068      	beq.n	80005c2 <HAL_RCC_OscConfig+0x106>
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	f040 8092 	bne.w	800061a <HAL_RCC_OscConfig+0x15e>
 80004f6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80004fa:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80004fe:	681a      	ldr	r2, [r3, #0]
 8000500:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000504:	601a      	str	r2, [r3, #0]
 8000506:	681a      	ldr	r2, [r3, #0]
 8000508:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800050c:	601a      	str	r2, [r3, #0]
 800050e:	e05d      	b.n	80005cc <HAL_RCC_OscConfig+0x110>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000510:	4ba5      	ldr	r3, [pc, #660]	; (80007a8 <HAL_RCC_OscConfig+0x2ec>)
 8000512:	685b      	ldr	r3, [r3, #4]
 8000514:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8000518:	d0e6      	beq.n	80004e8 <HAL_RCC_OscConfig+0x2c>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800051a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800051e:	fa93 f3a3 	rbit	r3, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000522:	4ba1      	ldr	r3, [pc, #644]	; (80007a8 <HAL_RCC_OscConfig+0x2ec>)
 8000524:	6819      	ldr	r1, [r3, #0]
 8000526:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800052a:	fa93 f3a3 	rbit	r3, r3
 800052e:	fab3 f383 	clz	r3, r3
 8000532:	f003 031f 	and.w	r3, r3, #31
 8000536:	2201      	movs	r2, #1
 8000538:	fa02 f303 	lsl.w	r3, r2, r3
 800053c:	420b      	tst	r3, r1
 800053e:	d003      	beq.n	8000548 <HAL_RCC_OscConfig+0x8c>
 8000540:	6863      	ldr	r3, [r4, #4]
 8000542:	2b00      	cmp	r3, #0
 8000544:	f000 82c0 	beq.w	8000ac8 <HAL_RCC_OscConfig+0x60c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000548:	6823      	ldr	r3, [r4, #0]
 800054a:	f013 0f02 	tst.w	r3, #2
 800054e:	f000 80c5 	beq.w	80006dc <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000552:	4b95      	ldr	r3, [pc, #596]	; (80007a8 <HAL_RCC_OscConfig+0x2ec>)
 8000554:	685b      	ldr	r3, [r3, #4]
 8000556:	f013 0f0c 	tst.w	r3, #12
 800055a:	f000 809c 	beq.w	8000696 <HAL_RCC_OscConfig+0x1da>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800055e:	4b92      	ldr	r3, [pc, #584]	; (80007a8 <HAL_RCC_OscConfig+0x2ec>)
 8000560:	685b      	ldr	r3, [r3, #4]
 8000562:	f003 030c 	and.w	r3, r3, #12
 8000566:	2b08      	cmp	r3, #8
 8000568:	f000 808f 	beq.w	800068a <HAL_RCC_OscConfig+0x1ce>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800056c:	6923      	ldr	r3, [r4, #16]
 800056e:	2b00      	cmp	r3, #0
 8000570:	f000 80f2 	beq.w	8000758 <HAL_RCC_OscConfig+0x29c>
 8000574:	2201      	movs	r2, #1
 8000576:	fa92 f3a2 	rbit	r3, r2
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800057a:	fab3 f383 	clz	r3, r3
 800057e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000582:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000586:	009b      	lsls	r3, r3, #2
 8000588:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800058a:	f7ff fe5f 	bl	800024c <HAL_GetTick>
 800058e:	4605      	mov	r5, r0
 8000590:	2302      	movs	r3, #2
 8000592:	fa93 f3a3 	rbit	r3, r3
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000596:	4b84      	ldr	r3, [pc, #528]	; (80007a8 <HAL_RCC_OscConfig+0x2ec>)
 8000598:	6819      	ldr	r1, [r3, #0]
 800059a:	2302      	movs	r3, #2
 800059c:	fa93 f3a3 	rbit	r3, r3
 80005a0:	fab3 f383 	clz	r3, r3
 80005a4:	f003 031f 	and.w	r3, r3, #31
 80005a8:	2201      	movs	r2, #1
 80005aa:	fa02 f303 	lsl.w	r3, r2, r3
 80005ae:	420b      	tst	r3, r1
 80005b0:	f040 80c3 	bne.w	800073a <HAL_RCC_OscConfig+0x27e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80005b4:	f7ff fe4a 	bl	800024c <HAL_GetTick>
 80005b8:	1b40      	subs	r0, r0, r5
 80005ba:	2802      	cmp	r0, #2
 80005bc:	d9e8      	bls.n	8000590 <HAL_RCC_OscConfig+0xd4>
          {
            return HAL_TIMEOUT;
 80005be:	2003      	movs	r0, #3
 80005c0:	e28b      	b.n	8000ada <HAL_RCC_OscConfig+0x61e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80005c2:	4a79      	ldr	r2, [pc, #484]	; (80007a8 <HAL_RCC_OscConfig+0x2ec>)
 80005c4:	6813      	ldr	r3, [r2, #0]
 80005c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80005ca:	6013      	str	r3, [r2, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80005cc:	4a76      	ldr	r2, [pc, #472]	; (80007a8 <HAL_RCC_OscConfig+0x2ec>)
 80005ce:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80005d0:	f023 030f 	bic.w	r3, r3, #15
 80005d4:	68a1      	ldr	r1, [r4, #8]
 80005d6:	430b      	orrs	r3, r1
 80005d8:	62d3      	str	r3, [r2, #44]	; 0x2c
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80005da:	6863      	ldr	r3, [r4, #4]
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d036      	beq.n	800064e <HAL_RCC_OscConfig+0x192>
        tickstart = HAL_GetTick();
 80005e0:	f7ff fe34 	bl	800024c <HAL_GetTick>
 80005e4:	4605      	mov	r5, r0
 80005e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80005ea:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80005ee:	4b6e      	ldr	r3, [pc, #440]	; (80007a8 <HAL_RCC_OscConfig+0x2ec>)
 80005f0:	6819      	ldr	r1, [r3, #0]
 80005f2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80005f6:	fa93 f3a3 	rbit	r3, r3
 80005fa:	fab3 f383 	clz	r3, r3
 80005fe:	f003 031f 	and.w	r3, r3, #31
 8000602:	2201      	movs	r2, #1
 8000604:	fa02 f303 	lsl.w	r3, r2, r3
 8000608:	420b      	tst	r3, r1
 800060a:	d19d      	bne.n	8000548 <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800060c:	f7ff fe1e 	bl	800024c <HAL_GetTick>
 8000610:	1b40      	subs	r0, r0, r5
 8000612:	2864      	cmp	r0, #100	; 0x64
 8000614:	d9e7      	bls.n	80005e6 <HAL_RCC_OscConfig+0x12a>
            return HAL_TIMEOUT;
 8000616:	2003      	movs	r0, #3
 8000618:	e25f      	b.n	8000ada <HAL_RCC_OscConfig+0x61e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800061a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800061e:	d009      	beq.n	8000634 <HAL_RCC_OscConfig+0x178>
 8000620:	4b61      	ldr	r3, [pc, #388]	; (80007a8 <HAL_RCC_OscConfig+0x2ec>)
 8000622:	681a      	ldr	r2, [r3, #0]
 8000624:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000628:	601a      	str	r2, [r3, #0]
 800062a:	681a      	ldr	r2, [r3, #0]
 800062c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000630:	601a      	str	r2, [r3, #0]
 8000632:	e7cb      	b.n	80005cc <HAL_RCC_OscConfig+0x110>
 8000634:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000638:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 800063c:	681a      	ldr	r2, [r3, #0]
 800063e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000642:	601a      	str	r2, [r3, #0]
 8000644:	681a      	ldr	r2, [r3, #0]
 8000646:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800064a:	601a      	str	r2, [r3, #0]
 800064c:	e7be      	b.n	80005cc <HAL_RCC_OscConfig+0x110>
        tickstart = HAL_GetTick();
 800064e:	f7ff fdfd 	bl	800024c <HAL_GetTick>
 8000652:	4605      	mov	r5, r0
 8000654:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000658:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800065c:	4b52      	ldr	r3, [pc, #328]	; (80007a8 <HAL_RCC_OscConfig+0x2ec>)
 800065e:	6819      	ldr	r1, [r3, #0]
 8000660:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000664:	fa93 f3a3 	rbit	r3, r3
 8000668:	fab3 f383 	clz	r3, r3
 800066c:	f003 031f 	and.w	r3, r3, #31
 8000670:	2201      	movs	r2, #1
 8000672:	fa02 f303 	lsl.w	r3, r2, r3
 8000676:	420b      	tst	r3, r1
 8000678:	f43f af66 	beq.w	8000548 <HAL_RCC_OscConfig+0x8c>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800067c:	f7ff fde6 	bl	800024c <HAL_GetTick>
 8000680:	1b40      	subs	r0, r0, r5
 8000682:	2864      	cmp	r0, #100	; 0x64
 8000684:	d9e6      	bls.n	8000654 <HAL_RCC_OscConfig+0x198>
            return HAL_TIMEOUT;
 8000686:	2003      	movs	r0, #3
 8000688:	e227      	b.n	8000ada <HAL_RCC_OscConfig+0x61e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800068a:	4b47      	ldr	r3, [pc, #284]	; (80007a8 <HAL_RCC_OscConfig+0x2ec>)
 800068c:	685b      	ldr	r3, [r3, #4]
 800068e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8000692:	f47f af6b 	bne.w	800056c <HAL_RCC_OscConfig+0xb0>
 8000696:	2302      	movs	r3, #2
 8000698:	fa93 f3a3 	rbit	r3, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800069c:	4b42      	ldr	r3, [pc, #264]	; (80007a8 <HAL_RCC_OscConfig+0x2ec>)
 800069e:	6819      	ldr	r1, [r3, #0]
 80006a0:	2302      	movs	r3, #2
 80006a2:	fa93 f3a3 	rbit	r3, r3
 80006a6:	fab3 f383 	clz	r3, r3
 80006aa:	f003 031f 	and.w	r3, r3, #31
 80006ae:	2201      	movs	r2, #1
 80006b0:	fa02 f303 	lsl.w	r3, r2, r3
 80006b4:	420b      	tst	r3, r1
 80006b6:	d003      	beq.n	80006c0 <HAL_RCC_OscConfig+0x204>
 80006b8:	6923      	ldr	r3, [r4, #16]
 80006ba:	4293      	cmp	r3, r2
 80006bc:	f040 8206 	bne.w	8000acc <HAL_RCC_OscConfig+0x610>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80006c0:	4839      	ldr	r0, [pc, #228]	; (80007a8 <HAL_RCC_OscConfig+0x2ec>)
 80006c2:	6803      	ldr	r3, [r0, #0]
 80006c4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80006c8:	6961      	ldr	r1, [r4, #20]
 80006ca:	22f8      	movs	r2, #248	; 0xf8
 80006cc:	fa92 f2a2 	rbit	r2, r2
 80006d0:	fab2 f282 	clz	r2, r2
 80006d4:	fa01 f202 	lsl.w	r2, r1, r2
 80006d8:	4313      	orrs	r3, r2
 80006da:	6003      	str	r3, [r0, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80006dc:	6823      	ldr	r3, [r4, #0]
 80006de:	f013 0f08 	tst.w	r3, #8
 80006e2:	f000 808d 	beq.w	8000800 <HAL_RCC_OscConfig+0x344>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80006e6:	69a3      	ldr	r3, [r4, #24]
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d061      	beq.n	80007b0 <HAL_RCC_OscConfig+0x2f4>
 80006ec:	2101      	movs	r1, #1
 80006ee:	fa91 f2a1 	rbit	r2, r1
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80006f2:	fab2 f282 	clz	r2, r2
 80006f6:	4b2d      	ldr	r3, [pc, #180]	; (80007ac <HAL_RCC_OscConfig+0x2f0>)
 80006f8:	4413      	add	r3, r2
 80006fa:	009b      	lsls	r3, r3, #2
 80006fc:	6019      	str	r1, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80006fe:	f7ff fda5 	bl	800024c <HAL_GetTick>
 8000702:	4605      	mov	r5, r0
 8000704:	2302      	movs	r3, #2
 8000706:	fa93 f2a3 	rbit	r2, r3
 800070a:	fa93 f2a3 	rbit	r2, r3
 800070e:	fa93 f2a3 	rbit	r2, r3
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000712:	4a25      	ldr	r2, [pc, #148]	; (80007a8 <HAL_RCC_OscConfig+0x2ec>)
 8000714:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8000716:	fa93 f3a3 	rbit	r3, r3
 800071a:	fab3 f383 	clz	r3, r3
 800071e:	f003 031f 	and.w	r3, r3, #31
 8000722:	2201      	movs	r2, #1
 8000724:	fa02 f303 	lsl.w	r3, r2, r3
 8000728:	420b      	tst	r3, r1
 800072a:	d169      	bne.n	8000800 <HAL_RCC_OscConfig+0x344>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800072c:	f7ff fd8e 	bl	800024c <HAL_GetTick>
 8000730:	1b40      	subs	r0, r0, r5
 8000732:	2802      	cmp	r0, #2
 8000734:	d9e6      	bls.n	8000704 <HAL_RCC_OscConfig+0x248>
        {
          return HAL_TIMEOUT;
 8000736:	2003      	movs	r0, #3
 8000738:	e1cf      	b.n	8000ada <HAL_RCC_OscConfig+0x61e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800073a:	481b      	ldr	r0, [pc, #108]	; (80007a8 <HAL_RCC_OscConfig+0x2ec>)
 800073c:	6803      	ldr	r3, [r0, #0]
 800073e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000742:	6961      	ldr	r1, [r4, #20]
 8000744:	22f8      	movs	r2, #248	; 0xf8
 8000746:	fa92 f2a2 	rbit	r2, r2
 800074a:	fab2 f282 	clz	r2, r2
 800074e:	fa01 f202 	lsl.w	r2, r1, r2
 8000752:	4313      	orrs	r3, r2
 8000754:	6003      	str	r3, [r0, #0]
 8000756:	e7c1      	b.n	80006dc <HAL_RCC_OscConfig+0x220>
 8000758:	2301      	movs	r3, #1
 800075a:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_HSI_DISABLE();
 800075e:	fab3 f383 	clz	r3, r3
 8000762:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000766:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800076a:	009b      	lsls	r3, r3, #2
 800076c:	2200      	movs	r2, #0
 800076e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000770:	f7ff fd6c 	bl	800024c <HAL_GetTick>
 8000774:	4605      	mov	r5, r0
 8000776:	2302      	movs	r3, #2
 8000778:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800077c:	4b0a      	ldr	r3, [pc, #40]	; (80007a8 <HAL_RCC_OscConfig+0x2ec>)
 800077e:	6819      	ldr	r1, [r3, #0]
 8000780:	2302      	movs	r3, #2
 8000782:	fa93 f3a3 	rbit	r3, r3
 8000786:	fab3 f383 	clz	r3, r3
 800078a:	f003 031f 	and.w	r3, r3, #31
 800078e:	2201      	movs	r2, #1
 8000790:	fa02 f303 	lsl.w	r3, r2, r3
 8000794:	420b      	tst	r3, r1
 8000796:	d0a1      	beq.n	80006dc <HAL_RCC_OscConfig+0x220>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000798:	f7ff fd58 	bl	800024c <HAL_GetTick>
 800079c:	1b40      	subs	r0, r0, r5
 800079e:	2802      	cmp	r0, #2
 80007a0:	d9e9      	bls.n	8000776 <HAL_RCC_OscConfig+0x2ba>
            return HAL_TIMEOUT;
 80007a2:	2003      	movs	r0, #3
 80007a4:	e199      	b.n	8000ada <HAL_RCC_OscConfig+0x61e>
 80007a6:	bf00      	nop
 80007a8:	40021000 	.word	0x40021000
 80007ac:	10908120 	.word	0x10908120
 80007b0:	2201      	movs	r2, #1
 80007b2:	fa92 f2a2 	rbit	r2, r2
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80007b6:	fab2 f282 	clz	r2, r2
 80007ba:	4bb7      	ldr	r3, [pc, #732]	; (8000a98 <HAL_RCC_OscConfig+0x5dc>)
 80007bc:	4413      	add	r3, r2
 80007be:	009b      	lsls	r3, r3, #2
 80007c0:	2200      	movs	r2, #0
 80007c2:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80007c4:	f7ff fd42 	bl	800024c <HAL_GetTick>
 80007c8:	4605      	mov	r5, r0
 80007ca:	2302      	movs	r3, #2
 80007cc:	fa93 f2a3 	rbit	r2, r3
 80007d0:	fa93 f2a3 	rbit	r2, r3
 80007d4:	fa93 f2a3 	rbit	r2, r3
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80007d8:	4ab0      	ldr	r2, [pc, #704]	; (8000a9c <HAL_RCC_OscConfig+0x5e0>)
 80007da:	6a51      	ldr	r1, [r2, #36]	; 0x24
 80007dc:	fa93 f3a3 	rbit	r3, r3
 80007e0:	fab3 f383 	clz	r3, r3
 80007e4:	f003 031f 	and.w	r3, r3, #31
 80007e8:	2201      	movs	r2, #1
 80007ea:	fa02 f303 	lsl.w	r3, r2, r3
 80007ee:	420b      	tst	r3, r1
 80007f0:	d006      	beq.n	8000800 <HAL_RCC_OscConfig+0x344>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80007f2:	f7ff fd2b 	bl	800024c <HAL_GetTick>
 80007f6:	1b40      	subs	r0, r0, r5
 80007f8:	2802      	cmp	r0, #2
 80007fa:	d9e6      	bls.n	80007ca <HAL_RCC_OscConfig+0x30e>
        {
          return HAL_TIMEOUT;
 80007fc:	2003      	movs	r0, #3
 80007fe:	e16c      	b.n	8000ada <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000800:	6823      	ldr	r3, [r4, #0]
 8000802:	f013 0f04 	tst.w	r3, #4
 8000806:	f000 80a9 	beq.w	800095c <HAL_RCC_OscConfig+0x4a0>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800080a:	4ba4      	ldr	r3, [pc, #656]	; (8000a9c <HAL_RCC_OscConfig+0x5e0>)
 800080c:	69db      	ldr	r3, [r3, #28]
 800080e:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8000812:	d10b      	bne.n	800082c <HAL_RCC_OscConfig+0x370>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000814:	4ba1      	ldr	r3, [pc, #644]	; (8000a9c <HAL_RCC_OscConfig+0x5e0>)
 8000816:	69da      	ldr	r2, [r3, #28]
 8000818:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800081c:	61da      	str	r2, [r3, #28]
 800081e:	69db      	ldr	r3, [r3, #28]
 8000820:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000824:	9301      	str	r3, [sp, #4]
 8000826:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000828:	2501      	movs	r5, #1
 800082a:	e000      	b.n	800082e <HAL_RCC_OscConfig+0x372>
    FlagStatus       pwrclkchanged = RESET;
 800082c:	2500      	movs	r5, #0
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800082e:	4b9c      	ldr	r3, [pc, #624]	; (8000aa0 <HAL_RCC_OscConfig+0x5e4>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000836:	d010      	beq.n	800085a <HAL_RCC_OscConfig+0x39e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000838:	68e3      	ldr	r3, [r4, #12]
 800083a:	2b01      	cmp	r3, #1
 800083c:	d021      	beq.n	8000882 <HAL_RCC_OscConfig+0x3c6>
 800083e:	bb63      	cbnz	r3, 800089a <HAL_RCC_OscConfig+0x3de>
 8000840:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000844:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8000848:	6a1a      	ldr	r2, [r3, #32]
 800084a:	f022 0201 	bic.w	r2, r2, #1
 800084e:	621a      	str	r2, [r3, #32]
 8000850:	6a1a      	ldr	r2, [r3, #32]
 8000852:	f022 0204 	bic.w	r2, r2, #4
 8000856:	621a      	str	r2, [r3, #32]
 8000858:	e018      	b.n	800088c <HAL_RCC_OscConfig+0x3d0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800085a:	4a91      	ldr	r2, [pc, #580]	; (8000aa0 <HAL_RCC_OscConfig+0x5e4>)
 800085c:	6813      	ldr	r3, [r2, #0]
 800085e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000862:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8000864:	f7ff fcf2 	bl	800024c <HAL_GetTick>
 8000868:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800086a:	4b8d      	ldr	r3, [pc, #564]	; (8000aa0 <HAL_RCC_OscConfig+0x5e4>)
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000872:	d1e1      	bne.n	8000838 <HAL_RCC_OscConfig+0x37c>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000874:	f7ff fcea 	bl	800024c <HAL_GetTick>
 8000878:	1b80      	subs	r0, r0, r6
 800087a:	2864      	cmp	r0, #100	; 0x64
 800087c:	d9f5      	bls.n	800086a <HAL_RCC_OscConfig+0x3ae>
          return HAL_TIMEOUT;
 800087e:	2003      	movs	r0, #3
 8000880:	e12b      	b.n	8000ada <HAL_RCC_OscConfig+0x61e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000882:	4a86      	ldr	r2, [pc, #536]	; (8000a9c <HAL_RCC_OscConfig+0x5e0>)
 8000884:	6a13      	ldr	r3, [r2, #32]
 8000886:	f043 0301 	orr.w	r3, r3, #1
 800088a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800088c:	68e3      	ldr	r3, [r4, #12]
 800088e:	2b00      	cmp	r3, #0
 8000890:	d03c      	beq.n	800090c <HAL_RCC_OscConfig+0x450>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000892:	f7ff fcdb 	bl	800024c <HAL_GetTick>
 8000896:	4606      	mov	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000898:	e02e      	b.n	80008f8 <HAL_RCC_OscConfig+0x43c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800089a:	2b05      	cmp	r3, #5
 800089c:	d009      	beq.n	80008b2 <HAL_RCC_OscConfig+0x3f6>
 800089e:	4b7f      	ldr	r3, [pc, #508]	; (8000a9c <HAL_RCC_OscConfig+0x5e0>)
 80008a0:	6a1a      	ldr	r2, [r3, #32]
 80008a2:	f022 0201 	bic.w	r2, r2, #1
 80008a6:	621a      	str	r2, [r3, #32]
 80008a8:	6a1a      	ldr	r2, [r3, #32]
 80008aa:	f022 0204 	bic.w	r2, r2, #4
 80008ae:	621a      	str	r2, [r3, #32]
 80008b0:	e7ec      	b.n	800088c <HAL_RCC_OscConfig+0x3d0>
 80008b2:	4b7a      	ldr	r3, [pc, #488]	; (8000a9c <HAL_RCC_OscConfig+0x5e0>)
 80008b4:	6a1a      	ldr	r2, [r3, #32]
 80008b6:	f042 0204 	orr.w	r2, r2, #4
 80008ba:	621a      	str	r2, [r3, #32]
 80008bc:	6a1a      	ldr	r2, [r3, #32]
 80008be:	f042 0201 	orr.w	r2, r2, #1
 80008c2:	621a      	str	r2, [r3, #32]
 80008c4:	e7e2      	b.n	800088c <HAL_RCC_OscConfig+0x3d0>
 80008c6:	2302      	movs	r3, #2
 80008c8:	fa93 f3a3 	rbit	r3, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80008cc:	4b73      	ldr	r3, [pc, #460]	; (8000a9c <HAL_RCC_OscConfig+0x5e0>)
 80008ce:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80008d0:	2302      	movs	r3, #2
 80008d2:	fa93 f3a3 	rbit	r3, r3
 80008d6:	fab3 f383 	clz	r3, r3
 80008da:	f003 031f 	and.w	r3, r3, #31
 80008de:	2201      	movs	r2, #1
 80008e0:	fa02 f303 	lsl.w	r3, r2, r3
 80008e4:	4219      	tst	r1, r3
 80008e6:	d138      	bne.n	800095a <HAL_RCC_OscConfig+0x49e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80008e8:	f7ff fcb0 	bl	800024c <HAL_GetTick>
 80008ec:	1b80      	subs	r0, r0, r6
 80008ee:	f241 3388 	movw	r3, #5000	; 0x1388
 80008f2:	4298      	cmp	r0, r3
 80008f4:	f200 80ec 	bhi.w	8000ad0 <HAL_RCC_OscConfig+0x614>
 80008f8:	2302      	movs	r3, #2
 80008fa:	fa93 f2a3 	rbit	r2, r3
 80008fe:	fa93 f3a3 	rbit	r3, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000902:	2b00      	cmp	r3, #0
 8000904:	d0df      	beq.n	80008c6 <HAL_RCC_OscConfig+0x40a>
 8000906:	4b65      	ldr	r3, [pc, #404]	; (8000a9c <HAL_RCC_OscConfig+0x5e0>)
 8000908:	6a19      	ldr	r1, [r3, #32]
 800090a:	e7e1      	b.n	80008d0 <HAL_RCC_OscConfig+0x414>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800090c:	f7ff fc9e 	bl	800024c <HAL_GetTick>
 8000910:	4606      	mov	r6, r0
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000912:	e018      	b.n	8000946 <HAL_RCC_OscConfig+0x48a>
 8000914:	2302      	movs	r3, #2
 8000916:	fa93 f3a3 	rbit	r3, r3
 800091a:	4b60      	ldr	r3, [pc, #384]	; (8000a9c <HAL_RCC_OscConfig+0x5e0>)
 800091c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800091e:	2302      	movs	r3, #2
 8000920:	fa93 f3a3 	rbit	r3, r3
 8000924:	fab3 f383 	clz	r3, r3
 8000928:	f003 031f 	and.w	r3, r3, #31
 800092c:	2201      	movs	r2, #1
 800092e:	fa02 f303 	lsl.w	r3, r2, r3
 8000932:	4219      	tst	r1, r3
 8000934:	d011      	beq.n	800095a <HAL_RCC_OscConfig+0x49e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000936:	f7ff fc89 	bl	800024c <HAL_GetTick>
 800093a:	1b80      	subs	r0, r0, r6
 800093c:	f241 3388 	movw	r3, #5000	; 0x1388
 8000940:	4298      	cmp	r0, r3
 8000942:	f200 80c7 	bhi.w	8000ad4 <HAL_RCC_OscConfig+0x618>
 8000946:	2302      	movs	r3, #2
 8000948:	fa93 f2a3 	rbit	r2, r3
 800094c:	fa93 f3a3 	rbit	r3, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000950:	2b00      	cmp	r3, #0
 8000952:	d0df      	beq.n	8000914 <HAL_RCC_OscConfig+0x458>
 8000954:	4b51      	ldr	r3, [pc, #324]	; (8000a9c <HAL_RCC_OscConfig+0x5e0>)
 8000956:	6a19      	ldr	r1, [r3, #32]
 8000958:	e7e1      	b.n	800091e <HAL_RCC_OscConfig+0x462>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800095a:	bbb5      	cbnz	r5, 80009ca <HAL_RCC_OscConfig+0x50e>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800095c:	69e3      	ldr	r3, [r4, #28]
 800095e:	2b00      	cmp	r3, #0
 8000960:	f000 80ba 	beq.w	8000ad8 <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000964:	4a4d      	ldr	r2, [pc, #308]	; (8000a9c <HAL_RCC_OscConfig+0x5e0>)
 8000966:	6852      	ldr	r2, [r2, #4]
 8000968:	f002 020c 	and.w	r2, r2, #12
 800096c:	2a08      	cmp	r2, #8
 800096e:	f000 8099 	beq.w	8000aa4 <HAL_RCC_OscConfig+0x5e8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000972:	2b02      	cmp	r3, #2
 8000974:	d02f      	beq.n	80009d6 <HAL_RCC_OscConfig+0x51a>
 8000976:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800097a:	fa93 f3a3 	rbit	r3, r3
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800097e:	fab3 f383 	clz	r3, r3
 8000982:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000986:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800098a:	009b      	lsls	r3, r3, #2
 800098c:	2200      	movs	r2, #0
 800098e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000990:	f7ff fc5c 	bl	800024c <HAL_GetTick>
 8000994:	4604      	mov	r4, r0
 8000996:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800099a:	fa93 f3a3 	rbit	r3, r3
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800099e:	4b3f      	ldr	r3, [pc, #252]	; (8000a9c <HAL_RCC_OscConfig+0x5e0>)
 80009a0:	6819      	ldr	r1, [r3, #0]
 80009a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80009a6:	fa93 f3a3 	rbit	r3, r3
 80009aa:	fab3 f383 	clz	r3, r3
 80009ae:	f003 031f 	and.w	r3, r3, #31
 80009b2:	2201      	movs	r2, #1
 80009b4:	fa02 f303 	lsl.w	r3, r2, r3
 80009b8:	4219      	tst	r1, r3
 80009ba:	d06b      	beq.n	8000a94 <HAL_RCC_OscConfig+0x5d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80009bc:	f7ff fc46 	bl	800024c <HAL_GetTick>
 80009c0:	1b00      	subs	r0, r0, r4
 80009c2:	2802      	cmp	r0, #2
 80009c4:	d9e7      	bls.n	8000996 <HAL_RCC_OscConfig+0x4da>
          {
            return HAL_TIMEOUT;
 80009c6:	2003      	movs	r0, #3
 80009c8:	e087      	b.n	8000ada <HAL_RCC_OscConfig+0x61e>
      __HAL_RCC_PWR_CLK_DISABLE();
 80009ca:	4a34      	ldr	r2, [pc, #208]	; (8000a9c <HAL_RCC_OscConfig+0x5e0>)
 80009cc:	69d3      	ldr	r3, [r2, #28]
 80009ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80009d2:	61d3      	str	r3, [r2, #28]
 80009d4:	e7c2      	b.n	800095c <HAL_RCC_OscConfig+0x4a0>
 80009d6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80009da:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 80009de:	fab3 f383 	clz	r3, r3
 80009e2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80009e6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80009ea:	009b      	lsls	r3, r3, #2
 80009ec:	2200      	movs	r2, #0
 80009ee:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80009f0:	f7ff fc2c 	bl	800024c <HAL_GetTick>
 80009f4:	4605      	mov	r5, r0
 80009f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80009fa:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80009fe:	4b27      	ldr	r3, [pc, #156]	; (8000a9c <HAL_RCC_OscConfig+0x5e0>)
 8000a00:	6819      	ldr	r1, [r3, #0]
 8000a02:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000a06:	fa93 f3a3 	rbit	r3, r3
 8000a0a:	fab3 f383 	clz	r3, r3
 8000a0e:	f003 031f 	and.w	r3, r3, #31
 8000a12:	2201      	movs	r2, #1
 8000a14:	fa02 f303 	lsl.w	r3, r2, r3
 8000a18:	4219      	tst	r1, r3
 8000a1a:	d006      	beq.n	8000a2a <HAL_RCC_OscConfig+0x56e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000a1c:	f7ff fc16 	bl	800024c <HAL_GetTick>
 8000a20:	1b40      	subs	r0, r0, r5
 8000a22:	2802      	cmp	r0, #2
 8000a24:	d9e7      	bls.n	80009f6 <HAL_RCC_OscConfig+0x53a>
            return HAL_TIMEOUT;
 8000a26:	2003      	movs	r0, #3
 8000a28:	e057      	b.n	8000ada <HAL_RCC_OscConfig+0x61e>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000a2a:	491c      	ldr	r1, [pc, #112]	; (8000a9c <HAL_RCC_OscConfig+0x5e0>)
 8000a2c:	684b      	ldr	r3, [r1, #4]
 8000a2e:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 8000a32:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000a34:	6a20      	ldr	r0, [r4, #32]
 8000a36:	4302      	orrs	r2, r0
 8000a38:	4313      	orrs	r3, r2
 8000a3a:	604b      	str	r3, [r1, #4]
 8000a3c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000a40:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8000a44:	fab3 f383 	clz	r3, r3
 8000a48:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000a4c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000a50:	009b      	lsls	r3, r3, #2
 8000a52:	2201      	movs	r2, #1
 8000a54:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000a56:	f7ff fbf9 	bl	800024c <HAL_GetTick>
 8000a5a:	4604      	mov	r4, r0
 8000a5c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000a60:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000a64:	4b0d      	ldr	r3, [pc, #52]	; (8000a9c <HAL_RCC_OscConfig+0x5e0>)
 8000a66:	6819      	ldr	r1, [r3, #0]
 8000a68:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000a6c:	fa93 f3a3 	rbit	r3, r3
 8000a70:	fab3 f383 	clz	r3, r3
 8000a74:	f003 031f 	and.w	r3, r3, #31
 8000a78:	2201      	movs	r2, #1
 8000a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a7e:	4219      	tst	r1, r3
 8000a80:	d106      	bne.n	8000a90 <HAL_RCC_OscConfig+0x5d4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000a82:	f7ff fbe3 	bl	800024c <HAL_GetTick>
 8000a86:	1b00      	subs	r0, r0, r4
 8000a88:	2802      	cmp	r0, #2
 8000a8a:	d9e7      	bls.n	8000a5c <HAL_RCC_OscConfig+0x5a0>
            return HAL_TIMEOUT;
 8000a8c:	2003      	movs	r0, #3
 8000a8e:	e024      	b.n	8000ada <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 8000a90:	2000      	movs	r0, #0
 8000a92:	e022      	b.n	8000ada <HAL_RCC_OscConfig+0x61e>
 8000a94:	2000      	movs	r0, #0
 8000a96:	e020      	b.n	8000ada <HAL_RCC_OscConfig+0x61e>
 8000a98:	10908120 	.word	0x10908120
 8000a9c:	40021000 	.word	0x40021000
 8000aa0:	40007000 	.word	0x40007000
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000aa4:	2b01      	cmp	r3, #1
 8000aa6:	d01a      	beq.n	8000ade <HAL_RCC_OscConfig+0x622>
        pll_config = RCC->CFGR;
 8000aa8:	4b10      	ldr	r3, [pc, #64]	; (8000aec <HAL_RCC_OscConfig+0x630>)
 8000aaa:	685b      	ldr	r3, [r3, #4]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8000aac:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8000ab0:	6a22      	ldr	r2, [r4, #32]
 8000ab2:	4291      	cmp	r1, r2
 8000ab4:	d115      	bne.n	8000ae2 <HAL_RCC_OscConfig+0x626>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8000ab6:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8000aba:	6a62      	ldr	r2, [r4, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8000abc:	4293      	cmp	r3, r2
 8000abe:	d112      	bne.n	8000ae6 <HAL_RCC_OscConfig+0x62a>
  return HAL_OK;
 8000ac0:	2000      	movs	r0, #0
 8000ac2:	e00a      	b.n	8000ada <HAL_RCC_OscConfig+0x61e>
    return HAL_ERROR;
 8000ac4:	2001      	movs	r0, #1
}
 8000ac6:	4770      	bx	lr
        return HAL_ERROR;
 8000ac8:	2001      	movs	r0, #1
 8000aca:	e006      	b.n	8000ada <HAL_RCC_OscConfig+0x61e>
        return HAL_ERROR;
 8000acc:	2001      	movs	r0, #1
 8000ace:	e004      	b.n	8000ada <HAL_RCC_OscConfig+0x61e>
          return HAL_TIMEOUT;
 8000ad0:	2003      	movs	r0, #3
 8000ad2:	e002      	b.n	8000ada <HAL_RCC_OscConfig+0x61e>
          return HAL_TIMEOUT;
 8000ad4:	2003      	movs	r0, #3
 8000ad6:	e000      	b.n	8000ada <HAL_RCC_OscConfig+0x61e>
  return HAL_OK;
 8000ad8:	2000      	movs	r0, #0
}
 8000ada:	b002      	add	sp, #8
 8000adc:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8000ade:	2001      	movs	r0, #1
 8000ae0:	e7fb      	b.n	8000ada <HAL_RCC_OscConfig+0x61e>
          return HAL_ERROR;
 8000ae2:	2001      	movs	r0, #1
 8000ae4:	e7f9      	b.n	8000ada <HAL_RCC_OscConfig+0x61e>
 8000ae6:	2001      	movs	r0, #1
 8000ae8:	e7f7      	b.n	8000ada <HAL_RCC_OscConfig+0x61e>
 8000aea:	bf00      	nop
 8000aec:	40021000 	.word	0x40021000

08000af0 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 8000af0:	4b17      	ldr	r3, [pc, #92]	; (8000b50 <HAL_RCC_GetSysClockFreq+0x60>)
 8000af2:	685b      	ldr	r3, [r3, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000af4:	f003 020c 	and.w	r2, r3, #12
 8000af8:	2a08      	cmp	r2, #8
 8000afa:	d001      	beq.n	8000b00 <HAL_RCC_GetSysClockFreq+0x10>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8000afc:	4815      	ldr	r0, [pc, #84]	; (8000b54 <HAL_RCC_GetSysClockFreq+0x64>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000afe:	4770      	bx	lr
{
 8000b00:	b410      	push	{r4}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8000b02:	f403 1170 	and.w	r1, r3, #3932160	; 0x3c0000
 8000b06:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8000b0a:	fa92 f2a2 	rbit	r2, r2
 8000b0e:	fab2 f282 	clz	r2, r2
 8000b12:	fa21 f202 	lsr.w	r2, r1, r2
 8000b16:	4c10      	ldr	r4, [pc, #64]	; (8000b58 <HAL_RCC_GetSysClockFreq+0x68>)
 8000b18:	5ca0      	ldrb	r0, [r4, r2]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8000b1a:	4a0d      	ldr	r2, [pc, #52]	; (8000b50 <HAL_RCC_GetSysClockFreq+0x60>)
 8000b1c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000b1e:	f002 020f 	and.w	r2, r2, #15
 8000b22:	210f      	movs	r1, #15
 8000b24:	fa91 f1a1 	rbit	r1, r1
 8000b28:	fab1 f181 	clz	r1, r1
 8000b2c:	40ca      	lsrs	r2, r1
 8000b2e:	4422      	add	r2, r4
 8000b30:	7c12      	ldrb	r2, [r2, #16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8000b32:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8000b36:	d007      	beq.n	8000b48 <HAL_RCC_GetSysClockFreq+0x58>
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8000b38:	4b06      	ldr	r3, [pc, #24]	; (8000b54 <HAL_RCC_GetSysClockFreq+0x64>)
 8000b3a:	fbb3 f3f2 	udiv	r3, r3, r2
 8000b3e:	fb00 f003 	mul.w	r0, r0, r3
}
 8000b42:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000b46:	4770      	bx	lr
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8000b48:	4b04      	ldr	r3, [pc, #16]	; (8000b5c <HAL_RCC_GetSysClockFreq+0x6c>)
 8000b4a:	fb03 f000 	mul.w	r0, r3, r0
 8000b4e:	e7f8      	b.n	8000b42 <HAL_RCC_GetSysClockFreq+0x52>
 8000b50:	40021000 	.word	0x40021000
 8000b54:	007a1200 	.word	0x007a1200
 8000b58:	08001608 	.word	0x08001608
 8000b5c:	003d0900 	.word	0x003d0900

08000b60 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8000b60:	2800      	cmp	r0, #0
 8000b62:	f000 80be 	beq.w	8000ce2 <HAL_RCC_ClockConfig+0x182>
{
 8000b66:	b570      	push	{r4, r5, r6, lr}
 8000b68:	460d      	mov	r5, r1
 8000b6a:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000b6c:	4b61      	ldr	r3, [pc, #388]	; (8000cf4 <HAL_RCC_ClockConfig+0x194>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	f003 0307 	and.w	r3, r3, #7
 8000b74:	428b      	cmp	r3, r1
 8000b76:	d20b      	bcs.n	8000b90 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000b78:	4a5e      	ldr	r2, [pc, #376]	; (8000cf4 <HAL_RCC_ClockConfig+0x194>)
 8000b7a:	6813      	ldr	r3, [r2, #0]
 8000b7c:	f023 0307 	bic.w	r3, r3, #7
 8000b80:	430b      	orrs	r3, r1
 8000b82:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000b84:	6813      	ldr	r3, [r2, #0]
 8000b86:	f003 0307 	and.w	r3, r3, #7
 8000b8a:	428b      	cmp	r3, r1
 8000b8c:	f040 80ab 	bne.w	8000ce6 <HAL_RCC_ClockConfig+0x186>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000b90:	6823      	ldr	r3, [r4, #0]
 8000b92:	f013 0f02 	tst.w	r3, #2
 8000b96:	d006      	beq.n	8000ba6 <HAL_RCC_ClockConfig+0x46>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000b98:	4a57      	ldr	r2, [pc, #348]	; (8000cf8 <HAL_RCC_ClockConfig+0x198>)
 8000b9a:	6853      	ldr	r3, [r2, #4]
 8000b9c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000ba0:	68a1      	ldr	r1, [r4, #8]
 8000ba2:	430b      	orrs	r3, r1
 8000ba4:	6053      	str	r3, [r2, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000ba6:	6823      	ldr	r3, [r4, #0]
 8000ba8:	f013 0f01 	tst.w	r3, #1
 8000bac:	d05a      	beq.n	8000c64 <HAL_RCC_ClockConfig+0x104>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000bae:	6863      	ldr	r3, [r4, #4]
 8000bb0:	2b01      	cmp	r3, #1
 8000bb2:	d02d      	beq.n	8000c10 <HAL_RCC_ClockConfig+0xb0>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000bb4:	2b02      	cmp	r3, #2
 8000bb6:	d040      	beq.n	8000c3a <HAL_RCC_ClockConfig+0xda>
 8000bb8:	2202      	movs	r2, #2
 8000bba:	fa92 f2a2 	rbit	r2, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000bbe:	4a4e      	ldr	r2, [pc, #312]	; (8000cf8 <HAL_RCC_ClockConfig+0x198>)
 8000bc0:	6810      	ldr	r0, [r2, #0]
 8000bc2:	2202      	movs	r2, #2
 8000bc4:	fa92 f2a2 	rbit	r2, r2
 8000bc8:	fab2 f282 	clz	r2, r2
 8000bcc:	f002 021f 	and.w	r2, r2, #31
 8000bd0:	2101      	movs	r1, #1
 8000bd2:	fa01 f202 	lsl.w	r2, r1, r2
 8000bd6:	4210      	tst	r0, r2
 8000bd8:	f000 8087 	beq.w	8000cea <HAL_RCC_ClockConfig+0x18a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000bdc:	4946      	ldr	r1, [pc, #280]	; (8000cf8 <HAL_RCC_ClockConfig+0x198>)
 8000bde:	684a      	ldr	r2, [r1, #4]
 8000be0:	f022 0203 	bic.w	r2, r2, #3
 8000be4:	4313      	orrs	r3, r2
 8000be6:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8000be8:	f7ff fb30 	bl	800024c <HAL_GetTick>
 8000bec:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000bee:	4b42      	ldr	r3, [pc, #264]	; (8000cf8 <HAL_RCC_ClockConfig+0x198>)
 8000bf0:	685b      	ldr	r3, [r3, #4]
 8000bf2:	f003 030c 	and.w	r3, r3, #12
 8000bf6:	6862      	ldr	r2, [r4, #4]
 8000bf8:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000bfc:	d032      	beq.n	8000c64 <HAL_RCC_ClockConfig+0x104>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000bfe:	f7ff fb25 	bl	800024c <HAL_GetTick>
 8000c02:	1b80      	subs	r0, r0, r6
 8000c04:	f241 3388 	movw	r3, #5000	; 0x1388
 8000c08:	4298      	cmp	r0, r3
 8000c0a:	d9f0      	bls.n	8000bee <HAL_RCC_ClockConfig+0x8e>
        return HAL_TIMEOUT;
 8000c0c:	2003      	movs	r0, #3
 8000c0e:	e067      	b.n	8000ce0 <HAL_RCC_ClockConfig+0x180>
 8000c10:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000c14:	fa92 f2a2 	rbit	r2, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c18:	4a37      	ldr	r2, [pc, #220]	; (8000cf8 <HAL_RCC_ClockConfig+0x198>)
 8000c1a:	6810      	ldr	r0, [r2, #0]
 8000c1c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000c20:	fa92 f2a2 	rbit	r2, r2
 8000c24:	fab2 f282 	clz	r2, r2
 8000c28:	f002 021f 	and.w	r2, r2, #31
 8000c2c:	2101      	movs	r1, #1
 8000c2e:	fa01 f202 	lsl.w	r2, r1, r2
 8000c32:	4202      	tst	r2, r0
 8000c34:	d1d2      	bne.n	8000bdc <HAL_RCC_ClockConfig+0x7c>
        return HAL_ERROR;
 8000c36:	2001      	movs	r0, #1
 8000c38:	e052      	b.n	8000ce0 <HAL_RCC_ClockConfig+0x180>
 8000c3a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000c3e:	fa92 f2a2 	rbit	r2, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000c42:	4a2d      	ldr	r2, [pc, #180]	; (8000cf8 <HAL_RCC_ClockConfig+0x198>)
 8000c44:	6810      	ldr	r0, [r2, #0]
 8000c46:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000c4a:	fa92 f2a2 	rbit	r2, r2
 8000c4e:	fab2 f282 	clz	r2, r2
 8000c52:	f002 021f 	and.w	r2, r2, #31
 8000c56:	2101      	movs	r1, #1
 8000c58:	fa01 f202 	lsl.w	r2, r1, r2
 8000c5c:	4210      	tst	r0, r2
 8000c5e:	d1bd      	bne.n	8000bdc <HAL_RCC_ClockConfig+0x7c>
        return HAL_ERROR;
 8000c60:	2001      	movs	r0, #1
 8000c62:	e03d      	b.n	8000ce0 <HAL_RCC_ClockConfig+0x180>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000c64:	4b23      	ldr	r3, [pc, #140]	; (8000cf4 <HAL_RCC_ClockConfig+0x194>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	f003 0307 	and.w	r3, r3, #7
 8000c6c:	42ab      	cmp	r3, r5
 8000c6e:	d90a      	bls.n	8000c86 <HAL_RCC_ClockConfig+0x126>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000c70:	4a20      	ldr	r2, [pc, #128]	; (8000cf4 <HAL_RCC_ClockConfig+0x194>)
 8000c72:	6813      	ldr	r3, [r2, #0]
 8000c74:	f023 0307 	bic.w	r3, r3, #7
 8000c78:	432b      	orrs	r3, r5
 8000c7a:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000c7c:	6813      	ldr	r3, [r2, #0]
 8000c7e:	f003 0307 	and.w	r3, r3, #7
 8000c82:	42ab      	cmp	r3, r5
 8000c84:	d133      	bne.n	8000cee <HAL_RCC_ClockConfig+0x18e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000c86:	6823      	ldr	r3, [r4, #0]
 8000c88:	f013 0f04 	tst.w	r3, #4
 8000c8c:	d006      	beq.n	8000c9c <HAL_RCC_ClockConfig+0x13c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000c8e:	4a1a      	ldr	r2, [pc, #104]	; (8000cf8 <HAL_RCC_ClockConfig+0x198>)
 8000c90:	6853      	ldr	r3, [r2, #4]
 8000c92:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000c96:	68e1      	ldr	r1, [r4, #12]
 8000c98:	430b      	orrs	r3, r1
 8000c9a:	6053      	str	r3, [r2, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000c9c:	6823      	ldr	r3, [r4, #0]
 8000c9e:	f013 0f08 	tst.w	r3, #8
 8000ca2:	d007      	beq.n	8000cb4 <HAL_RCC_ClockConfig+0x154>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000ca4:	4a14      	ldr	r2, [pc, #80]	; (8000cf8 <HAL_RCC_ClockConfig+0x198>)
 8000ca6:	6853      	ldr	r3, [r2, #4]
 8000ca8:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000cac:	6921      	ldr	r1, [r4, #16]
 8000cae:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000cb2:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8000cb4:	f7ff ff1c 	bl	8000af0 <HAL_RCC_GetSysClockFreq>
 8000cb8:	4b0f      	ldr	r3, [pc, #60]	; (8000cf8 <HAL_RCC_ClockConfig+0x198>)
 8000cba:	685b      	ldr	r3, [r3, #4]
 8000cbc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000cc0:	22f0      	movs	r2, #240	; 0xf0
 8000cc2:	fa92 f2a2 	rbit	r2, r2
 8000cc6:	fab2 f282 	clz	r2, r2
 8000cca:	40d3      	lsrs	r3, r2
 8000ccc:	4a0b      	ldr	r2, [pc, #44]	; (8000cfc <HAL_RCC_ClockConfig+0x19c>)
 8000cce:	5cd3      	ldrb	r3, [r2, r3]
 8000cd0:	40d8      	lsrs	r0, r3
 8000cd2:	4b0b      	ldr	r3, [pc, #44]	; (8000d00 <HAL_RCC_ClockConfig+0x1a0>)
 8000cd4:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8000cd6:	4b0b      	ldr	r3, [pc, #44]	; (8000d04 <HAL_RCC_ClockConfig+0x1a4>)
 8000cd8:	6818      	ldr	r0, [r3, #0]
 8000cda:	f7ff fa75 	bl	80001c8 <HAL_InitTick>
  return HAL_OK;
 8000cde:	2000      	movs	r0, #0
}
 8000ce0:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8000ce2:	2001      	movs	r0, #1
}
 8000ce4:	4770      	bx	lr
      return HAL_ERROR;
 8000ce6:	2001      	movs	r0, #1
 8000ce8:	e7fa      	b.n	8000ce0 <HAL_RCC_ClockConfig+0x180>
        return HAL_ERROR;
 8000cea:	2001      	movs	r0, #1
 8000cec:	e7f8      	b.n	8000ce0 <HAL_RCC_ClockConfig+0x180>
      return HAL_ERROR;
 8000cee:	2001      	movs	r0, #1
 8000cf0:	e7f6      	b.n	8000ce0 <HAL_RCC_ClockConfig+0x180>
 8000cf2:	bf00      	nop
 8000cf4:	40022000 	.word	0x40022000
 8000cf8:	40021000 	.word	0x40021000
 8000cfc:	08001634 	.word	0x08001634
 8000d00:	20000034 	.word	0x20000034
 8000d04:	20000004 	.word	0x20000004

08000d08 <HAL_SPI_Init>:
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8000d08:	2800      	cmp	r0, #0
 8000d0a:	d06f      	beq.n	8000dec <HAL_SPI_Init+0xe4>
{
 8000d0c:	b510      	push	{r4, lr}
 8000d0e:	4604      	mov	r4, r0
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8000d10:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000d12:	b933      	cbnz	r3, 8000d22 <HAL_SPI_Init+0x1a>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8000d14:	6843      	ldr	r3, [r0, #4]
 8000d16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8000d1a:	d005      	beq.n	8000d28 <HAL_SPI_Init+0x20>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	61c3      	str	r3, [r0, #28]
 8000d20:	e002      	b.n	8000d28 <HAL_SPI_Init+0x20>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d22:	2300      	movs	r3, #0
 8000d24:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8000d26:	6143      	str	r3, [r0, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	62a3      	str	r3, [r4, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8000d2c:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d052      	beq.n	8000dda <HAL_SPI_Init+0xd2>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8000d34:	2302      	movs	r3, #2
 8000d36:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8000d3a:	6822      	ldr	r2, [r4, #0]
 8000d3c:	6813      	ldr	r3, [r2, #0]
 8000d3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000d42:	6013      	str	r3, [r2, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8000d44:	68e3      	ldr	r3, [r4, #12]
 8000d46:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8000d4a:	d94c      	bls.n	8000de6 <HAL_SPI_Init+0xde>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8000d4c:	2200      	movs	r2, #0
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8000d4e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8000d52:	d004      	beq.n	8000d5e <HAL_SPI_Init+0x56>
 8000d54:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8000d58:	d001      	beq.n	8000d5e <HAL_SPI_Init+0x56>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	62a3      	str	r3, [r4, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8000d5e:	6863      	ldr	r3, [r4, #4]
 8000d60:	f403 7382 	and.w	r3, r3, #260	; 0x104
 8000d64:	68a1      	ldr	r1, [r4, #8]
 8000d66:	f401 4104 	and.w	r1, r1, #33792	; 0x8400
 8000d6a:	430b      	orrs	r3, r1
 8000d6c:	6921      	ldr	r1, [r4, #16]
 8000d6e:	f001 0102 	and.w	r1, r1, #2
 8000d72:	430b      	orrs	r3, r1
 8000d74:	6961      	ldr	r1, [r4, #20]
 8000d76:	f001 0101 	and.w	r1, r1, #1
 8000d7a:	430b      	orrs	r3, r1
 8000d7c:	69a1      	ldr	r1, [r4, #24]
 8000d7e:	f401 7100 	and.w	r1, r1, #512	; 0x200
 8000d82:	430b      	orrs	r3, r1
 8000d84:	69e1      	ldr	r1, [r4, #28]
 8000d86:	f001 0138 	and.w	r1, r1, #56	; 0x38
 8000d8a:	430b      	orrs	r3, r1
 8000d8c:	6a21      	ldr	r1, [r4, #32]
 8000d8e:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8000d92:	430b      	orrs	r3, r1
 8000d94:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8000d96:	f401 5100 	and.w	r1, r1, #8192	; 0x2000
 8000d9a:	6820      	ldr	r0, [r4, #0]
 8000d9c:	430b      	orrs	r3, r1
 8000d9e:	6003      	str	r3, [r0, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8000da0:	8b63      	ldrh	r3, [r4, #26]
 8000da2:	f003 0304 	and.w	r3, r3, #4
 8000da6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8000da8:	f001 0110 	and.w	r1, r1, #16
 8000dac:	430b      	orrs	r3, r1
 8000dae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000db0:	f001 0108 	and.w	r1, r1, #8
 8000db4:	430b      	orrs	r3, r1
 8000db6:	68e1      	ldr	r1, [r4, #12]
 8000db8:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
 8000dbc:	430b      	orrs	r3, r1
 8000dbe:	6821      	ldr	r1, [r4, #0]
 8000dc0:	4313      	orrs	r3, r2
 8000dc2:	604b      	str	r3, [r1, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8000dc4:	6822      	ldr	r2, [r4, #0]
 8000dc6:	69d3      	ldr	r3, [r2, #28]
 8000dc8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000dcc:	61d3      	str	r3, [r2, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000dce:	2000      	movs	r0, #0
 8000dd0:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d

  return HAL_OK;
}
 8000dd8:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 8000dda:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 8000dde:	4620      	mov	r0, r4
 8000de0:	f000 fb34 	bl	800144c <HAL_SPI_MspInit>
 8000de4:	e7a6      	b.n	8000d34 <HAL_SPI_Init+0x2c>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8000de6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000dea:	e7b0      	b.n	8000d4e <HAL_SPI_Init+0x46>
    return HAL_ERROR;
 8000dec:	2001      	movs	r0, #1
}
 8000dee:	4770      	bx	lr

08000df0 <MX_GPIO_Init>:
     PA12   ------> USB_DP
     PB6   ------> I2C1_SCL
     PB7   ------> I2C1_SDA
*/
void MX_GPIO_Init(void)
{
 8000df0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000df2:	b08b      	sub	sp, #44	; 0x2c

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df4:	2400      	movs	r4, #0
 8000df6:	9405      	str	r4, [sp, #20]
 8000df8:	9406      	str	r4, [sp, #24]
 8000dfa:	9407      	str	r4, [sp, #28]
 8000dfc:	9408      	str	r4, [sp, #32]
 8000dfe:	9409      	str	r4, [sp, #36]	; 0x24

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e00:	4b3c      	ldr	r3, [pc, #240]	; (8000ef4 <MX_GPIO_Init+0x104>)
 8000e02:	695a      	ldr	r2, [r3, #20]
 8000e04:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8000e08:	615a      	str	r2, [r3, #20]
 8000e0a:	695a      	ldr	r2, [r3, #20]
 8000e0c:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 8000e10:	9200      	str	r2, [sp, #0]
 8000e12:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e14:	695a      	ldr	r2, [r3, #20]
 8000e16:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8000e1a:	615a      	str	r2, [r3, #20]
 8000e1c:	695a      	ldr	r2, [r3, #20]
 8000e1e:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8000e22:	9201      	str	r2, [sp, #4]
 8000e24:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e26:	695a      	ldr	r2, [r3, #20]
 8000e28:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000e2c:	615a      	str	r2, [r3, #20]
 8000e2e:	695a      	ldr	r2, [r3, #20]
 8000e30:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8000e34:	9202      	str	r2, [sp, #8]
 8000e36:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e38:	695a      	ldr	r2, [r3, #20]
 8000e3a:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8000e3e:	615a      	str	r2, [r3, #20]
 8000e40:	695a      	ldr	r2, [r3, #20]
 8000e42:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8000e46:	9203      	str	r2, [sp, #12]
 8000e48:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e4a:	695a      	ldr	r2, [r3, #20]
 8000e4c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000e50:	615a      	str	r2, [r3, #20]
 8000e52:	695b      	ldr	r3, [r3, #20]
 8000e54:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e58:	9304      	str	r3, [sp, #16]
 8000e5a:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LD4_Pin|LD3_Pin|LD5_Pin|LD7_Pin
 8000e5c:	4d26      	ldr	r5, [pc, #152]	; (8000ef8 <MX_GPIO_Init+0x108>)
 8000e5e:	4622      	mov	r2, r4
 8000e60:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 8000e64:	4628      	mov	r0, r5
 8000e66:	f7ff fb23 	bl	80004b0 <HAL_GPIO_WritePin>
                          |LD9_Pin|LD10_Pin|LD8_Pin|LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000e6a:	2701      	movs	r7, #1
 8000e6c:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e6e:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e70:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000e72:	a905      	add	r1, sp, #20
 8000e74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e78:	f7ff fa4a 	bl	8000310 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8000e7c:	23e0      	movs	r3, #224	; 0xe0
 8000e7e:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e80:	2602      	movs	r6, #2
 8000e82:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e84:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e86:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e88:	2305      	movs	r3, #5
 8000e8a:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e8c:	a905      	add	r1, sp, #20
 8000e8e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e92:	f7ff fa3d 	bl	8000310 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD7_Pin
 8000e96:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8000e9a:	9305      	str	r3, [sp, #20]
                          |LD9_Pin|LD10_Pin|LD8_Pin|LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e9c:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9e:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea0:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ea2:	a905      	add	r1, sp, #20
 8000ea4:	4628      	mov	r0, r5
 8000ea6:	f7ff fa33 	bl	8000310 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8000eaa:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000eae:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb0:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb2:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000eb4:	2603      	movs	r6, #3
 8000eb6:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8000eb8:	230e      	movs	r3, #14
 8000eba:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ebc:	a905      	add	r1, sp, #20
 8000ebe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ec2:	f7ff fa25 	bl	8000310 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8000ec6:	23c0      	movs	r3, #192	; 0xc0
 8000ec8:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000eca:	2312      	movs	r3, #18
 8000ecc:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ece:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed0:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ed2:	2304      	movs	r3, #4
 8000ed4:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ed6:	a905      	add	r1, sp, #20
 8000ed8:	4808      	ldr	r0, [pc, #32]	; (8000efc <MX_GPIO_Init+0x10c>)
 8000eda:	f7ff fa19 	bl	8000310 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = MEMS_INT1_Pin|MEMS_INT2_Pin;
 8000ede:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000ee0:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000ee4:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee6:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ee8:	a905      	add	r1, sp, #20
 8000eea:	4628      	mov	r0, r5
 8000eec:	f7ff fa10 	bl	8000310 <HAL_GPIO_Init>

}
 8000ef0:	b00b      	add	sp, #44	; 0x2c
 8000ef2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ef4:	40021000 	.word	0x40021000
 8000ef8:	48001000 	.word	0x48001000
 8000efc:	48000400 	.word	0x48000400

08000f00 <VFDLoadBMP>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void VFDLoadBMP(uint8_t Grid, uint8_t *sBMP){
 8000f00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000f04:	4680      	mov	r8, r0
	// Logically thinking : Determine the Grid is Event or Odd number (Important, For the simple algorithm to convert abcdef to afbecd format).
		uint8_t EvOd = 0;
		if(Grid%2){
 8000f06:	f010 0201 	ands.w	r2, r0, #1
 8000f0a:	d000      	beq.n	8000f0e <VFDLoadBMP+0xe>
			EvOd = 1;// odd number (odd grid), Only manipulate the a, b, c Dots
 8000f0c:	2201      	movs	r2, #1
		}else{
			EvOd = 0;// event number (event grid), Only manipulate the d, e, f Dots
		}
uint8_t nxtWrd = 0;
for(uint8_t wdCount=0; wdCount < 2;wdCount++){// Do twice
 8000f0e:	2500      	movs	r5, #0
uint8_t nxtWrd = 0;
 8000f10:	462c      	mov	r4, r5
for(uint8_t wdCount=0; wdCount < 2;wdCount++){// Do twice
 8000f12:	e157      	b.n	80011c4 <VFDLoadBMP+0x2c4>
			if((i%6) == 5){// move to next bitmap when we complete previous 6bit BMP
			sBMP++;
			}
		}
	}else{
		for(uint8_t i=0;i < 30;i++){// for 1st round
 8000f14:	462e      	mov	r6, r5
 8000f16:	e02f      	b.n	8000f78 <VFDLoadBMP+0x78>
				GPbuff[0+nxtWrd] = (0 << i);
 8000f18:	4fc0      	ldr	r7, [pc, #768]	; (800121c <VFDLoadBMP+0x31c>)
 8000f1a:	2000      	movs	r0, #0
 8000f1c:	f847 0024 	str.w	r0, [r7, r4, lsl #2]
			if((i%6) == 5){// move to next bitmap when we complete previous 6bit BMP
 8000f20:	2b05      	cmp	r3, #5
 8000f22:	d01f      	beq.n	8000f64 <VFDLoadBMP+0x64>
		for(uint8_t i=0;i < 32;i++){// for 2nd round
 8000f24:	3601      	adds	r6, #1
 8000f26:	b2f6      	uxtb	r6, r6
 8000f28:	2e1f      	cmp	r6, #31
 8000f2a:	d875      	bhi.n	8001018 <VFDLoadBMP+0x118>
			if((uintptr_t)sBMP & (1 << reOrder[EvOd][i%6])){
 8000f2c:	4bbc      	ldr	r3, [pc, #752]	; (8001220 <VFDLoadBMP+0x320>)
 8000f2e:	fba3 0306 	umull	r0, r3, r3, r6
 8000f32:	089b      	lsrs	r3, r3, #2
 8000f34:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8000f38:	eba6 0343 	sub.w	r3, r6, r3, lsl #1
 8000f3c:	b2db      	uxtb	r3, r3
 8000f3e:	0057      	lsls	r7, r2, #1
 8000f40:	eb07 0c02 	add.w	ip, r7, r2
 8000f44:	4fb7      	ldr	r7, [pc, #732]	; (8001224 <VFDLoadBMP+0x324>)
 8000f46:	eb07 074c 	add.w	r7, r7, ip, lsl #1
 8000f4a:	f817 c003 	ldrb.w	ip, [r7, r3]
 8000f4e:	2701      	movs	r7, #1
 8000f50:	fa07 f70c 	lsl.w	r7, r7, ip
 8000f54:	4239      	tst	r1, r7
 8000f56:	d0df      	beq.n	8000f18 <VFDLoadBMP+0x18>
				GPbuff[0+nxtWrd] = (1 << i);
 8000f58:	2701      	movs	r7, #1
 8000f5a:	40b7      	lsls	r7, r6
 8000f5c:	48af      	ldr	r0, [pc, #700]	; (800121c <VFDLoadBMP+0x31c>)
 8000f5e:	f840 7024 	str.w	r7, [r0, r4, lsl #2]
 8000f62:	e7dd      	b.n	8000f20 <VFDLoadBMP+0x20>
			sBMP++;
 8000f64:	3101      	adds	r1, #1
 8000f66:	e7dd      	b.n	8000f24 <VFDLoadBMP+0x24>
			if((uintptr_t)sBMP & (1 << reOrder[EvOd][i%6])){
				GPbuff[0+nxtWrd] = (1 << (i+2));
			}else{
				GPbuff[0+nxtWrd] = (0 << (i+2));
 8000f68:	4fac      	ldr	r7, [pc, #688]	; (800121c <VFDLoadBMP+0x31c>)
 8000f6a:	2000      	movs	r0, #0
 8000f6c:	f847 0024 	str.w	r0, [r7, r4, lsl #2]
			}
			if((i%6) == 5){// move to next bitmap when we complete previous 6bit BMP
 8000f70:	2b05      	cmp	r3, #5
 8000f72:	d022      	beq.n	8000fba <VFDLoadBMP+0xba>
		for(uint8_t i=0;i < 30;i++){// for 1st round
 8000f74:	3601      	adds	r6, #1
 8000f76:	b2f6      	uxtb	r6, r6
 8000f78:	2e1d      	cmp	r6, #29
 8000f7a:	d84d      	bhi.n	8001018 <VFDLoadBMP+0x118>
			if((uintptr_t)sBMP & (1 << reOrder[EvOd][i%6])){
 8000f7c:	4ba8      	ldr	r3, [pc, #672]	; (8001220 <VFDLoadBMP+0x320>)
 8000f7e:	fba3 0306 	umull	r0, r3, r3, r6
 8000f82:	089b      	lsrs	r3, r3, #2
 8000f84:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8000f88:	eba6 0343 	sub.w	r3, r6, r3, lsl #1
 8000f8c:	b2db      	uxtb	r3, r3
 8000f8e:	0057      	lsls	r7, r2, #1
 8000f90:	eb07 0c02 	add.w	ip, r7, r2
 8000f94:	4fa3      	ldr	r7, [pc, #652]	; (8001224 <VFDLoadBMP+0x324>)
 8000f96:	eb07 074c 	add.w	r7, r7, ip, lsl #1
 8000f9a:	f817 c003 	ldrb.w	ip, [r7, r3]
 8000f9e:	2701      	movs	r7, #1
 8000fa0:	fa07 f70c 	lsl.w	r7, r7, ip
 8000fa4:	4239      	tst	r1, r7
 8000fa6:	d0df      	beq.n	8000f68 <VFDLoadBMP+0x68>
				GPbuff[0+nxtWrd] = (1 << (i+2));
 8000fa8:	f106 0c02 	add.w	ip, r6, #2
 8000fac:	2701      	movs	r7, #1
 8000fae:	fa07 f70c 	lsl.w	r7, r7, ip
 8000fb2:	489a      	ldr	r0, [pc, #616]	; (800121c <VFDLoadBMP+0x31c>)
 8000fb4:	f840 7024 	str.w	r7, [r0, r4, lsl #2]
 8000fb8:	e7da      	b.n	8000f70 <VFDLoadBMP+0x70>
			sBMP++;
 8000fba:	3101      	adds	r1, #1
 8000fbc:	e7da      	b.n	8000f74 <VFDLoadBMP+0x74>
		//4 bytes on second buffer array + 2 bit for 11a,11f
		for(uint8_t i=0;i < 30;i++){
			if((uintptr_t)sBMP & (1 << reOrder[EvOd][i%6])){
				GPbuff[1+nxtWrd] = (1 << i);
			}else{
				GPbuff[1+nxtWrd] = (0 << i);
 8000fbe:	1c67      	adds	r7, r4, #1
 8000fc0:	4896      	ldr	r0, [pc, #600]	; (800121c <VFDLoadBMP+0x31c>)
 8000fc2:	f04f 0e00 	mov.w	lr, #0
 8000fc6:	f840 e027 	str.w	lr, [r0, r7, lsl #2]
			}
			if((i%6) == 5){// move to next bitmap when we complete previous 6bit BMP
 8000fca:	2b05      	cmp	r3, #5
 8000fcc:	d022      	beq.n	8001014 <VFDLoadBMP+0x114>
		for(uint8_t i=0;i < 30;i++){
 8000fce:	3601      	adds	r6, #1
 8000fd0:	b2f6      	uxtb	r6, r6
 8000fd2:	2e1d      	cmp	r6, #29
 8000fd4:	d822      	bhi.n	800101c <VFDLoadBMP+0x11c>
			if((uintptr_t)sBMP & (1 << reOrder[EvOd][i%6])){
 8000fd6:	4b92      	ldr	r3, [pc, #584]	; (8001220 <VFDLoadBMP+0x320>)
 8000fd8:	fba3 0306 	umull	r0, r3, r3, r6
 8000fdc:	089b      	lsrs	r3, r3, #2
 8000fde:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8000fe2:	eba6 0343 	sub.w	r3, r6, r3, lsl #1
 8000fe6:	b2db      	uxtb	r3, r3
 8000fe8:	0057      	lsls	r7, r2, #1
 8000fea:	eb07 0c02 	add.w	ip, r7, r2
 8000fee:	4f8d      	ldr	r7, [pc, #564]	; (8001224 <VFDLoadBMP+0x324>)
 8000ff0:	eb07 074c 	add.w	r7, r7, ip, lsl #1
 8000ff4:	f817 c003 	ldrb.w	ip, [r7, r3]
 8000ff8:	2701      	movs	r7, #1
 8000ffa:	fa07 f70c 	lsl.w	r7, r7, ip
 8000ffe:	4239      	tst	r1, r7
 8001000:	d0dd      	beq.n	8000fbe <VFDLoadBMP+0xbe>
				GPbuff[1+nxtWrd] = (1 << i);
 8001002:	1c67      	adds	r7, r4, #1
 8001004:	f04f 0c01 	mov.w	ip, #1
 8001008:	fa0c fc06 	lsl.w	ip, ip, r6
 800100c:	4883      	ldr	r0, [pc, #524]	; (800121c <VFDLoadBMP+0x31c>)
 800100e:	f840 c027 	str.w	ip, [r0, r7, lsl #2]
 8001012:	e7da      	b.n	8000fca <VFDLoadBMP+0xca>
			sBMP++;
 8001014:	3101      	adds	r1, #1
 8001016:	e7da      	b.n	8000fce <VFDLoadBMP+0xce>
		for(uint8_t i=0;i < 30;i++){// for 1st round
 8001018:	2600      	movs	r6, #0
 800101a:	e7da      	b.n	8000fd2 <VFDLoadBMP+0xd2>
			}
		}
		//2 bit for 11a,11f
		for(uint8_t i=30;i < 32;i++){
 800101c:	261e      	movs	r6, #30
 800101e:	e006      	b.n	800102e <VFDLoadBMP+0x12e>
			if((uintptr_t)sBMP & (1 << reOrder[EvOd][i%6])){
				GPbuff[1+nxtWrd] = (1 << i);
				}else{
				GPbuff[1+nxtWrd] = (0 << i);
 8001020:	1c63      	adds	r3, r4, #1
 8001022:	4f7e      	ldr	r7, [pc, #504]	; (800121c <VFDLoadBMP+0x31c>)
 8001024:	2000      	movs	r0, #0
 8001026:	f847 0023 	str.w	r0, [r7, r3, lsl #2]
		for(uint8_t i=30;i < 32;i++){
 800102a:	3601      	adds	r6, #1
 800102c:	b2f6      	uxtb	r6, r6
 800102e:	2e1f      	cmp	r6, #31
 8001030:	d81a      	bhi.n	8001068 <VFDLoadBMP+0x168>
			if((uintptr_t)sBMP & (1 << reOrder[EvOd][i%6])){
 8001032:	4b7b      	ldr	r3, [pc, #492]	; (8001220 <VFDLoadBMP+0x320>)
 8001034:	fba3 0306 	umull	r0, r3, r3, r6
 8001038:	089b      	lsrs	r3, r3, #2
 800103a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800103e:	eba6 0343 	sub.w	r3, r6, r3, lsl #1
 8001042:	b2db      	uxtb	r3, r3
 8001044:	0057      	lsls	r7, r2, #1
 8001046:	eb07 0c02 	add.w	ip, r7, r2
 800104a:	4f76      	ldr	r7, [pc, #472]	; (8001224 <VFDLoadBMP+0x324>)
 800104c:	eb07 074c 	add.w	r7, r7, ip, lsl #1
 8001050:	5cff      	ldrb	r7, [r7, r3]
 8001052:	2301      	movs	r3, #1
 8001054:	40bb      	lsls	r3, r7
 8001056:	4219      	tst	r1, r3
 8001058:	d0e2      	beq.n	8001020 <VFDLoadBMP+0x120>
				GPbuff[1+nxtWrd] = (1 << i);
 800105a:	1c63      	adds	r3, r4, #1
 800105c:	2701      	movs	r7, #1
 800105e:	40b7      	lsls	r7, r6
 8001060:	486e      	ldr	r0, [pc, #440]	; (800121c <VFDLoadBMP+0x31c>)
 8001062:	f840 7023 	str.w	r7, [r0, r3, lsl #2]
 8001066:	e7e0      	b.n	800102a <VFDLoadBMP+0x12a>
			}
		}

		//4byte on third buffer array
		for(uint8_t i=0;i < 4;i++){
 8001068:	2600      	movs	r6, #0
 800106a:	e006      	b.n	800107a <VFDLoadBMP+0x17a>
			if((uintptr_t)sBMP & (1 << reOrder[EvOd][i%6])){
				GPbuff[2+nxtWrd] = (1 << i);
			}else{
				GPbuff[2+nxtWrd] = (0 << i);
 800106c:	1ca3      	adds	r3, r4, #2
 800106e:	4f6b      	ldr	r7, [pc, #428]	; (800121c <VFDLoadBMP+0x31c>)
 8001070:	2000      	movs	r0, #0
 8001072:	f847 0023 	str.w	r0, [r7, r3, lsl #2]
		for(uint8_t i=0;i < 4;i++){
 8001076:	3601      	adds	r6, #1
 8001078:	b2f6      	uxtb	r6, r6
 800107a:	2e03      	cmp	r6, #3
 800107c:	d81a      	bhi.n	80010b4 <VFDLoadBMP+0x1b4>
			if((uintptr_t)sBMP & (1 << reOrder[EvOd][i%6])){
 800107e:	4b68      	ldr	r3, [pc, #416]	; (8001220 <VFDLoadBMP+0x320>)
 8001080:	fba3 0306 	umull	r0, r3, r3, r6
 8001084:	089b      	lsrs	r3, r3, #2
 8001086:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800108a:	eba6 0343 	sub.w	r3, r6, r3, lsl #1
 800108e:	b2db      	uxtb	r3, r3
 8001090:	0057      	lsls	r7, r2, #1
 8001092:	eb07 0c02 	add.w	ip, r7, r2
 8001096:	4f63      	ldr	r7, [pc, #396]	; (8001224 <VFDLoadBMP+0x324>)
 8001098:	eb07 074c 	add.w	r7, r7, ip, lsl #1
 800109c:	5cff      	ldrb	r7, [r7, r3]
 800109e:	2301      	movs	r3, #1
 80010a0:	40bb      	lsls	r3, r7
 80010a2:	4219      	tst	r1, r3
 80010a4:	d0e2      	beq.n	800106c <VFDLoadBMP+0x16c>
				GPbuff[2+nxtWrd] = (1 << i);
 80010a6:	1ca3      	adds	r3, r4, #2
 80010a8:	2701      	movs	r7, #1
 80010aa:	40b7      	lsls	r7, r6
 80010ac:	485b      	ldr	r0, [pc, #364]	; (800121c <VFDLoadBMP+0x31c>)
 80010ae:	f840 7023 	str.w	r7, [r0, r3, lsl #2]
 80010b2:	e7e0      	b.n	8001076 <VFDLoadBMP+0x176>
			}
		}
		sBMP++;
 80010b4:	3101      	adds	r1, #1

		for(uint8_t i=0;i < 23;i++){
 80010b6:	2600      	movs	r6, #0
 80010b8:	e009      	b.n	80010ce <VFDLoadBMP+0x1ce>
			if((uintptr_t)sBMP & (1 << reOrder[EvOd][i%6])){
				GPbuff[2+nxtWrd] = (1 << (i+4));
			}else{
				GPbuff[2+nxtWrd] = (0 << (i+4));
 80010ba:	1ca7      	adds	r7, r4, #2
 80010bc:	4857      	ldr	r0, [pc, #348]	; (800121c <VFDLoadBMP+0x31c>)
 80010be:	f04f 0e00 	mov.w	lr, #0
 80010c2:	f840 e027 	str.w	lr, [r0, r7, lsl #2]
			}
			if((i%6) == 5){// move to next bitmap when we complete previous 6bit BMP
 80010c6:	2b05      	cmp	r3, #5
 80010c8:	d024      	beq.n	8001114 <VFDLoadBMP+0x214>
		for(uint8_t i=0;i < 23;i++){
 80010ca:	3601      	adds	r6, #1
 80010cc:	b2f6      	uxtb	r6, r6
 80010ce:	2e16      	cmp	r6, #22
 80010d0:	d822      	bhi.n	8001118 <VFDLoadBMP+0x218>
			if((uintptr_t)sBMP & (1 << reOrder[EvOd][i%6])){
 80010d2:	4b53      	ldr	r3, [pc, #332]	; (8001220 <VFDLoadBMP+0x320>)
 80010d4:	fba3 0306 	umull	r0, r3, r3, r6
 80010d8:	089b      	lsrs	r3, r3, #2
 80010da:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80010de:	eba6 0343 	sub.w	r3, r6, r3, lsl #1
 80010e2:	b2db      	uxtb	r3, r3
 80010e4:	0057      	lsls	r7, r2, #1
 80010e6:	eb07 0c02 	add.w	ip, r7, r2
 80010ea:	4f4e      	ldr	r7, [pc, #312]	; (8001224 <VFDLoadBMP+0x324>)
 80010ec:	eb07 074c 	add.w	r7, r7, ip, lsl #1
 80010f0:	f817 c003 	ldrb.w	ip, [r7, r3]
 80010f4:	2701      	movs	r7, #1
 80010f6:	fa07 f70c 	lsl.w	r7, r7, ip
 80010fa:	4239      	tst	r1, r7
 80010fc:	d0dd      	beq.n	80010ba <VFDLoadBMP+0x1ba>
				GPbuff[2+nxtWrd] = (1 << (i+4));
 80010fe:	f106 0e04 	add.w	lr, r6, #4
 8001102:	1ca7      	adds	r7, r4, #2
 8001104:	f04f 0c01 	mov.w	ip, #1
 8001108:	fa0c fc0e 	lsl.w	ip, ip, lr
 800110c:	4843      	ldr	r0, [pc, #268]	; (800121c <VFDLoadBMP+0x31c>)
 800110e:	f840 c027 	str.w	ip, [r0, r7, lsl #2]
 8001112:	e7d8      	b.n	80010c6 <VFDLoadBMP+0x1c6>
			sBMP++;
 8001114:	3101      	adds	r1, #1
 8001116:	e7d8      	b.n	80010ca <VFDLoadBMP+0x1ca>
			}
		}

		//for 16a to 16e
		for(uint8_t i=27;i < 31;i++){
 8001118:	261b      	movs	r6, #27
 800111a:	e007      	b.n	800112c <VFDLoadBMP+0x22c>
			if((uintptr_t)sBMP & (1 << reOrder[EvOd][(i-3)%6])){
				GPbuff[2+nxtWrd] = (1 << i);
			}else{
				GPbuff[2+nxtWrd] = (0 << i);
 800111c:	1ca3      	adds	r3, r4, #2
 800111e:	4f3f      	ldr	r7, [pc, #252]	; (800121c <VFDLoadBMP+0x31c>)
 8001120:	f04f 0c00 	mov.w	ip, #0
 8001124:	f847 c023 	str.w	ip, [r7, r3, lsl #2]
		for(uint8_t i=27;i < 31;i++){
 8001128:	3601      	adds	r6, #1
 800112a:	b2f6      	uxtb	r6, r6
 800112c:	2e1e      	cmp	r6, #30
 800112e:	d81c      	bhi.n	800116a <VFDLoadBMP+0x26a>
			if((uintptr_t)sBMP & (1 << reOrder[EvOd][(i-3)%6])){
 8001130:	1ef7      	subs	r7, r6, #3
 8001132:	4b3d      	ldr	r3, [pc, #244]	; (8001228 <VFDLoadBMP+0x328>)
 8001134:	fb83 0307 	smull	r0, r3, r3, r7
 8001138:	eba3 73e7 	sub.w	r3, r3, r7, asr #31
 800113c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001140:	eba7 0343 	sub.w	r3, r7, r3, lsl #1
 8001144:	0057      	lsls	r7, r2, #1
 8001146:	eb07 0c02 	add.w	ip, r7, r2
 800114a:	4f36      	ldr	r7, [pc, #216]	; (8001224 <VFDLoadBMP+0x324>)
 800114c:	eb07 074c 	add.w	r7, r7, ip, lsl #1
 8001150:	5cff      	ldrb	r7, [r7, r3]
 8001152:	2301      	movs	r3, #1
 8001154:	40bb      	lsls	r3, r7
 8001156:	4219      	tst	r1, r3
 8001158:	d0e0      	beq.n	800111c <VFDLoadBMP+0x21c>
				GPbuff[2+nxtWrd] = (1 << i);
 800115a:	1ca3      	adds	r3, r4, #2
 800115c:	2701      	movs	r7, #1
 800115e:	40b7      	lsls	r7, r6
 8001160:	f8df c0b8 	ldr.w	ip, [pc, #184]	; 800121c <VFDLoadBMP+0x31c>
 8001164:	f84c 7023 	str.w	r7, [ip, r3, lsl #2]
 8001168:	e7de      	b.n	8001128 <VFDLoadBMP+0x228>
			}
		}

		//16d and 16c in the 4th array(word)
		for(uint8_t i=0;i < 2;i++){
 800116a:	2600      	movs	r6, #0
 800116c:	e007      	b.n	800117e <VFDLoadBMP+0x27e>
			if((uintptr_t)sBMP & (1 << reOrder[EvOd][(i+4)%6])){
				GPbuff[2+nxtWrd] = (1 << i);
			}else{
				GPbuff[2+nxtWrd] = (0 << i);
 800116e:	1ca3      	adds	r3, r4, #2
 8001170:	4f2a      	ldr	r7, [pc, #168]	; (800121c <VFDLoadBMP+0x31c>)
 8001172:	f04f 0c00 	mov.w	ip, #0
 8001176:	f847 c023 	str.w	ip, [r7, r3, lsl #2]
		for(uint8_t i=0;i < 2;i++){
 800117a:	3601      	adds	r6, #1
 800117c:	b2f6      	uxtb	r6, r6
 800117e:	2e01      	cmp	r6, #1
 8001180:	d81c      	bhi.n	80011bc <VFDLoadBMP+0x2bc>
			if((uintptr_t)sBMP & (1 << reOrder[EvOd][(i+4)%6])){
 8001182:	1d37      	adds	r7, r6, #4
 8001184:	4b28      	ldr	r3, [pc, #160]	; (8001228 <VFDLoadBMP+0x328>)
 8001186:	fb83 0307 	smull	r0, r3, r3, r7
 800118a:	eba3 73e7 	sub.w	r3, r3, r7, asr #31
 800118e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001192:	eba7 0343 	sub.w	r3, r7, r3, lsl #1
 8001196:	0057      	lsls	r7, r2, #1
 8001198:	eb07 0c02 	add.w	ip, r7, r2
 800119c:	4f21      	ldr	r7, [pc, #132]	; (8001224 <VFDLoadBMP+0x324>)
 800119e:	eb07 074c 	add.w	r7, r7, ip, lsl #1
 80011a2:	5cff      	ldrb	r7, [r7, r3]
 80011a4:	2301      	movs	r3, #1
 80011a6:	40bb      	lsls	r3, r7
 80011a8:	4219      	tst	r1, r3
 80011aa:	d0e0      	beq.n	800116e <VFDLoadBMP+0x26e>
				GPbuff[2+nxtWrd] = (1 << i);
 80011ac:	1ca3      	adds	r3, r4, #2
 80011ae:	2701      	movs	r7, #1
 80011b0:	40b7      	lsls	r7, r6
 80011b2:	f8df c068 	ldr.w	ip, [pc, #104]	; 800121c <VFDLoadBMP+0x31c>
 80011b6:	f84c 7023 	str.w	r7, [ip, r3, lsl #2]
 80011ba:	e7de      	b.n	800117a <VFDLoadBMP+0x27a>
			}
		}
		sBMP++;
 80011bc:	3101      	adds	r1, #1
for(uint8_t wdCount=0; wdCount < 2;wdCount++){// Do twice
 80011be:	3501      	adds	r5, #1
 80011c0:	b2ed      	uxtb	r5, r5
		nxtWrd = 3;// next time we start the array at GPbuff[3]
 80011c2:	2403      	movs	r4, #3
for(uint8_t wdCount=0; wdCount < 2;wdCount++){// Do twice
 80011c4:	2d01      	cmp	r5, #1
 80011c6:	d804      	bhi.n	80011d2 <VFDLoadBMP+0x2d2>
	if(wdCount){
 80011c8:	2d00      	cmp	r5, #0
 80011ca:	f43f aea3 	beq.w	8000f14 <VFDLoadBMP+0x14>
		for(uint8_t i=0;i < 32;i++){// for 2nd round
 80011ce:	2600      	movs	r6, #0
 80011d0:	e6aa      	b.n	8000f28 <VFDLoadBMP+0x28>
}//for(uint8_t wdCount=0; wdCount < 2;wdCount++)

		//32d and 32c in the 7th buffer array(word)
		for(uint8_t i=0;i < 2;i++){
 80011d2:	2400      	movs	r4, #0
 80011d4:	e004      	b.n	80011e0 <VFDLoadBMP+0x2e0>
			if((uintptr_t)sBMP & (1 << reOrder[EvOd][(i+4)%6])){
				GPbuff[6] = (1 << i);
			}else{
				GPbuff[6] = (0 << i);
 80011d6:	4b11      	ldr	r3, [pc, #68]	; (800121c <VFDLoadBMP+0x31c>)
 80011d8:	2500      	movs	r5, #0
 80011da:	619d      	str	r5, [r3, #24]
		for(uint8_t i=0;i < 2;i++){
 80011dc:	3401      	adds	r4, #1
 80011de:	b2e4      	uxtb	r4, r4
 80011e0:	2c01      	cmp	r4, #1
 80011e2:	d818      	bhi.n	8001216 <VFDLoadBMP+0x316>
			if((uintptr_t)sBMP & (1 << reOrder[EvOd][(i+4)%6])){
 80011e4:	1d25      	adds	r5, r4, #4
 80011e6:	4b10      	ldr	r3, [pc, #64]	; (8001228 <VFDLoadBMP+0x328>)
 80011e8:	fb83 0305 	smull	r0, r3, r3, r5
 80011ec:	eba3 73e5 	sub.w	r3, r3, r5, asr #31
 80011f0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80011f4:	eba5 0343 	sub.w	r3, r5, r3, lsl #1
 80011f8:	0055      	lsls	r5, r2, #1
 80011fa:	18ae      	adds	r6, r5, r2
 80011fc:	4d09      	ldr	r5, [pc, #36]	; (8001224 <VFDLoadBMP+0x324>)
 80011fe:	eb05 0546 	add.w	r5, r5, r6, lsl #1
 8001202:	5ced      	ldrb	r5, [r5, r3]
 8001204:	2301      	movs	r3, #1
 8001206:	40ab      	lsls	r3, r5
 8001208:	4219      	tst	r1, r3
 800120a:	d0e4      	beq.n	80011d6 <VFDLoadBMP+0x2d6>
				GPbuff[6] = (1 << i);
 800120c:	2301      	movs	r3, #1
 800120e:	40a3      	lsls	r3, r4
 8001210:	4d02      	ldr	r5, [pc, #8]	; (800121c <VFDLoadBMP+0x31c>)
 8001212:	61ab      	str	r3, [r5, #24]
 8001214:	e7e2      	b.n	80011dc <VFDLoadBMP+0x2dc>
			}
		}
		sBMP++;
 8001216:	3101      	adds	r1, #1

		//4 bytes on 7th buffer array
		for(uint8_t i=0;i < 30;i++){
 8001218:	2400      	movs	r4, #0
 800121a:	e00e      	b.n	800123a <VFDLoadBMP+0x33a>
 800121c:	20000054 	.word	0x20000054
 8001220:	aaaaaaab 	.word	0xaaaaaaab
 8001224:	08001628 	.word	0x08001628
 8001228:	2aaaaaab 	.word	0x2aaaaaab
			if((uintptr_t)sBMP & (1 << reOrder[EvOd][i%6])){
				GPbuff[6] = (1 << (i+2));
			}else{
				GPbuff[6] = (0 << (i+2));
 800122c:	4d49      	ldr	r5, [pc, #292]	; (8001354 <VFDLoadBMP+0x454>)
 800122e:	2600      	movs	r6, #0
 8001230:	61ae      	str	r6, [r5, #24]
			}
			if((i%6) == 5){// move to next bitmap when we complete previous 6bit BMP
 8001232:	2b05      	cmp	r3, #5
 8001234:	d01c      	beq.n	8001270 <VFDLoadBMP+0x370>
		for(uint8_t i=0;i < 30;i++){
 8001236:	3401      	adds	r4, #1
 8001238:	b2e4      	uxtb	r4, r4
 800123a:	2c1d      	cmp	r4, #29
 800123c:	d81a      	bhi.n	8001274 <VFDLoadBMP+0x374>
			if((uintptr_t)sBMP & (1 << reOrder[EvOd][i%6])){
 800123e:	4b46      	ldr	r3, [pc, #280]	; (8001358 <VFDLoadBMP+0x458>)
 8001240:	fba3 0304 	umull	r0, r3, r3, r4
 8001244:	089b      	lsrs	r3, r3, #2
 8001246:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800124a:	eba4 0343 	sub.w	r3, r4, r3, lsl #1
 800124e:	b2db      	uxtb	r3, r3
 8001250:	0055      	lsls	r5, r2, #1
 8001252:	18ae      	adds	r6, r5, r2
 8001254:	4d41      	ldr	r5, [pc, #260]	; (800135c <VFDLoadBMP+0x45c>)
 8001256:	eb05 0546 	add.w	r5, r5, r6, lsl #1
 800125a:	5cee      	ldrb	r6, [r5, r3]
 800125c:	2501      	movs	r5, #1
 800125e:	40b5      	lsls	r5, r6
 8001260:	4229      	tst	r1, r5
 8001262:	d0e3      	beq.n	800122c <VFDLoadBMP+0x32c>
				GPbuff[6] = (1 << (i+2));
 8001264:	1ca6      	adds	r6, r4, #2
 8001266:	2501      	movs	r5, #1
 8001268:	40b5      	lsls	r5, r6
 800126a:	4e3a      	ldr	r6, [pc, #232]	; (8001354 <VFDLoadBMP+0x454>)
 800126c:	61b5      	str	r5, [r6, #24]
 800126e:	e7e0      	b.n	8001232 <VFDLoadBMP+0x332>
			sBMP++;
 8001270:	3101      	adds	r1, #1
 8001272:	e7e0      	b.n	8001236 <VFDLoadBMP+0x336>
			}
		}

		// 1 byte on 8th buffer array
		for(uint8_t i=0;i < 8;i++){
 8001274:	2400      	movs	r4, #0
 8001276:	e006      	b.n	8001286 <VFDLoadBMP+0x386>
			if((uintptr_t)sBMP & (1 << reOrder[EvOd][i%6])){
				GPbuff[7] = (1 << i);
			}else{
				GPbuff[7] = (0 << i);
 8001278:	4d36      	ldr	r5, [pc, #216]	; (8001354 <VFDLoadBMP+0x454>)
 800127a:	2600      	movs	r6, #0
 800127c:	61ee      	str	r6, [r5, #28]
			}
			if((i%6) == 5){// move to next bitmap when we complete previous 6bit BMP
 800127e:	2b05      	cmp	r3, #5
 8001280:	d01b      	beq.n	80012ba <VFDLoadBMP+0x3ba>
		for(uint8_t i=0;i < 8;i++){
 8001282:	3401      	adds	r4, #1
 8001284:	b2e4      	uxtb	r4, r4
 8001286:	2c07      	cmp	r4, #7
 8001288:	d819      	bhi.n	80012be <VFDLoadBMP+0x3be>
			if((uintptr_t)sBMP & (1 << reOrder[EvOd][i%6])){
 800128a:	4b33      	ldr	r3, [pc, #204]	; (8001358 <VFDLoadBMP+0x458>)
 800128c:	fba3 0304 	umull	r0, r3, r3, r4
 8001290:	089b      	lsrs	r3, r3, #2
 8001292:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001296:	eba4 0343 	sub.w	r3, r4, r3, lsl #1
 800129a:	b2db      	uxtb	r3, r3
 800129c:	0055      	lsls	r5, r2, #1
 800129e:	18ae      	adds	r6, r5, r2
 80012a0:	4d2e      	ldr	r5, [pc, #184]	; (800135c <VFDLoadBMP+0x45c>)
 80012a2:	eb05 0546 	add.w	r5, r5, r6, lsl #1
 80012a6:	5cee      	ldrb	r6, [r5, r3]
 80012a8:	2501      	movs	r5, #1
 80012aa:	40b5      	lsls	r5, r6
 80012ac:	4229      	tst	r1, r5
 80012ae:	d0e3      	beq.n	8001278 <VFDLoadBMP+0x378>
				GPbuff[7] = (1 << i);
 80012b0:	2501      	movs	r5, #1
 80012b2:	40a5      	lsls	r5, r4
 80012b4:	4e27      	ldr	r6, [pc, #156]	; (8001354 <VFDLoadBMP+0x454>)
 80012b6:	61f5      	str	r5, [r6, #28]
 80012b8:	e7e1      	b.n	800127e <VFDLoadBMP+0x37e>
			sBMP++;
 80012ba:	3101      	adds	r1, #1
 80012bc:	e7e1      	b.n	8001282 <VFDLoadBMP+0x382>
			}
		}

		for(uint8_t i=0; i < 4;i++){
 80012be:	2400      	movs	r4, #0
 80012c0:	e004      	b.n	80012cc <VFDLoadBMP+0x3cc>
			if((uintptr_t)sBMP & (1 << reOrder[EvOd][i%6])){
				GPbuff[7] = (1 << (i+8));
			}else{
				GPbuff[7] = (0 << (i+8));
 80012c2:	4b24      	ldr	r3, [pc, #144]	; (8001354 <VFDLoadBMP+0x454>)
 80012c4:	2500      	movs	r5, #0
 80012c6:	61dd      	str	r5, [r3, #28]
		for(uint8_t i=0; i < 4;i++){
 80012c8:	3401      	adds	r4, #1
 80012ca:	b2e4      	uxtb	r4, r4
 80012cc:	2c03      	cmp	r4, #3
 80012ce:	d819      	bhi.n	8001304 <VFDLoadBMP+0x404>
			if((uintptr_t)sBMP & (1 << reOrder[EvOd][i%6])){
 80012d0:	4b21      	ldr	r3, [pc, #132]	; (8001358 <VFDLoadBMP+0x458>)
 80012d2:	fba3 0304 	umull	r0, r3, r3, r4
 80012d6:	089b      	lsrs	r3, r3, #2
 80012d8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80012dc:	eba4 0343 	sub.w	r3, r4, r3, lsl #1
 80012e0:	b2db      	uxtb	r3, r3
 80012e2:	0055      	lsls	r5, r2, #1
 80012e4:	18ae      	adds	r6, r5, r2
 80012e6:	4d1d      	ldr	r5, [pc, #116]	; (800135c <VFDLoadBMP+0x45c>)
 80012e8:	eb05 0546 	add.w	r5, r5, r6, lsl #1
 80012ec:	5ced      	ldrb	r5, [r5, r3]
 80012ee:	2301      	movs	r3, #1
 80012f0:	40ab      	lsls	r3, r5
 80012f2:	4219      	tst	r1, r3
 80012f4:	d0e5      	beq.n	80012c2 <VFDLoadBMP+0x3c2>
				GPbuff[7] = (1 << (i+8));
 80012f6:	f104 0508 	add.w	r5, r4, #8
 80012fa:	2301      	movs	r3, #1
 80012fc:	40ab      	lsls	r3, r5
 80012fe:	4d15      	ldr	r5, [pc, #84]	; (8001354 <VFDLoadBMP+0x454>)
 8001300:	61eb      	str	r3, [r5, #28]
 8001302:	e7e1      	b.n	80012c8 <VFDLoadBMP+0x3c8>
			}
		}

	if(Grid == 52){
 8001304:	f1b8 0f34 	cmp.w	r8, #52	; 0x34
 8001308:	d009      	beq.n	800131e <VFDLoadBMP+0x41e>
			GPbuff[7] = (1 << 12);
			GPbuff[8] = (1 << 31);
	}else{
			if(Grid < 20){
 800130a:	f1b8 0f13 	cmp.w	r8, #19
 800130e:	d80f      	bhi.n	8001330 <VFDLoadBMP+0x430>
				GPbuff[7] = (1 << (Grid+11));
				GPbuff[7] = (1 << (Grid+12));
 8001310:	f108 000c 	add.w	r0, r8, #12
 8001314:	2301      	movs	r3, #1
 8001316:	4083      	lsls	r3, r0
 8001318:	4a0e      	ldr	r2, [pc, #56]	; (8001354 <VFDLoadBMP+0x454>)
 800131a:	61d3      	str	r3, [r2, #28]
 800131c:	e006      	b.n	800132c <VFDLoadBMP+0x42c>
			GPbuff[7] = (1 << 12);
 800131e:	4b0d      	ldr	r3, [pc, #52]	; (8001354 <VFDLoadBMP+0x454>)
 8001320:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001324:	61da      	str	r2, [r3, #28]
			GPbuff[8] = (1 << 31);
 8001326:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800132a:	621a      	str	r2, [r3, #32]
				GPbuff[8] = (1 << (Grid-21));
				GPbuff[8] = (1 << (Grid-20));
			}
	}

}
 800132c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			}else if(Grid == 20){
 8001330:	f1b8 0f14 	cmp.w	r8, #20
 8001334:	d007      	beq.n	8001346 <VFDLoadBMP+0x446>
				GPbuff[8] = (1 << (Grid-20));
 8001336:	f1a8 0014 	sub.w	r0, r8, #20
 800133a:	2301      	movs	r3, #1
 800133c:	fa03 f000 	lsl.w	r0, r3, r0
 8001340:	4b04      	ldr	r3, [pc, #16]	; (8001354 <VFDLoadBMP+0x454>)
 8001342:	6218      	str	r0, [r3, #32]
}
 8001344:	e7f2      	b.n	800132c <VFDLoadBMP+0x42c>
				GPbuff[7] = (1 << 31);
 8001346:	4b03      	ldr	r3, [pc, #12]	; (8001354 <VFDLoadBMP+0x454>)
 8001348:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800134c:	61da      	str	r2, [r3, #28]
				GPbuff[8] = (1 << 0);
 800134e:	2201      	movs	r2, #1
 8001350:	621a      	str	r2, [r3, #32]
 8001352:	e7eb      	b.n	800132c <VFDLoadBMP+0x42c>
 8001354:	20000054 	.word	0x20000054
 8001358:	aaaaaaab 	.word	0xaaaaaaab
 800135c:	08001628 	.word	0x08001628

08001360 <VFDUpdate>:

void VFDUpdate(){
 8001360:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(GPIOE, LD4_Pin, GPIO_PIN_SET);// BLK high
 8001362:	4c07      	ldr	r4, [pc, #28]	; (8001380 <VFDUpdate+0x20>)
 8001364:	2201      	movs	r2, #1
 8001366:	f44f 7180 	mov.w	r1, #256	; 0x100
 800136a:	4620      	mov	r0, r4
 800136c:	f7ff f8a0 	bl	80004b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, LD3_Pin, GPIO_PIN_SET);// LAT high
 8001370:	2201      	movs	r2, #1
 8001372:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001376:	4620      	mov	r0, r4
 8001378:	f7ff f89a 	bl	80004b0 <HAL_GPIO_WritePin>
	for(uint8_t count;count < 256;count++){}
 800137c:	e7fe      	b.n	800137c <VFDUpdate+0x1c>
 800137e:	bf00      	nop
 8001380:	48001000 	.word	0x48001000

08001384 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001384:	b570      	push	{r4, r5, r6, lr}
 8001386:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001388:	2400      	movs	r4, #0
 800138a:	9407      	str	r4, [sp, #28]
 800138c:	9408      	str	r4, [sp, #32]
 800138e:	9409      	str	r4, [sp, #36]	; 0x24
 8001390:	940c      	str	r4, [sp, #48]	; 0x30
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001392:	9401      	str	r4, [sp, #4]
 8001394:	9402      	str	r4, [sp, #8]
 8001396:	9403      	str	r4, [sp, #12]
 8001398:	9404      	str	r4, [sp, #16]
 800139a:	9405      	str	r4, [sp, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800139c:	2502      	movs	r5, #2
 800139e:	9506      	str	r5, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013a0:	2601      	movs	r6, #1
 80013a2:	960a      	str	r6, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013a4:	2310      	movs	r3, #16
 80013a6:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013a8:	950d      	str	r5, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80013aa:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80013ac:	f44f 1320 	mov.w	r3, #2621440	; 0x280000
 80013b0:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013b2:	a806      	add	r0, sp, #24
 80013b4:	f7ff f882 	bl	80004bc <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013b8:	230f      	movs	r3, #15
 80013ba:	9301      	str	r3, [sp, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013bc:	9502      	str	r5, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013be:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013c4:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013c6:	9405      	str	r4, [sp, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80013c8:	4631      	mov	r1, r6
 80013ca:	a801      	add	r0, sp, #4
 80013cc:	f7ff fbc8 	bl	8000b60 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 80013d0:	b010      	add	sp, #64	; 0x40
 80013d2:	bd70      	pop	{r4, r5, r6, pc}

080013d4 <main>:
{
 80013d4:	b508      	push	{r3, lr}
  HAL_Init();
 80013d6:	f7fe ff1b 	bl	8000210 <HAL_Init>
  SystemClock_Config();
 80013da:	f7ff ffd3 	bl	8001384 <SystemClock_Config>
  MX_GPIO_Init();
 80013de:	f7ff fd07 	bl	8000df0 <MX_GPIO_Init>
  MX_SPI2_Init();
 80013e2:	f000 f80b 	bl	80013fc <MX_SPI2_Init>
	VFDLoadBMP(1, img1);
 80013e6:	4903      	ldr	r1, [pc, #12]	; (80013f4 <main+0x20>)
 80013e8:	2001      	movs	r0, #1
 80013ea:	f7ff fd89 	bl	8000f00 <VFDLoadBMP>
	VFDUpdate();
 80013ee:	f7ff ffb7 	bl	8001360 <VFDUpdate>
 80013f2:	bf00      	nop
 80013f4:	20000008 	.word	0x20000008

080013f8 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80013f8:	4770      	bx	lr
	...

080013fc <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80013fc:	b508      	push	{r3, lr}
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80013fe:	4811      	ldr	r0, [pc, #68]	; (8001444 <MX_SPI2_Init+0x48>)
 8001400:	4b11      	ldr	r3, [pc, #68]	; (8001448 <MX_SPI2_Init+0x4c>)
 8001402:	6003      	str	r3, [r0, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001404:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001408:	6043      	str	r3, [r0, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800140a:	2300      	movs	r3, #0
 800140c:	6083      	str	r3, [r0, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 800140e:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 8001412:	60c2      	str	r2, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001414:	2202      	movs	r2, #2
 8001416:	6102      	str	r2, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001418:	2201      	movs	r2, #1
 800141a:	6142      	str	r2, [r0, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800141c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001420:	6182      	str	r2, [r0, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001422:	2210      	movs	r2, #16
 8001424:	61c2      	str	r2, [r0, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001426:	6203      	str	r3, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001428:	6243      	str	r3, [r0, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800142a:	6283      	str	r3, [r0, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 800142c:	2207      	movs	r2, #7
 800142e:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001430:	6303      	str	r3, [r0, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001432:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001434:	f7ff fc68 	bl	8000d08 <HAL_SPI_Init>
 8001438:	b900      	cbnz	r0, 800143c <MX_SPI2_Init+0x40>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800143a:	bd08      	pop	{r3, pc}
    Error_Handler();
 800143c:	f7ff ffdc 	bl	80013f8 <Error_Handler>
}
 8001440:	e7fb      	b.n	800143a <MX_SPI2_Init+0x3e>
 8001442:	bf00      	nop
 8001444:	200000e8 	.word	0x200000e8
 8001448:	40003800 	.word	0x40003800

0800144c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800144c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800144e:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001450:	2300      	movs	r3, #0
 8001452:	9303      	str	r3, [sp, #12]
 8001454:	9304      	str	r3, [sp, #16]
 8001456:	9305      	str	r3, [sp, #20]
 8001458:	9306      	str	r3, [sp, #24]
 800145a:	9307      	str	r3, [sp, #28]
  if(spiHandle->Instance==SPI2)
 800145c:	6802      	ldr	r2, [r0, #0]
 800145e:	4b1e      	ldr	r3, [pc, #120]	; (80014d8 <HAL_SPI_MspInit+0x8c>)
 8001460:	429a      	cmp	r2, r3
 8001462:	d001      	beq.n	8001468 <HAL_SPI_MspInit+0x1c>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001464:	b009      	add	sp, #36	; 0x24
 8001466:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001468:	f503 33ec 	add.w	r3, r3, #120832	; 0x1d800
 800146c:	69da      	ldr	r2, [r3, #28]
 800146e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001472:	61da      	str	r2, [r3, #28]
 8001474:	69da      	ldr	r2, [r3, #28]
 8001476:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800147a:	9200      	str	r2, [sp, #0]
 800147c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800147e:	695a      	ldr	r2, [r3, #20]
 8001480:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001484:	615a      	str	r2, [r3, #20]
 8001486:	695a      	ldr	r2, [r3, #20]
 8001488:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 800148c:	9201      	str	r2, [sp, #4]
 800148e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001490:	695a      	ldr	r2, [r3, #20]
 8001492:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001496:	615a      	str	r2, [r3, #20]
 8001498:	695b      	ldr	r3, [r3, #20]
 800149a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800149e:	9302      	str	r3, [sp, #8]
 80014a0:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80014a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014a6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a8:	2702      	movs	r7, #2
 80014aa:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ac:	2600      	movs	r6, #0
 80014ae:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014b0:	2503      	movs	r5, #3
 80014b2:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80014b4:	2405      	movs	r4, #5
 80014b6:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80014b8:	a903      	add	r1, sp, #12
 80014ba:	4808      	ldr	r0, [pc, #32]	; (80014dc <HAL_SPI_MspInit+0x90>)
 80014bc:	f7fe ff28 	bl	8000310 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80014c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80014c4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c6:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c8:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014ca:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80014cc:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014ce:	a903      	add	r1, sp, #12
 80014d0:	4803      	ldr	r0, [pc, #12]	; (80014e0 <HAL_SPI_MspInit+0x94>)
 80014d2:	f7fe ff1d 	bl	8000310 <HAL_GPIO_Init>
}
 80014d6:	e7c5      	b.n	8001464 <HAL_SPI_MspInit+0x18>
 80014d8:	40003800 	.word	0x40003800
 80014dc:	48001400 	.word	0x48001400
 80014e0:	48000400 	.word	0x48000400

080014e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014e4:	b500      	push	{lr}
 80014e6:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014e8:	4b0c      	ldr	r3, [pc, #48]	; (800151c <HAL_MspInit+0x38>)
 80014ea:	699a      	ldr	r2, [r3, #24]
 80014ec:	f042 0201 	orr.w	r2, r2, #1
 80014f0:	619a      	str	r2, [r3, #24]
 80014f2:	699a      	ldr	r2, [r3, #24]
 80014f4:	f002 0201 	and.w	r2, r2, #1
 80014f8:	9200      	str	r2, [sp, #0]
 80014fa:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014fc:	69da      	ldr	r2, [r3, #28]
 80014fe:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001502:	61da      	str	r2, [r3, #28]
 8001504:	69db      	ldr	r3, [r3, #28]
 8001506:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800150a:	9301      	str	r3, [sp, #4]
 800150c:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800150e:	2007      	movs	r0, #7
 8001510:	f7fe fea2 	bl	8000258 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001514:	b003      	add	sp, #12
 8001516:	f85d fb04 	ldr.w	pc, [sp], #4
 800151a:	bf00      	nop
 800151c:	40021000 	.word	0x40021000

08001520 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001520:	4770      	bx	lr

08001522 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001522:	e7fe      	b.n	8001522 <HardFault_Handler>

08001524 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001524:	e7fe      	b.n	8001524 <MemManage_Handler>

08001526 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001526:	e7fe      	b.n	8001526 <BusFault_Handler>

08001528 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001528:	e7fe      	b.n	8001528 <UsageFault_Handler>

0800152a <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800152a:	4770      	bx	lr

0800152c <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800152c:	4770      	bx	lr

0800152e <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800152e:	4770      	bx	lr

08001530 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001530:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001532:	f7fe fe7f 	bl	8000234 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001536:	bd08      	pop	{r3, pc}

08001538 <SystemInit>:
  */
void SystemInit(void)
{
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001538:	4b05      	ldr	r3, [pc, #20]	; (8001550 <SystemInit+0x18>)
 800153a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800153e:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8001542:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001546:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800154a:	609a      	str	r2, [r3, #8]
#endif
}
 800154c:	4770      	bx	lr
 800154e:	bf00      	nop
 8001550:	e000ed00 	.word	0xe000ed00

08001554 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001554:	f8df d034 	ldr.w	sp, [pc, #52]	; 800158c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001558:	480d      	ldr	r0, [pc, #52]	; (8001590 <LoopForever+0x6>)
  ldr r1, =_edata
 800155a:	490e      	ldr	r1, [pc, #56]	; (8001594 <LoopForever+0xa>)
  ldr r2, =_sidata
 800155c:	4a0e      	ldr	r2, [pc, #56]	; (8001598 <LoopForever+0xe>)
  movs r3, #0
 800155e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001560:	e002      	b.n	8001568 <LoopCopyDataInit>

08001562 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001562:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001564:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001566:	3304      	adds	r3, #4

08001568 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001568:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800156a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800156c:	d3f9      	bcc.n	8001562 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800156e:	4a0b      	ldr	r2, [pc, #44]	; (800159c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001570:	4c0b      	ldr	r4, [pc, #44]	; (80015a0 <LoopForever+0x16>)
  movs r3, #0
 8001572:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001574:	e001      	b.n	800157a <LoopFillZerobss>

08001576 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001576:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001578:	3204      	adds	r2, #4

0800157a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800157a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800157c:	d3fb      	bcc.n	8001576 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800157e:	f7ff ffdb 	bl	8001538 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001582:	f000 f811 	bl	80015a8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001586:	f7ff ff25 	bl	80013d4 <main>

0800158a <LoopForever>:

LoopForever:
    b LoopForever
 800158a:	e7fe      	b.n	800158a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800158c:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8001590:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001594:	20000038 	.word	0x20000038
  ldr r2, =_sidata
 8001598:	08001654 	.word	0x08001654
  ldr r2, =_sbss
 800159c:	20000038 	.word	0x20000038
  ldr r4, =_ebss
 80015a0:	2000014c 	.word	0x2000014c

080015a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80015a4:	e7fe      	b.n	80015a4 <ADC1_2_IRQHandler>
	...

080015a8 <__libc_init_array>:
 80015a8:	b570      	push	{r4, r5, r6, lr}
 80015aa:	4d0d      	ldr	r5, [pc, #52]	; (80015e0 <__libc_init_array+0x38>)
 80015ac:	4c0d      	ldr	r4, [pc, #52]	; (80015e4 <__libc_init_array+0x3c>)
 80015ae:	1b64      	subs	r4, r4, r5
 80015b0:	10a4      	asrs	r4, r4, #2
 80015b2:	2600      	movs	r6, #0
 80015b4:	42a6      	cmp	r6, r4
 80015b6:	d109      	bne.n	80015cc <__libc_init_array+0x24>
 80015b8:	4d0b      	ldr	r5, [pc, #44]	; (80015e8 <__libc_init_array+0x40>)
 80015ba:	4c0c      	ldr	r4, [pc, #48]	; (80015ec <__libc_init_array+0x44>)
 80015bc:	f000 f818 	bl	80015f0 <_init>
 80015c0:	1b64      	subs	r4, r4, r5
 80015c2:	10a4      	asrs	r4, r4, #2
 80015c4:	2600      	movs	r6, #0
 80015c6:	42a6      	cmp	r6, r4
 80015c8:	d105      	bne.n	80015d6 <__libc_init_array+0x2e>
 80015ca:	bd70      	pop	{r4, r5, r6, pc}
 80015cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80015d0:	4798      	blx	r3
 80015d2:	3601      	adds	r6, #1
 80015d4:	e7ee      	b.n	80015b4 <__libc_init_array+0xc>
 80015d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80015da:	4798      	blx	r3
 80015dc:	3601      	adds	r6, #1
 80015de:	e7f2      	b.n	80015c6 <__libc_init_array+0x1e>
 80015e0:	0800164c 	.word	0x0800164c
 80015e4:	0800164c 	.word	0x0800164c
 80015e8:	0800164c 	.word	0x0800164c
 80015ec:	08001650 	.word	0x08001650

080015f0 <_init>:
 80015f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015f2:	bf00      	nop
 80015f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80015f6:	bc08      	pop	{r3}
 80015f8:	469e      	mov	lr, r3
 80015fa:	4770      	bx	lr

080015fc <_fini>:
 80015fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015fe:	bf00      	nop
 8001600:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001602:	bc08      	pop	{r3}
 8001604:	469e      	mov	lr, r3
 8001606:	4770      	bx	lr
