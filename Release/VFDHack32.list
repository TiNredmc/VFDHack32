
VFDHack32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002860  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003bc  080029e8  080029e8  000129e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002da4  08002da4  00012da4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002da8  08002da8  00012da8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000074  20000000  08002dac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
  7 .bss          00000244  20000074  20000074  00020074  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200002b8  200002b8  00020074  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 10 .debug_info   00011a07  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002653  00000000  00000000  00031aab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    0000a4e0  00000000  00000000  000340fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00000b68  00000000  00000000  0003e5de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 00000b20  00000000  00000000  0003f146  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0001f12a  00000000  00000000  0003fc66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00012778  00000000  00000000  0005ed90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000b5cf6  00000000  00000000  00071508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  001271fe  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0000201c  00000000  00000000  00127254  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000074 	.word	0x20000074
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080029d0 	.word	0x080029d0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000078 	.word	0x20000078
 80001c4:	080029d0 	.word	0x080029d0

080001c8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80001cc:	4b0e      	ldr	r3, [pc, #56]	; (8000208 <HAL_InitTick+0x40>)
 80001ce:	7818      	ldrb	r0, [r3, #0]
 80001d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001d4:	fbb3 f3f0 	udiv	r3, r3, r0
 80001d8:	4a0c      	ldr	r2, [pc, #48]	; (800020c <HAL_InitTick+0x44>)
 80001da:	6810      	ldr	r0, [r2, #0]
 80001dc:	fbb0 f0f3 	udiv	r0, r0, r3
 80001e0:	f000 f88e 	bl	8000300 <HAL_SYSTICK_Config>
 80001e4:	b968      	cbnz	r0, 8000202 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80001e6:	2c0f      	cmp	r4, #15
 80001e8:	d901      	bls.n	80001ee <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 80001ea:	2001      	movs	r0, #1
 80001ec:	e00a      	b.n	8000204 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001ee:	2200      	movs	r2, #0
 80001f0:	4621      	mov	r1, r4
 80001f2:	f04f 30ff 	mov.w	r0, #4294967295
 80001f6:	f000 f841 	bl	800027c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80001fa:	4b03      	ldr	r3, [pc, #12]	; (8000208 <HAL_InitTick+0x40>)
 80001fc:	605c      	str	r4, [r3, #4]
  }
   /* Return function status */
  return HAL_OK;
 80001fe:	2000      	movs	r0, #0
 8000200:	e000      	b.n	8000204 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8000202:	2001      	movs	r0, #1
}
 8000204:	bd10      	pop	{r4, pc}
 8000206:	bf00      	nop
 8000208:	20000000 	.word	0x20000000
 800020c:	2000000c 	.word	0x2000000c

08000210 <HAL_Init>:
{
 8000210:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000212:	4a07      	ldr	r2, [pc, #28]	; (8000230 <HAL_Init+0x20>)
 8000214:	6813      	ldr	r3, [r2, #0]
 8000216:	f043 0310 	orr.w	r3, r3, #16
 800021a:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800021c:	2003      	movs	r0, #3
 800021e:	f000 f81b 	bl	8000258 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000222:	200f      	movs	r0, #15
 8000224:	f7ff ffd0 	bl	80001c8 <HAL_InitTick>
  HAL_MspInit();
 8000228:	f002 fa4a 	bl	80026c0 <HAL_MspInit>
}
 800022c:	2000      	movs	r0, #0
 800022e:	bd08      	pop	{r3, pc}
 8000230:	40022000 	.word	0x40022000

08000234 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000234:	4a03      	ldr	r2, [pc, #12]	; (8000244 <HAL_IncTick+0x10>)
 8000236:	6811      	ldr	r1, [r2, #0]
 8000238:	4b03      	ldr	r3, [pc, #12]	; (8000248 <HAL_IncTick+0x14>)
 800023a:	781b      	ldrb	r3, [r3, #0]
 800023c:	440b      	add	r3, r1
 800023e:	6013      	str	r3, [r2, #0]
}
 8000240:	4770      	bx	lr
 8000242:	bf00      	nop
 8000244:	200000f8 	.word	0x200000f8
 8000248:	20000000 	.word	0x20000000

0800024c <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 800024c:	4b01      	ldr	r3, [pc, #4]	; (8000254 <HAL_GetTick+0x8>)
 800024e:	6818      	ldr	r0, [r3, #0]
}
 8000250:	4770      	bx	lr
 8000252:	bf00      	nop
 8000254:	200000f8 	.word	0x200000f8

08000258 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000258:	4a07      	ldr	r2, [pc, #28]	; (8000278 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800025a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800025c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000260:	041b      	lsls	r3, r3, #16
 8000262:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000264:	0200      	lsls	r0, r0, #8
 8000266:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800026a:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 800026c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000270:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000274:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000276:	4770      	bx	lr
 8000278:	e000ed00 	.word	0xe000ed00

0800027c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800027c:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800027e:	4b17      	ldr	r3, [pc, #92]	; (80002dc <HAL_NVIC_SetPriority+0x60>)
 8000280:	68db      	ldr	r3, [r3, #12]
 8000282:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000286:	f1c3 0407 	rsb	r4, r3, #7
 800028a:	2c04      	cmp	r4, #4
 800028c:	bf28      	it	cs
 800028e:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000290:	1d1d      	adds	r5, r3, #4
 8000292:	2d06      	cmp	r5, #6
 8000294:	d918      	bls.n	80002c8 <HAL_NVIC_SetPriority+0x4c>
 8000296:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000298:	f04f 35ff 	mov.w	r5, #4294967295
 800029c:	fa05 f404 	lsl.w	r4, r5, r4
 80002a0:	ea21 0104 	bic.w	r1, r1, r4
 80002a4:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80002a6:	fa05 f303 	lsl.w	r3, r5, r3
 80002aa:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002ae:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 80002b0:	2800      	cmp	r0, #0
 80002b2:	db0b      	blt.n	80002cc <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002b4:	0109      	lsls	r1, r1, #4
 80002b6:	b2c9      	uxtb	r1, r1
 80002b8:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80002bc:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80002c0:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80002c4:	bc30      	pop	{r4, r5}
 80002c6:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002c8:	2300      	movs	r3, #0
 80002ca:	e7e5      	b.n	8000298 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002cc:	f000 000f 	and.w	r0, r0, #15
 80002d0:	0109      	lsls	r1, r1, #4
 80002d2:	b2c9      	uxtb	r1, r1
 80002d4:	4b02      	ldr	r3, [pc, #8]	; (80002e0 <HAL_NVIC_SetPriority+0x64>)
 80002d6:	5419      	strb	r1, [r3, r0]
 80002d8:	e7f4      	b.n	80002c4 <HAL_NVIC_SetPriority+0x48>
 80002da:	bf00      	nop
 80002dc:	e000ed00 	.word	0xe000ed00
 80002e0:	e000ed14 	.word	0xe000ed14

080002e4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80002e4:	2800      	cmp	r0, #0
 80002e6:	db07      	blt.n	80002f8 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80002e8:	f000 021f 	and.w	r2, r0, #31
 80002ec:	0940      	lsrs	r0, r0, #5
 80002ee:	2301      	movs	r3, #1
 80002f0:	4093      	lsls	r3, r2
 80002f2:	4a02      	ldr	r2, [pc, #8]	; (80002fc <HAL_NVIC_EnableIRQ+0x18>)
 80002f4:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80002f8:	4770      	bx	lr
 80002fa:	bf00      	nop
 80002fc:	e000e100 	.word	0xe000e100

08000300 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000300:	3801      	subs	r0, #1
 8000302:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000306:	d20a      	bcs.n	800031e <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000308:	4b06      	ldr	r3, [pc, #24]	; (8000324 <HAL_SYSTICK_Config+0x24>)
 800030a:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800030c:	4a06      	ldr	r2, [pc, #24]	; (8000328 <HAL_SYSTICK_Config+0x28>)
 800030e:	21f0      	movs	r1, #240	; 0xf0
 8000310:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000314:	2000      	movs	r0, #0
 8000316:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000318:	2207      	movs	r2, #7
 800031a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800031c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800031e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000320:	4770      	bx	lr
 8000322:	bf00      	nop
 8000324:	e000e010 	.word	0xe000e010
 8000328:	e000ed00 	.word	0xe000ed00

0800032c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800032c:	b470      	push	{r4, r5, r6}
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800032e:	6c06      	ldr	r6, [r0, #64]	; 0x40
 8000330:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 8000332:	2401      	movs	r4, #1
 8000334:	40b4      	lsls	r4, r6
 8000336:	606c      	str	r4, [r5, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000338:	6804      	ldr	r4, [r0, #0]
 800033a:	6063      	str	r3, [r4, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800033c:	6843      	ldr	r3, [r0, #4]
 800033e:	2b10      	cmp	r3, #16
 8000340:	d005      	beq.n	800034e <DMA_SetConfig+0x22>
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8000342:	6803      	ldr	r3, [r0, #0]
 8000344:	6099      	str	r1, [r3, #8]
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8000346:	6803      	ldr	r3, [r0, #0]
 8000348:	60da      	str	r2, [r3, #12]
  }
}
 800034a:	bc70      	pop	{r4, r5, r6}
 800034c:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 800034e:	6803      	ldr	r3, [r0, #0]
 8000350:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8000352:	6803      	ldr	r3, [r0, #0]
 8000354:	60d9      	str	r1, [r3, #12]
 8000356:	e7f8      	b.n	800034a <DMA_SetConfig+0x1e>

08000358 <DMA_CalcBaseAndBitshift>:
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000358:	6802      	ldr	r2, [r0, #0]
 800035a:	4b0c      	ldr	r3, [pc, #48]	; (800038c <DMA_CalcBaseAndBitshift+0x34>)
 800035c:	429a      	cmp	r2, r3
 800035e:	d80a      	bhi.n	8000376 <DMA_CalcBaseAndBitshift+0x1e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000360:	4b0b      	ldr	r3, [pc, #44]	; (8000390 <DMA_CalcBaseAndBitshift+0x38>)
 8000362:	4413      	add	r3, r2
 8000364:	4a0b      	ldr	r2, [pc, #44]	; (8000394 <DMA_CalcBaseAndBitshift+0x3c>)
 8000366:	fba2 2303 	umull	r2, r3, r2, r3
 800036a:	091b      	lsrs	r3, r3, #4
 800036c:	009b      	lsls	r3, r3, #2
 800036e:	6403      	str	r3, [r0, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8000370:	4b09      	ldr	r3, [pc, #36]	; (8000398 <DMA_CalcBaseAndBitshift+0x40>)
 8000372:	63c3      	str	r3, [r0, #60]	; 0x3c
 8000374:	4770      	bx	lr
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000376:	4b09      	ldr	r3, [pc, #36]	; (800039c <DMA_CalcBaseAndBitshift+0x44>)
 8000378:	4413      	add	r3, r2
 800037a:	4a06      	ldr	r2, [pc, #24]	; (8000394 <DMA_CalcBaseAndBitshift+0x3c>)
 800037c:	fba2 2303 	umull	r2, r3, r2, r3
 8000380:	091b      	lsrs	r3, r3, #4
 8000382:	009b      	lsls	r3, r3, #2
 8000384:	6403      	str	r3, [r0, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8000386:	4b06      	ldr	r3, [pc, #24]	; (80003a0 <DMA_CalcBaseAndBitshift+0x48>)
 8000388:	63c3      	str	r3, [r0, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 800038a:	4770      	bx	lr
 800038c:	40020407 	.word	0x40020407
 8000390:	bffdfff8 	.word	0xbffdfff8
 8000394:	cccccccd 	.word	0xcccccccd
 8000398:	40020000 	.word	0x40020000
 800039c:	bffdfbf8 	.word	0xbffdfbf8
 80003a0:	40020400 	.word	0x40020400

080003a4 <HAL_DMA_Init>:
  if(NULL == hdma)
 80003a4:	b320      	cbz	r0, 80003f0 <HAL_DMA_Init+0x4c>
{ 
 80003a6:	b510      	push	{r4, lr}
 80003a8:	4604      	mov	r4, r0
  hdma->State = HAL_DMA_STATE_BUSY;
 80003aa:	2302      	movs	r3, #2
 80003ac:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  tmp = hdma->Instance->CCR;
 80003b0:	6801      	ldr	r1, [r0, #0]
 80003b2:	680a      	ldr	r2, [r1, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80003b4:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
 80003b8:	f022 0230 	bic.w	r2, r2, #48	; 0x30
  tmp |=  hdma->Init.Direction        |
 80003bc:	6843      	ldr	r3, [r0, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80003be:	6880      	ldr	r0, [r0, #8]
  tmp |=  hdma->Init.Direction        |
 80003c0:	4303      	orrs	r3, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80003c2:	68e0      	ldr	r0, [r4, #12]
 80003c4:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80003c6:	6920      	ldr	r0, [r4, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80003c8:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80003ca:	6960      	ldr	r0, [r4, #20]
 80003cc:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 80003ce:	69a0      	ldr	r0, [r4, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80003d0:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 80003d2:	69e0      	ldr	r0, [r4, #28]
 80003d4:	4303      	orrs	r3, r0
  tmp |=  hdma->Init.Direction        |
 80003d6:	4313      	orrs	r3, r2
  hdma->Instance->CCR = tmp;  
 80003d8:	600b      	str	r3, [r1, #0]
  DMA_CalcBaseAndBitshift(hdma);
 80003da:	4620      	mov	r0, r4
 80003dc:	f7ff ffbc 	bl	8000358 <DMA_CalcBaseAndBitshift>
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80003e0:	2000      	movs	r0, #0
 80003e2:	63a0      	str	r0, [r4, #56]	; 0x38
  hdma->State = HAL_DMA_STATE_READY;
 80003e4:	2301      	movs	r3, #1
 80003e6:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
  hdma->Lock = HAL_UNLOCKED;
 80003ea:	f884 0020 	strb.w	r0, [r4, #32]
}  
 80003ee:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80003f0:	2001      	movs	r0, #1
}  
 80003f2:	4770      	bx	lr

080003f4 <HAL_DMA_Start_IT>:
{
 80003f4:	b538      	push	{r3, r4, r5, lr}
 80003f6:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 80003f8:	f890 0020 	ldrb.w	r0, [r0, #32]
 80003fc:	2801      	cmp	r0, #1
 80003fe:	d031      	beq.n	8000464 <HAL_DMA_Start_IT+0x70>
 8000400:	2001      	movs	r0, #1
 8000402:	f884 0020 	strb.w	r0, [r4, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8000406:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
 800040a:	2801      	cmp	r0, #1
 800040c:	d004      	beq.n	8000418 <HAL_DMA_Start_IT+0x24>
    __HAL_UNLOCK(hdma); 
 800040e:	2300      	movs	r3, #0
 8000410:	f884 3020 	strb.w	r3, [r4, #32]
    status = HAL_BUSY;
 8000414:	2002      	movs	r0, #2
} 
 8000416:	bd38      	pop	{r3, r4, r5, pc}
  	hdma->State = HAL_DMA_STATE_BUSY;
 8000418:	2002      	movs	r0, #2
 800041a:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800041e:	2000      	movs	r0, #0
 8000420:	63a0      	str	r0, [r4, #56]	; 0x38
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000422:	6825      	ldr	r5, [r4, #0]
 8000424:	6828      	ldr	r0, [r5, #0]
 8000426:	f020 0001 	bic.w	r0, r0, #1
 800042a:	6028      	str	r0, [r5, #0]
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800042c:	4620      	mov	r0, r4
 800042e:	f7ff ff7d 	bl	800032c <DMA_SetConfig>
    if(NULL != hdma->XferHalfCpltCallback )
 8000432:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000434:	b15b      	cbz	r3, 800044e <HAL_DMA_Start_IT+0x5a>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000436:	6822      	ldr	r2, [r4, #0]
 8000438:	6813      	ldr	r3, [r2, #0]
 800043a:	f043 030e 	orr.w	r3, r3, #14
 800043e:	6013      	str	r3, [r2, #0]
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8000440:	6822      	ldr	r2, [r4, #0]
 8000442:	6813      	ldr	r3, [r2, #0]
 8000444:	f043 0301 	orr.w	r3, r3, #1
 8000448:	6013      	str	r3, [r2, #0]
	HAL_StatusTypeDef status = HAL_OK;
 800044a:	2000      	movs	r0, #0
 800044c:	e7e3      	b.n	8000416 <HAL_DMA_Start_IT+0x22>
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 800044e:	6822      	ldr	r2, [r4, #0]
 8000450:	6813      	ldr	r3, [r2, #0]
 8000452:	f043 030a 	orr.w	r3, r3, #10
 8000456:	6013      	str	r3, [r2, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000458:	6822      	ldr	r2, [r4, #0]
 800045a:	6813      	ldr	r3, [r2, #0]
 800045c:	f023 0304 	bic.w	r3, r3, #4
 8000460:	6013      	str	r3, [r2, #0]
 8000462:	e7ed      	b.n	8000440 <HAL_DMA_Start_IT+0x4c>
  __HAL_LOCK(hdma);
 8000464:	2002      	movs	r0, #2
 8000466:	e7d6      	b.n	8000416 <HAL_DMA_Start_IT+0x22>

08000468 <HAL_DMA_Abort_IT>:
{  
 8000468:	b508      	push	{r3, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800046a:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 800046e:	2b02      	cmp	r3, #2
 8000470:	d003      	beq.n	800047a <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000472:	2304      	movs	r3, #4
 8000474:	6383      	str	r3, [r0, #56]	; 0x38
    status = HAL_ERROR;
 8000476:	2001      	movs	r0, #1
}
 8000478:	bd08      	pop	{r3, pc}
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800047a:	6802      	ldr	r2, [r0, #0]
 800047c:	6813      	ldr	r3, [r2, #0]
 800047e:	f023 030e 	bic.w	r3, r3, #14
 8000482:	6013      	str	r3, [r2, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000484:	6802      	ldr	r2, [r0, #0]
 8000486:	6813      	ldr	r3, [r2, #0]
 8000488:	f023 0301 	bic.w	r3, r3, #1
 800048c:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800048e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000490:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8000492:	2201      	movs	r2, #1
 8000494:	fa02 f303 	lsl.w	r3, r2, r3
 8000498:	604b      	str	r3, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;
 800049a:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 800049e:	2300      	movs	r3, #0
 80004a0:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 80004a4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80004a6:	b113      	cbz	r3, 80004ae <HAL_DMA_Abort_IT+0x46>
      hdma->XferAbortCallback(hdma);
 80004a8:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 80004aa:	2000      	movs	r0, #0
 80004ac:	e7e4      	b.n	8000478 <HAL_DMA_Abort_IT+0x10>
 80004ae:	2000      	movs	r0, #0
 80004b0:	e7e2      	b.n	8000478 <HAL_DMA_Abort_IT+0x10>

080004b2 <HAL_DMA_IRQHandler>:
{
 80004b2:	b538      	push	{r3, r4, r5, lr}
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80004b4:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80004b6:	681a      	ldr	r2, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80004b8:	6804      	ldr	r4, [r0, #0]
 80004ba:	6825      	ldr	r5, [r4, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80004bc:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80004be:	2304      	movs	r3, #4
 80004c0:	408b      	lsls	r3, r1
 80004c2:	4213      	tst	r3, r2
 80004c4:	d013      	beq.n	80004ee <HAL_DMA_IRQHandler+0x3c>
 80004c6:	f015 0f04 	tst.w	r5, #4
 80004ca:	d010      	beq.n	80004ee <HAL_DMA_IRQHandler+0x3c>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80004cc:	6823      	ldr	r3, [r4, #0]
 80004ce:	f013 0f20 	tst.w	r3, #32
 80004d2:	d103      	bne.n	80004dc <HAL_DMA_IRQHandler+0x2a>
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80004d4:	6823      	ldr	r3, [r4, #0]
 80004d6:	f023 0304 	bic.w	r3, r3, #4
 80004da:	6023      	str	r3, [r4, #0]
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80004dc:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80004de:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80004e0:	2304      	movs	r3, #4
 80004e2:	408b      	lsls	r3, r1
 80004e4:	6053      	str	r3, [r2, #4]
  	if(hdma->XferHalfCpltCallback != NULL)
 80004e6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80004e8:	b103      	cbz	r3, 80004ec <HAL_DMA_IRQHandler+0x3a>
  		hdma->XferHalfCpltCallback(hdma);
 80004ea:	4798      	blx	r3
}  
 80004ec:	bd38      	pop	{r3, r4, r5, pc}
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80004ee:	2302      	movs	r3, #2
 80004f0:	408b      	lsls	r3, r1
 80004f2:	4213      	tst	r3, r2
 80004f4:	d01a      	beq.n	800052c <HAL_DMA_IRQHandler+0x7a>
 80004f6:	f015 0f02 	tst.w	r5, #2
 80004fa:	d017      	beq.n	800052c <HAL_DMA_IRQHandler+0x7a>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80004fc:	6823      	ldr	r3, [r4, #0]
 80004fe:	f013 0f20 	tst.w	r3, #32
 8000502:	d106      	bne.n	8000512 <HAL_DMA_IRQHandler+0x60>
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8000504:	6823      	ldr	r3, [r4, #0]
 8000506:	f023 030a 	bic.w	r3, r3, #10
 800050a:	6023      	str	r3, [r4, #0]
  		hdma->State = HAL_DMA_STATE_READY;
 800050c:	2301      	movs	r3, #1
 800050e:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8000512:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8000514:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8000516:	2302      	movs	r3, #2
 8000518:	408b      	lsls	r3, r1
 800051a:	6053      	str	r3, [r2, #4]
  	__HAL_UNLOCK(hdma);
 800051c:	2300      	movs	r3, #0
 800051e:	f880 3020 	strb.w	r3, [r0, #32]
  	if(hdma->XferCpltCallback != NULL)
 8000522:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000524:	2b00      	cmp	r3, #0
 8000526:	d0e1      	beq.n	80004ec <HAL_DMA_IRQHandler+0x3a>
  		hdma->XferCpltCallback(hdma);
 8000528:	4798      	blx	r3
 800052a:	e7df      	b.n	80004ec <HAL_DMA_IRQHandler+0x3a>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800052c:	2308      	movs	r3, #8
 800052e:	fa03 f101 	lsl.w	r1, r3, r1
 8000532:	4211      	tst	r1, r2
 8000534:	d0da      	beq.n	80004ec <HAL_DMA_IRQHandler+0x3a>
 8000536:	f015 0f08 	tst.w	r5, #8
 800053a:	d0d7      	beq.n	80004ec <HAL_DMA_IRQHandler+0x3a>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800053c:	6823      	ldr	r3, [r4, #0]
 800053e:	f023 030e 	bic.w	r3, r3, #14
 8000542:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000544:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8000546:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8000548:	2301      	movs	r3, #1
 800054a:	fa03 f202 	lsl.w	r2, r3, r2
 800054e:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000550:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;    
 8000552:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma); 
 8000556:	2300      	movs	r3, #0
 8000558:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferErrorCallback != NULL)
 800055c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800055e:	2b00      	cmp	r3, #0
 8000560:	d0c4      	beq.n	80004ec <HAL_DMA_IRQHandler+0x3a>
    	hdma->XferErrorCallback(hdma);
 8000562:	4798      	blx	r3
}  
 8000564:	e7c2      	b.n	80004ec <HAL_DMA_IRQHandler+0x3a>
	...

08000568 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000568:	b4f0      	push	{r4, r5, r6, r7}
 800056a:	b082      	sub	sp, #8
  uint32_t position = 0x00u;
 800056c:	2300      	movs	r3, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800056e:	e05b      	b.n	8000628 <HAL_GPIO_Init+0xc0>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000570:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000572:	005f      	lsls	r7, r3, #1
 8000574:	2503      	movs	r5, #3
 8000576:	40bd      	lsls	r5, r7
 8000578:	ea26 0605 	bic.w	r6, r6, r5
        temp |= (GPIO_Init->Speed << (position * 2u));
 800057c:	68cd      	ldr	r5, [r1, #12]
 800057e:	40bd      	lsls	r5, r7
 8000580:	4335      	orrs	r5, r6
        GPIOx->OSPEEDR = temp;
 8000582:	6085      	str	r5, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000584:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000586:	ea26 0604 	bic.w	r6, r6, r4
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800058a:	684d      	ldr	r5, [r1, #4]
 800058c:	f3c5 1400 	ubfx	r4, r5, #4, #1
 8000590:	409c      	lsls	r4, r3
 8000592:	4334      	orrs	r4, r6
        GPIOx->OTYPER = temp;
 8000594:	6044      	str	r4, [r0, #4]
 8000596:	e055      	b.n	8000644 <HAL_GPIO_Init+0xdc>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000598:	08dd      	lsrs	r5, r3, #3
 800059a:	3508      	adds	r5, #8
 800059c:	f850 7025 	ldr.w	r7, [r0, r5, lsl #2]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80005a0:	f003 0407 	and.w	r4, r3, #7
 80005a4:	00a6      	lsls	r6, r4, #2
 80005a6:	240f      	movs	r4, #15
 80005a8:	40b4      	lsls	r4, r6
 80005aa:	ea27 0704 	bic.w	r7, r7, r4
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80005ae:	690c      	ldr	r4, [r1, #16]
 80005b0:	40b4      	lsls	r4, r6
 80005b2:	433c      	orrs	r4, r7
        GPIOx->AFR[position >> 3u] = temp;
 80005b4:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
 80005b8:	e058      	b.n	800066c <HAL_GPIO_Init+0x104>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80005ba:	2404      	movs	r4, #4
 80005bc:	e000      	b.n	80005c0 <HAL_GPIO_Init+0x58>
 80005be:	2400      	movs	r4, #0
 80005c0:	40b4      	lsls	r4, r6
 80005c2:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 80005c4:	3502      	adds	r5, #2
 80005c6:	4e4c      	ldr	r6, [pc, #304]	; (80006f8 <HAL_GPIO_Init+0x190>)
 80005c8:	f846 4025 	str.w	r4, [r6, r5, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80005cc:	4c4b      	ldr	r4, [pc, #300]	; (80006fc <HAL_GPIO_Init+0x194>)
 80005ce:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 80005d0:	43d4      	mvns	r4, r2
 80005d2:	ea25 0602 	bic.w	r6, r5, r2
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80005d6:	684f      	ldr	r7, [r1, #4]
 80005d8:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 80005dc:	d001      	beq.n	80005e2 <HAL_GPIO_Init+0x7a>
        {
          temp |= iocurrent;
 80005de:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->IMR = temp;
 80005e2:	4d46      	ldr	r5, [pc, #280]	; (80006fc <HAL_GPIO_Init+0x194>)
 80005e4:	602e      	str	r6, [r5, #0]

        temp = EXTI->EMR;
 80005e6:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 80005e8:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80005ec:	684f      	ldr	r7, [r1, #4]
 80005ee:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 80005f2:	d001      	beq.n	80005f8 <HAL_GPIO_Init+0x90>
        {
          temp |= iocurrent;
 80005f4:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->EMR = temp;
 80005f8:	4d40      	ldr	r5, [pc, #256]	; (80006fc <HAL_GPIO_Init+0x194>)
 80005fa:	606e      	str	r6, [r5, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80005fc:	68ad      	ldr	r5, [r5, #8]
        temp &= ~(iocurrent);
 80005fe:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000602:	684f      	ldr	r7, [r1, #4]
 8000604:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8000608:	d001      	beq.n	800060e <HAL_GPIO_Init+0xa6>
        {
          temp |= iocurrent;
 800060a:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR = temp;
 800060e:	4d3b      	ldr	r5, [pc, #236]	; (80006fc <HAL_GPIO_Init+0x194>)
 8000610:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR;
 8000612:	68ed      	ldr	r5, [r5, #12]
        temp &= ~(iocurrent);
 8000614:	402c      	ands	r4, r5
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000616:	684e      	ldr	r6, [r1, #4]
 8000618:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 800061c:	d001      	beq.n	8000622 <HAL_GPIO_Init+0xba>
        {
          temp |= iocurrent;
 800061e:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->FTSR = temp;
 8000622:	4a36      	ldr	r2, [pc, #216]	; (80006fc <HAL_GPIO_Init+0x194>)
 8000624:	60d4      	str	r4, [r2, #12]
      }
    }

    position++;
 8000626:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000628:	680a      	ldr	r2, [r1, #0]
 800062a:	fa32 f403 	lsrs.w	r4, r2, r3
 800062e:	d05f      	beq.n	80006f0 <HAL_GPIO_Init+0x188>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000630:	2401      	movs	r4, #1
 8000632:	409c      	lsls	r4, r3
    if (iocurrent != 0x00u)
 8000634:	4022      	ands	r2, r4
 8000636:	d0f6      	beq.n	8000626 <HAL_GPIO_Init+0xbe>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000638:	684d      	ldr	r5, [r1, #4]
 800063a:	f005 0503 	and.w	r5, r5, #3
 800063e:	3d01      	subs	r5, #1
 8000640:	2d01      	cmp	r5, #1
 8000642:	d995      	bls.n	8000570 <HAL_GPIO_Init+0x8>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000644:	684c      	ldr	r4, [r1, #4]
 8000646:	f004 0403 	and.w	r4, r4, #3
 800064a:	2c03      	cmp	r4, #3
 800064c:	d009      	beq.n	8000662 <HAL_GPIO_Init+0xfa>
        temp = GPIOx->PUPDR;
 800064e:	68c5      	ldr	r5, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000650:	005e      	lsls	r6, r3, #1
 8000652:	2403      	movs	r4, #3
 8000654:	40b4      	lsls	r4, r6
 8000656:	ea25 0504 	bic.w	r5, r5, r4
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800065a:	688c      	ldr	r4, [r1, #8]
 800065c:	40b4      	lsls	r4, r6
 800065e:	432c      	orrs	r4, r5
        GPIOx->PUPDR = temp;
 8000660:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000662:	684c      	ldr	r4, [r1, #4]
 8000664:	f004 0403 	and.w	r4, r4, #3
 8000668:	2c02      	cmp	r4, #2
 800066a:	d095      	beq.n	8000598 <HAL_GPIO_Init+0x30>
      temp = GPIOx->MODER;
 800066c:	6805      	ldr	r5, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800066e:	005e      	lsls	r6, r3, #1
 8000670:	2403      	movs	r4, #3
 8000672:	40b4      	lsls	r4, r6
 8000674:	ea25 0504 	bic.w	r5, r5, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000678:	684c      	ldr	r4, [r1, #4]
 800067a:	f004 0403 	and.w	r4, r4, #3
 800067e:	40b4      	lsls	r4, r6
 8000680:	432c      	orrs	r4, r5
      GPIOx->MODER = temp;
 8000682:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000684:	684c      	ldr	r4, [r1, #4]
 8000686:	f414 3f40 	tst.w	r4, #196608	; 0x30000
 800068a:	d0cc      	beq.n	8000626 <HAL_GPIO_Init+0xbe>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800068c:	4c1c      	ldr	r4, [pc, #112]	; (8000700 <HAL_GPIO_Init+0x198>)
 800068e:	69a5      	ldr	r5, [r4, #24]
 8000690:	f045 0501 	orr.w	r5, r5, #1
 8000694:	61a5      	str	r5, [r4, #24]
 8000696:	69a4      	ldr	r4, [r4, #24]
 8000698:	f004 0401 	and.w	r4, r4, #1
 800069c:	9401      	str	r4, [sp, #4]
 800069e:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 80006a0:	089d      	lsrs	r5, r3, #2
 80006a2:	1cae      	adds	r6, r5, #2
 80006a4:	4c14      	ldr	r4, [pc, #80]	; (80006f8 <HAL_GPIO_Init+0x190>)
 80006a6:	f854 7026 	ldr.w	r7, [r4, r6, lsl #2]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80006aa:	f003 0403 	and.w	r4, r3, #3
 80006ae:	00a6      	lsls	r6, r4, #2
 80006b0:	240f      	movs	r4, #15
 80006b2:	40b4      	lsls	r4, r6
 80006b4:	ea27 0704 	bic.w	r7, r7, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80006b8:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 80006bc:	f43f af7f 	beq.w	80005be <HAL_GPIO_Init+0x56>
 80006c0:	4c10      	ldr	r4, [pc, #64]	; (8000704 <HAL_GPIO_Init+0x19c>)
 80006c2:	42a0      	cmp	r0, r4
 80006c4:	d00e      	beq.n	80006e4 <HAL_GPIO_Init+0x17c>
 80006c6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80006ca:	42a0      	cmp	r0, r4
 80006cc:	d00c      	beq.n	80006e8 <HAL_GPIO_Init+0x180>
 80006ce:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80006d2:	42a0      	cmp	r0, r4
 80006d4:	d00a      	beq.n	80006ec <HAL_GPIO_Init+0x184>
 80006d6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80006da:	42a0      	cmp	r0, r4
 80006dc:	f43f af6d 	beq.w	80005ba <HAL_GPIO_Init+0x52>
 80006e0:	2405      	movs	r4, #5
 80006e2:	e76d      	b.n	80005c0 <HAL_GPIO_Init+0x58>
 80006e4:	2401      	movs	r4, #1
 80006e6:	e76b      	b.n	80005c0 <HAL_GPIO_Init+0x58>
 80006e8:	2402      	movs	r4, #2
 80006ea:	e769      	b.n	80005c0 <HAL_GPIO_Init+0x58>
 80006ec:	2403      	movs	r4, #3
 80006ee:	e767      	b.n	80005c0 <HAL_GPIO_Init+0x58>
  }
}
 80006f0:	b002      	add	sp, #8
 80006f2:	bcf0      	pop	{r4, r5, r6, r7}
 80006f4:	4770      	bx	lr
 80006f6:	bf00      	nop
 80006f8:	40010000 	.word	0x40010000
 80006fc:	40010400 	.word	0x40010400
 8000700:	40021000 	.word	0x40021000
 8000704:	48000400 	.word	0x48000400

08000708 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000708:	b10a      	cbz	r2, 800070e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800070a:	6181      	str	r1, [r0, #24]
 800070c:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800070e:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8000710:	4770      	bx	lr
	...

08000714 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000714:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000716:	4b05      	ldr	r3, [pc, #20]	; (800072c <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8000718:	695b      	ldr	r3, [r3, #20]
 800071a:	4203      	tst	r3, r0
 800071c:	d100      	bne.n	8000720 <HAL_GPIO_EXTI_IRQHandler+0xc>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 800071e:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000720:	4b02      	ldr	r3, [pc, #8]	; (800072c <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8000722:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000724:	f001 fecc 	bl	80024c0 <HAL_GPIO_EXTI_Callback>
}
 8000728:	e7f9      	b.n	800071e <HAL_GPIO_EXTI_IRQHandler+0xa>
 800072a:	bf00      	nop
 800072c:	40010400 	.word	0x40010400

08000730 <HAL_RCC_OscConfig>:
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000730:	2800      	cmp	r0, #0
 8000732:	f000 8301 	beq.w	8000d38 <HAL_RCC_OscConfig+0x608>
{
 8000736:	b570      	push	{r4, r5, r6, lr}
 8000738:	b082      	sub	sp, #8
 800073a:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800073c:	6803      	ldr	r3, [r0, #0]
 800073e:	f013 0f01 	tst.w	r3, #1
 8000742:	d03b      	beq.n	80007bc <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000744:	4bb5      	ldr	r3, [pc, #724]	; (8000a1c <HAL_RCC_OscConfig+0x2ec>)
 8000746:	685b      	ldr	r3, [r3, #4]
 8000748:	f003 030c 	and.w	r3, r3, #12
 800074c:	2b04      	cmp	r3, #4
 800074e:	d01e      	beq.n	800078e <HAL_RCC_OscConfig+0x5e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000750:	4bb2      	ldr	r3, [pc, #712]	; (8000a1c <HAL_RCC_OscConfig+0x2ec>)
 8000752:	685b      	ldr	r3, [r3, #4]
 8000754:	f003 030c 	and.w	r3, r3, #12
 8000758:	2b08      	cmp	r3, #8
 800075a:	d013      	beq.n	8000784 <HAL_RCC_OscConfig+0x54>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800075c:	6863      	ldr	r3, [r4, #4]
 800075e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000762:	d068      	beq.n	8000836 <HAL_RCC_OscConfig+0x106>
 8000764:	2b00      	cmp	r3, #0
 8000766:	f040 8092 	bne.w	800088e <HAL_RCC_OscConfig+0x15e>
 800076a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800076e:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8000772:	681a      	ldr	r2, [r3, #0]
 8000774:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000778:	601a      	str	r2, [r3, #0]
 800077a:	681a      	ldr	r2, [r3, #0]
 800077c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000780:	601a      	str	r2, [r3, #0]
 8000782:	e05d      	b.n	8000840 <HAL_RCC_OscConfig+0x110>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000784:	4ba5      	ldr	r3, [pc, #660]	; (8000a1c <HAL_RCC_OscConfig+0x2ec>)
 8000786:	685b      	ldr	r3, [r3, #4]
 8000788:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800078c:	d0e6      	beq.n	800075c <HAL_RCC_OscConfig+0x2c>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800078e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000792:	fa93 f3a3 	rbit	r3, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000796:	4ba1      	ldr	r3, [pc, #644]	; (8000a1c <HAL_RCC_OscConfig+0x2ec>)
 8000798:	6819      	ldr	r1, [r3, #0]
 800079a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800079e:	fa93 f3a3 	rbit	r3, r3
 80007a2:	fab3 f383 	clz	r3, r3
 80007a6:	f003 031f 	and.w	r3, r3, #31
 80007aa:	2201      	movs	r2, #1
 80007ac:	fa02 f303 	lsl.w	r3, r2, r3
 80007b0:	420b      	tst	r3, r1
 80007b2:	d003      	beq.n	80007bc <HAL_RCC_OscConfig+0x8c>
 80007b4:	6863      	ldr	r3, [r4, #4]
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	f000 82c0 	beq.w	8000d3c <HAL_RCC_OscConfig+0x60c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80007bc:	6823      	ldr	r3, [r4, #0]
 80007be:	f013 0f02 	tst.w	r3, #2
 80007c2:	f000 80c5 	beq.w	8000950 <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80007c6:	4b95      	ldr	r3, [pc, #596]	; (8000a1c <HAL_RCC_OscConfig+0x2ec>)
 80007c8:	685b      	ldr	r3, [r3, #4]
 80007ca:	f013 0f0c 	tst.w	r3, #12
 80007ce:	f000 809c 	beq.w	800090a <HAL_RCC_OscConfig+0x1da>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80007d2:	4b92      	ldr	r3, [pc, #584]	; (8000a1c <HAL_RCC_OscConfig+0x2ec>)
 80007d4:	685b      	ldr	r3, [r3, #4]
 80007d6:	f003 030c 	and.w	r3, r3, #12
 80007da:	2b08      	cmp	r3, #8
 80007dc:	f000 808f 	beq.w	80008fe <HAL_RCC_OscConfig+0x1ce>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80007e0:	6923      	ldr	r3, [r4, #16]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	f000 80f2 	beq.w	80009cc <HAL_RCC_OscConfig+0x29c>
 80007e8:	2201      	movs	r2, #1
 80007ea:	fa92 f3a2 	rbit	r3, r2
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80007ee:	fab3 f383 	clz	r3, r3
 80007f2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80007f6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80007fa:	009b      	lsls	r3, r3, #2
 80007fc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80007fe:	f7ff fd25 	bl	800024c <HAL_GetTick>
 8000802:	4605      	mov	r5, r0
 8000804:	2302      	movs	r3, #2
 8000806:	fa93 f3a3 	rbit	r3, r3
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800080a:	4b84      	ldr	r3, [pc, #528]	; (8000a1c <HAL_RCC_OscConfig+0x2ec>)
 800080c:	6819      	ldr	r1, [r3, #0]
 800080e:	2302      	movs	r3, #2
 8000810:	fa93 f3a3 	rbit	r3, r3
 8000814:	fab3 f383 	clz	r3, r3
 8000818:	f003 031f 	and.w	r3, r3, #31
 800081c:	2201      	movs	r2, #1
 800081e:	fa02 f303 	lsl.w	r3, r2, r3
 8000822:	420b      	tst	r3, r1
 8000824:	f040 80c3 	bne.w	80009ae <HAL_RCC_OscConfig+0x27e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000828:	f7ff fd10 	bl	800024c <HAL_GetTick>
 800082c:	1b40      	subs	r0, r0, r5
 800082e:	2802      	cmp	r0, #2
 8000830:	d9e8      	bls.n	8000804 <HAL_RCC_OscConfig+0xd4>
          {
            return HAL_TIMEOUT;
 8000832:	2003      	movs	r0, #3
 8000834:	e28b      	b.n	8000d4e <HAL_RCC_OscConfig+0x61e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000836:	4a79      	ldr	r2, [pc, #484]	; (8000a1c <HAL_RCC_OscConfig+0x2ec>)
 8000838:	6813      	ldr	r3, [r2, #0]
 800083a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800083e:	6013      	str	r3, [r2, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000840:	4a76      	ldr	r2, [pc, #472]	; (8000a1c <HAL_RCC_OscConfig+0x2ec>)
 8000842:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8000844:	f023 030f 	bic.w	r3, r3, #15
 8000848:	68a1      	ldr	r1, [r4, #8]
 800084a:	430b      	orrs	r3, r1
 800084c:	62d3      	str	r3, [r2, #44]	; 0x2c
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800084e:	6863      	ldr	r3, [r4, #4]
 8000850:	2b00      	cmp	r3, #0
 8000852:	d036      	beq.n	80008c2 <HAL_RCC_OscConfig+0x192>
        tickstart = HAL_GetTick();
 8000854:	f7ff fcfa 	bl	800024c <HAL_GetTick>
 8000858:	4605      	mov	r5, r0
 800085a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800085e:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000862:	4b6e      	ldr	r3, [pc, #440]	; (8000a1c <HAL_RCC_OscConfig+0x2ec>)
 8000864:	6819      	ldr	r1, [r3, #0]
 8000866:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800086a:	fa93 f3a3 	rbit	r3, r3
 800086e:	fab3 f383 	clz	r3, r3
 8000872:	f003 031f 	and.w	r3, r3, #31
 8000876:	2201      	movs	r2, #1
 8000878:	fa02 f303 	lsl.w	r3, r2, r3
 800087c:	420b      	tst	r3, r1
 800087e:	d19d      	bne.n	80007bc <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000880:	f7ff fce4 	bl	800024c <HAL_GetTick>
 8000884:	1b40      	subs	r0, r0, r5
 8000886:	2864      	cmp	r0, #100	; 0x64
 8000888:	d9e7      	bls.n	800085a <HAL_RCC_OscConfig+0x12a>
            return HAL_TIMEOUT;
 800088a:	2003      	movs	r0, #3
 800088c:	e25f      	b.n	8000d4e <HAL_RCC_OscConfig+0x61e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800088e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000892:	d009      	beq.n	80008a8 <HAL_RCC_OscConfig+0x178>
 8000894:	4b61      	ldr	r3, [pc, #388]	; (8000a1c <HAL_RCC_OscConfig+0x2ec>)
 8000896:	681a      	ldr	r2, [r3, #0]
 8000898:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800089c:	601a      	str	r2, [r3, #0]
 800089e:	681a      	ldr	r2, [r3, #0]
 80008a0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80008a4:	601a      	str	r2, [r3, #0]
 80008a6:	e7cb      	b.n	8000840 <HAL_RCC_OscConfig+0x110>
 80008a8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80008ac:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 80008b0:	681a      	ldr	r2, [r3, #0]
 80008b2:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80008b6:	601a      	str	r2, [r3, #0]
 80008b8:	681a      	ldr	r2, [r3, #0]
 80008ba:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80008be:	601a      	str	r2, [r3, #0]
 80008c0:	e7be      	b.n	8000840 <HAL_RCC_OscConfig+0x110>
        tickstart = HAL_GetTick();
 80008c2:	f7ff fcc3 	bl	800024c <HAL_GetTick>
 80008c6:	4605      	mov	r5, r0
 80008c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80008cc:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80008d0:	4b52      	ldr	r3, [pc, #328]	; (8000a1c <HAL_RCC_OscConfig+0x2ec>)
 80008d2:	6819      	ldr	r1, [r3, #0]
 80008d4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80008d8:	fa93 f3a3 	rbit	r3, r3
 80008dc:	fab3 f383 	clz	r3, r3
 80008e0:	f003 031f 	and.w	r3, r3, #31
 80008e4:	2201      	movs	r2, #1
 80008e6:	fa02 f303 	lsl.w	r3, r2, r3
 80008ea:	420b      	tst	r3, r1
 80008ec:	f43f af66 	beq.w	80007bc <HAL_RCC_OscConfig+0x8c>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80008f0:	f7ff fcac 	bl	800024c <HAL_GetTick>
 80008f4:	1b40      	subs	r0, r0, r5
 80008f6:	2864      	cmp	r0, #100	; 0x64
 80008f8:	d9e6      	bls.n	80008c8 <HAL_RCC_OscConfig+0x198>
            return HAL_TIMEOUT;
 80008fa:	2003      	movs	r0, #3
 80008fc:	e227      	b.n	8000d4e <HAL_RCC_OscConfig+0x61e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80008fe:	4b47      	ldr	r3, [pc, #284]	; (8000a1c <HAL_RCC_OscConfig+0x2ec>)
 8000900:	685b      	ldr	r3, [r3, #4]
 8000902:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8000906:	f47f af6b 	bne.w	80007e0 <HAL_RCC_OscConfig+0xb0>
 800090a:	2302      	movs	r3, #2
 800090c:	fa93 f3a3 	rbit	r3, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000910:	4b42      	ldr	r3, [pc, #264]	; (8000a1c <HAL_RCC_OscConfig+0x2ec>)
 8000912:	6819      	ldr	r1, [r3, #0]
 8000914:	2302      	movs	r3, #2
 8000916:	fa93 f3a3 	rbit	r3, r3
 800091a:	fab3 f383 	clz	r3, r3
 800091e:	f003 031f 	and.w	r3, r3, #31
 8000922:	2201      	movs	r2, #1
 8000924:	fa02 f303 	lsl.w	r3, r2, r3
 8000928:	420b      	tst	r3, r1
 800092a:	d003      	beq.n	8000934 <HAL_RCC_OscConfig+0x204>
 800092c:	6923      	ldr	r3, [r4, #16]
 800092e:	4293      	cmp	r3, r2
 8000930:	f040 8206 	bne.w	8000d40 <HAL_RCC_OscConfig+0x610>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000934:	4839      	ldr	r0, [pc, #228]	; (8000a1c <HAL_RCC_OscConfig+0x2ec>)
 8000936:	6803      	ldr	r3, [r0, #0]
 8000938:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800093c:	6961      	ldr	r1, [r4, #20]
 800093e:	22f8      	movs	r2, #248	; 0xf8
 8000940:	fa92 f2a2 	rbit	r2, r2
 8000944:	fab2 f282 	clz	r2, r2
 8000948:	fa01 f202 	lsl.w	r2, r1, r2
 800094c:	4313      	orrs	r3, r2
 800094e:	6003      	str	r3, [r0, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000950:	6823      	ldr	r3, [r4, #0]
 8000952:	f013 0f08 	tst.w	r3, #8
 8000956:	f000 808d 	beq.w	8000a74 <HAL_RCC_OscConfig+0x344>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800095a:	69a3      	ldr	r3, [r4, #24]
 800095c:	2b00      	cmp	r3, #0
 800095e:	d061      	beq.n	8000a24 <HAL_RCC_OscConfig+0x2f4>
 8000960:	2101      	movs	r1, #1
 8000962:	fa91 f2a1 	rbit	r2, r1
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000966:	fab2 f282 	clz	r2, r2
 800096a:	4b2d      	ldr	r3, [pc, #180]	; (8000a20 <HAL_RCC_OscConfig+0x2f0>)
 800096c:	4413      	add	r3, r2
 800096e:	009b      	lsls	r3, r3, #2
 8000970:	6019      	str	r1, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000972:	f7ff fc6b 	bl	800024c <HAL_GetTick>
 8000976:	4605      	mov	r5, r0
 8000978:	2302      	movs	r3, #2
 800097a:	fa93 f2a3 	rbit	r2, r3
 800097e:	fa93 f2a3 	rbit	r2, r3
 8000982:	fa93 f2a3 	rbit	r2, r3
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000986:	4a25      	ldr	r2, [pc, #148]	; (8000a1c <HAL_RCC_OscConfig+0x2ec>)
 8000988:	6a51      	ldr	r1, [r2, #36]	; 0x24
 800098a:	fa93 f3a3 	rbit	r3, r3
 800098e:	fab3 f383 	clz	r3, r3
 8000992:	f003 031f 	and.w	r3, r3, #31
 8000996:	2201      	movs	r2, #1
 8000998:	fa02 f303 	lsl.w	r3, r2, r3
 800099c:	420b      	tst	r3, r1
 800099e:	d169      	bne.n	8000a74 <HAL_RCC_OscConfig+0x344>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80009a0:	f7ff fc54 	bl	800024c <HAL_GetTick>
 80009a4:	1b40      	subs	r0, r0, r5
 80009a6:	2802      	cmp	r0, #2
 80009a8:	d9e6      	bls.n	8000978 <HAL_RCC_OscConfig+0x248>
        {
          return HAL_TIMEOUT;
 80009aa:	2003      	movs	r0, #3
 80009ac:	e1cf      	b.n	8000d4e <HAL_RCC_OscConfig+0x61e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80009ae:	481b      	ldr	r0, [pc, #108]	; (8000a1c <HAL_RCC_OscConfig+0x2ec>)
 80009b0:	6803      	ldr	r3, [r0, #0]
 80009b2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80009b6:	6961      	ldr	r1, [r4, #20]
 80009b8:	22f8      	movs	r2, #248	; 0xf8
 80009ba:	fa92 f2a2 	rbit	r2, r2
 80009be:	fab2 f282 	clz	r2, r2
 80009c2:	fa01 f202 	lsl.w	r2, r1, r2
 80009c6:	4313      	orrs	r3, r2
 80009c8:	6003      	str	r3, [r0, #0]
 80009ca:	e7c1      	b.n	8000950 <HAL_RCC_OscConfig+0x220>
 80009cc:	2301      	movs	r3, #1
 80009ce:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_HSI_DISABLE();
 80009d2:	fab3 f383 	clz	r3, r3
 80009d6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80009da:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80009de:	009b      	lsls	r3, r3, #2
 80009e0:	2200      	movs	r2, #0
 80009e2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80009e4:	f7ff fc32 	bl	800024c <HAL_GetTick>
 80009e8:	4605      	mov	r5, r0
 80009ea:	2302      	movs	r3, #2
 80009ec:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80009f0:	4b0a      	ldr	r3, [pc, #40]	; (8000a1c <HAL_RCC_OscConfig+0x2ec>)
 80009f2:	6819      	ldr	r1, [r3, #0]
 80009f4:	2302      	movs	r3, #2
 80009f6:	fa93 f3a3 	rbit	r3, r3
 80009fa:	fab3 f383 	clz	r3, r3
 80009fe:	f003 031f 	and.w	r3, r3, #31
 8000a02:	2201      	movs	r2, #1
 8000a04:	fa02 f303 	lsl.w	r3, r2, r3
 8000a08:	420b      	tst	r3, r1
 8000a0a:	d0a1      	beq.n	8000950 <HAL_RCC_OscConfig+0x220>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000a0c:	f7ff fc1e 	bl	800024c <HAL_GetTick>
 8000a10:	1b40      	subs	r0, r0, r5
 8000a12:	2802      	cmp	r0, #2
 8000a14:	d9e9      	bls.n	80009ea <HAL_RCC_OscConfig+0x2ba>
            return HAL_TIMEOUT;
 8000a16:	2003      	movs	r0, #3
 8000a18:	e199      	b.n	8000d4e <HAL_RCC_OscConfig+0x61e>
 8000a1a:	bf00      	nop
 8000a1c:	40021000 	.word	0x40021000
 8000a20:	10908120 	.word	0x10908120
 8000a24:	2201      	movs	r2, #1
 8000a26:	fa92 f2a2 	rbit	r2, r2
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000a2a:	fab2 f282 	clz	r2, r2
 8000a2e:	4bb7      	ldr	r3, [pc, #732]	; (8000d0c <HAL_RCC_OscConfig+0x5dc>)
 8000a30:	4413      	add	r3, r2
 8000a32:	009b      	lsls	r3, r3, #2
 8000a34:	2200      	movs	r2, #0
 8000a36:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000a38:	f7ff fc08 	bl	800024c <HAL_GetTick>
 8000a3c:	4605      	mov	r5, r0
 8000a3e:	2302      	movs	r3, #2
 8000a40:	fa93 f2a3 	rbit	r2, r3
 8000a44:	fa93 f2a3 	rbit	r2, r3
 8000a48:	fa93 f2a3 	rbit	r2, r3
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a4c:	4ab0      	ldr	r2, [pc, #704]	; (8000d10 <HAL_RCC_OscConfig+0x5e0>)
 8000a4e:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8000a50:	fa93 f3a3 	rbit	r3, r3
 8000a54:	fab3 f383 	clz	r3, r3
 8000a58:	f003 031f 	and.w	r3, r3, #31
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a62:	420b      	tst	r3, r1
 8000a64:	d006      	beq.n	8000a74 <HAL_RCC_OscConfig+0x344>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a66:	f7ff fbf1 	bl	800024c <HAL_GetTick>
 8000a6a:	1b40      	subs	r0, r0, r5
 8000a6c:	2802      	cmp	r0, #2
 8000a6e:	d9e6      	bls.n	8000a3e <HAL_RCC_OscConfig+0x30e>
        {
          return HAL_TIMEOUT;
 8000a70:	2003      	movs	r0, #3
 8000a72:	e16c      	b.n	8000d4e <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000a74:	6823      	ldr	r3, [r4, #0]
 8000a76:	f013 0f04 	tst.w	r3, #4
 8000a7a:	f000 80a9 	beq.w	8000bd0 <HAL_RCC_OscConfig+0x4a0>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000a7e:	4ba4      	ldr	r3, [pc, #656]	; (8000d10 <HAL_RCC_OscConfig+0x5e0>)
 8000a80:	69db      	ldr	r3, [r3, #28]
 8000a82:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8000a86:	d10b      	bne.n	8000aa0 <HAL_RCC_OscConfig+0x370>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000a88:	4ba1      	ldr	r3, [pc, #644]	; (8000d10 <HAL_RCC_OscConfig+0x5e0>)
 8000a8a:	69da      	ldr	r2, [r3, #28]
 8000a8c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000a90:	61da      	str	r2, [r3, #28]
 8000a92:	69db      	ldr	r3, [r3, #28]
 8000a94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a98:	9301      	str	r3, [sp, #4]
 8000a9a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000a9c:	2501      	movs	r5, #1
 8000a9e:	e000      	b.n	8000aa2 <HAL_RCC_OscConfig+0x372>
    FlagStatus       pwrclkchanged = RESET;
 8000aa0:	2500      	movs	r5, #0
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000aa2:	4b9c      	ldr	r3, [pc, #624]	; (8000d14 <HAL_RCC_OscConfig+0x5e4>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000aaa:	d010      	beq.n	8000ace <HAL_RCC_OscConfig+0x39e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000aac:	68e3      	ldr	r3, [r4, #12]
 8000aae:	2b01      	cmp	r3, #1
 8000ab0:	d021      	beq.n	8000af6 <HAL_RCC_OscConfig+0x3c6>
 8000ab2:	bb63      	cbnz	r3, 8000b0e <HAL_RCC_OscConfig+0x3de>
 8000ab4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000ab8:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8000abc:	6a1a      	ldr	r2, [r3, #32]
 8000abe:	f022 0201 	bic.w	r2, r2, #1
 8000ac2:	621a      	str	r2, [r3, #32]
 8000ac4:	6a1a      	ldr	r2, [r3, #32]
 8000ac6:	f022 0204 	bic.w	r2, r2, #4
 8000aca:	621a      	str	r2, [r3, #32]
 8000acc:	e018      	b.n	8000b00 <HAL_RCC_OscConfig+0x3d0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000ace:	4a91      	ldr	r2, [pc, #580]	; (8000d14 <HAL_RCC_OscConfig+0x5e4>)
 8000ad0:	6813      	ldr	r3, [r2, #0]
 8000ad2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ad6:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8000ad8:	f7ff fbb8 	bl	800024c <HAL_GetTick>
 8000adc:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ade:	4b8d      	ldr	r3, [pc, #564]	; (8000d14 <HAL_RCC_OscConfig+0x5e4>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000ae6:	d1e1      	bne.n	8000aac <HAL_RCC_OscConfig+0x37c>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000ae8:	f7ff fbb0 	bl	800024c <HAL_GetTick>
 8000aec:	1b80      	subs	r0, r0, r6
 8000aee:	2864      	cmp	r0, #100	; 0x64
 8000af0:	d9f5      	bls.n	8000ade <HAL_RCC_OscConfig+0x3ae>
          return HAL_TIMEOUT;
 8000af2:	2003      	movs	r0, #3
 8000af4:	e12b      	b.n	8000d4e <HAL_RCC_OscConfig+0x61e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000af6:	4a86      	ldr	r2, [pc, #536]	; (8000d10 <HAL_RCC_OscConfig+0x5e0>)
 8000af8:	6a13      	ldr	r3, [r2, #32]
 8000afa:	f043 0301 	orr.w	r3, r3, #1
 8000afe:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000b00:	68e3      	ldr	r3, [r4, #12]
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d03c      	beq.n	8000b80 <HAL_RCC_OscConfig+0x450>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000b06:	f7ff fba1 	bl	800024c <HAL_GetTick>
 8000b0a:	4606      	mov	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000b0c:	e02e      	b.n	8000b6c <HAL_RCC_OscConfig+0x43c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b0e:	2b05      	cmp	r3, #5
 8000b10:	d009      	beq.n	8000b26 <HAL_RCC_OscConfig+0x3f6>
 8000b12:	4b7f      	ldr	r3, [pc, #508]	; (8000d10 <HAL_RCC_OscConfig+0x5e0>)
 8000b14:	6a1a      	ldr	r2, [r3, #32]
 8000b16:	f022 0201 	bic.w	r2, r2, #1
 8000b1a:	621a      	str	r2, [r3, #32]
 8000b1c:	6a1a      	ldr	r2, [r3, #32]
 8000b1e:	f022 0204 	bic.w	r2, r2, #4
 8000b22:	621a      	str	r2, [r3, #32]
 8000b24:	e7ec      	b.n	8000b00 <HAL_RCC_OscConfig+0x3d0>
 8000b26:	4b7a      	ldr	r3, [pc, #488]	; (8000d10 <HAL_RCC_OscConfig+0x5e0>)
 8000b28:	6a1a      	ldr	r2, [r3, #32]
 8000b2a:	f042 0204 	orr.w	r2, r2, #4
 8000b2e:	621a      	str	r2, [r3, #32]
 8000b30:	6a1a      	ldr	r2, [r3, #32]
 8000b32:	f042 0201 	orr.w	r2, r2, #1
 8000b36:	621a      	str	r2, [r3, #32]
 8000b38:	e7e2      	b.n	8000b00 <HAL_RCC_OscConfig+0x3d0>
 8000b3a:	2302      	movs	r3, #2
 8000b3c:	fa93 f3a3 	rbit	r3, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000b40:	4b73      	ldr	r3, [pc, #460]	; (8000d10 <HAL_RCC_OscConfig+0x5e0>)
 8000b42:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8000b44:	2302      	movs	r3, #2
 8000b46:	fa93 f3a3 	rbit	r3, r3
 8000b4a:	fab3 f383 	clz	r3, r3
 8000b4e:	f003 031f 	and.w	r3, r3, #31
 8000b52:	2201      	movs	r2, #1
 8000b54:	fa02 f303 	lsl.w	r3, r2, r3
 8000b58:	4219      	tst	r1, r3
 8000b5a:	d138      	bne.n	8000bce <HAL_RCC_OscConfig+0x49e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b5c:	f7ff fb76 	bl	800024c <HAL_GetTick>
 8000b60:	1b80      	subs	r0, r0, r6
 8000b62:	f241 3388 	movw	r3, #5000	; 0x1388
 8000b66:	4298      	cmp	r0, r3
 8000b68:	f200 80ec 	bhi.w	8000d44 <HAL_RCC_OscConfig+0x614>
 8000b6c:	2302      	movs	r3, #2
 8000b6e:	fa93 f2a3 	rbit	r2, r3
 8000b72:	fa93 f3a3 	rbit	r3, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d0df      	beq.n	8000b3a <HAL_RCC_OscConfig+0x40a>
 8000b7a:	4b65      	ldr	r3, [pc, #404]	; (8000d10 <HAL_RCC_OscConfig+0x5e0>)
 8000b7c:	6a19      	ldr	r1, [r3, #32]
 8000b7e:	e7e1      	b.n	8000b44 <HAL_RCC_OscConfig+0x414>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000b80:	f7ff fb64 	bl	800024c <HAL_GetTick>
 8000b84:	4606      	mov	r6, r0
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000b86:	e018      	b.n	8000bba <HAL_RCC_OscConfig+0x48a>
 8000b88:	2302      	movs	r3, #2
 8000b8a:	fa93 f3a3 	rbit	r3, r3
 8000b8e:	4b60      	ldr	r3, [pc, #384]	; (8000d10 <HAL_RCC_OscConfig+0x5e0>)
 8000b90:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8000b92:	2302      	movs	r3, #2
 8000b94:	fa93 f3a3 	rbit	r3, r3
 8000b98:	fab3 f383 	clz	r3, r3
 8000b9c:	f003 031f 	and.w	r3, r3, #31
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba6:	4219      	tst	r1, r3
 8000ba8:	d011      	beq.n	8000bce <HAL_RCC_OscConfig+0x49e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000baa:	f7ff fb4f 	bl	800024c <HAL_GetTick>
 8000bae:	1b80      	subs	r0, r0, r6
 8000bb0:	f241 3388 	movw	r3, #5000	; 0x1388
 8000bb4:	4298      	cmp	r0, r3
 8000bb6:	f200 80c7 	bhi.w	8000d48 <HAL_RCC_OscConfig+0x618>
 8000bba:	2302      	movs	r3, #2
 8000bbc:	fa93 f2a3 	rbit	r2, r3
 8000bc0:	fa93 f3a3 	rbit	r3, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d0df      	beq.n	8000b88 <HAL_RCC_OscConfig+0x458>
 8000bc8:	4b51      	ldr	r3, [pc, #324]	; (8000d10 <HAL_RCC_OscConfig+0x5e0>)
 8000bca:	6a19      	ldr	r1, [r3, #32]
 8000bcc:	e7e1      	b.n	8000b92 <HAL_RCC_OscConfig+0x462>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000bce:	bbb5      	cbnz	r5, 8000c3e <HAL_RCC_OscConfig+0x50e>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000bd0:	69e3      	ldr	r3, [r4, #28]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	f000 80ba 	beq.w	8000d4c <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000bd8:	4a4d      	ldr	r2, [pc, #308]	; (8000d10 <HAL_RCC_OscConfig+0x5e0>)
 8000bda:	6852      	ldr	r2, [r2, #4]
 8000bdc:	f002 020c 	and.w	r2, r2, #12
 8000be0:	2a08      	cmp	r2, #8
 8000be2:	f000 8099 	beq.w	8000d18 <HAL_RCC_OscConfig+0x5e8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000be6:	2b02      	cmp	r3, #2
 8000be8:	d02f      	beq.n	8000c4a <HAL_RCC_OscConfig+0x51a>
 8000bea:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000bee:	fa93 f3a3 	rbit	r3, r3
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000bf2:	fab3 f383 	clz	r3, r3
 8000bf6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000bfa:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000bfe:	009b      	lsls	r3, r3, #2
 8000c00:	2200      	movs	r2, #0
 8000c02:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c04:	f7ff fb22 	bl	800024c <HAL_GetTick>
 8000c08:	4604      	mov	r4, r0
 8000c0a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000c0e:	fa93 f3a3 	rbit	r3, r3
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000c12:	4b3f      	ldr	r3, [pc, #252]	; (8000d10 <HAL_RCC_OscConfig+0x5e0>)
 8000c14:	6819      	ldr	r1, [r3, #0]
 8000c16:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000c1a:	fa93 f3a3 	rbit	r3, r3
 8000c1e:	fab3 f383 	clz	r3, r3
 8000c22:	f003 031f 	and.w	r3, r3, #31
 8000c26:	2201      	movs	r2, #1
 8000c28:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2c:	4219      	tst	r1, r3
 8000c2e:	d06b      	beq.n	8000d08 <HAL_RCC_OscConfig+0x5d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000c30:	f7ff fb0c 	bl	800024c <HAL_GetTick>
 8000c34:	1b00      	subs	r0, r0, r4
 8000c36:	2802      	cmp	r0, #2
 8000c38:	d9e7      	bls.n	8000c0a <HAL_RCC_OscConfig+0x4da>
          {
            return HAL_TIMEOUT;
 8000c3a:	2003      	movs	r0, #3
 8000c3c:	e087      	b.n	8000d4e <HAL_RCC_OscConfig+0x61e>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000c3e:	4a34      	ldr	r2, [pc, #208]	; (8000d10 <HAL_RCC_OscConfig+0x5e0>)
 8000c40:	69d3      	ldr	r3, [r2, #28]
 8000c42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000c46:	61d3      	str	r3, [r2, #28]
 8000c48:	e7c2      	b.n	8000bd0 <HAL_RCC_OscConfig+0x4a0>
 8000c4a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000c4e:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8000c52:	fab3 f383 	clz	r3, r3
 8000c56:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000c5a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000c5e:	009b      	lsls	r3, r3, #2
 8000c60:	2200      	movs	r2, #0
 8000c62:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000c64:	f7ff faf2 	bl	800024c <HAL_GetTick>
 8000c68:	4605      	mov	r5, r0
 8000c6a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000c6e:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000c72:	4b27      	ldr	r3, [pc, #156]	; (8000d10 <HAL_RCC_OscConfig+0x5e0>)
 8000c74:	6819      	ldr	r1, [r3, #0]
 8000c76:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000c7a:	fa93 f3a3 	rbit	r3, r3
 8000c7e:	fab3 f383 	clz	r3, r3
 8000c82:	f003 031f 	and.w	r3, r3, #31
 8000c86:	2201      	movs	r2, #1
 8000c88:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8c:	4219      	tst	r1, r3
 8000c8e:	d006      	beq.n	8000c9e <HAL_RCC_OscConfig+0x56e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000c90:	f7ff fadc 	bl	800024c <HAL_GetTick>
 8000c94:	1b40      	subs	r0, r0, r5
 8000c96:	2802      	cmp	r0, #2
 8000c98:	d9e7      	bls.n	8000c6a <HAL_RCC_OscConfig+0x53a>
            return HAL_TIMEOUT;
 8000c9a:	2003      	movs	r0, #3
 8000c9c:	e057      	b.n	8000d4e <HAL_RCC_OscConfig+0x61e>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000c9e:	491c      	ldr	r1, [pc, #112]	; (8000d10 <HAL_RCC_OscConfig+0x5e0>)
 8000ca0:	684b      	ldr	r3, [r1, #4]
 8000ca2:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 8000ca6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000ca8:	6a20      	ldr	r0, [r4, #32]
 8000caa:	4302      	orrs	r2, r0
 8000cac:	4313      	orrs	r3, r2
 8000cae:	604b      	str	r3, [r1, #4]
 8000cb0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000cb4:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8000cb8:	fab3 f383 	clz	r3, r3
 8000cbc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000cc0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000cc4:	009b      	lsls	r3, r3, #2
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000cca:	f7ff fabf 	bl	800024c <HAL_GetTick>
 8000cce:	4604      	mov	r4, r0
 8000cd0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000cd4:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000cd8:	4b0d      	ldr	r3, [pc, #52]	; (8000d10 <HAL_RCC_OscConfig+0x5e0>)
 8000cda:	6819      	ldr	r1, [r3, #0]
 8000cdc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000ce0:	fa93 f3a3 	rbit	r3, r3
 8000ce4:	fab3 f383 	clz	r3, r3
 8000ce8:	f003 031f 	and.w	r3, r3, #31
 8000cec:	2201      	movs	r2, #1
 8000cee:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf2:	4219      	tst	r1, r3
 8000cf4:	d106      	bne.n	8000d04 <HAL_RCC_OscConfig+0x5d4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000cf6:	f7ff faa9 	bl	800024c <HAL_GetTick>
 8000cfa:	1b00      	subs	r0, r0, r4
 8000cfc:	2802      	cmp	r0, #2
 8000cfe:	d9e7      	bls.n	8000cd0 <HAL_RCC_OscConfig+0x5a0>
            return HAL_TIMEOUT;
 8000d00:	2003      	movs	r0, #3
 8000d02:	e024      	b.n	8000d4e <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 8000d04:	2000      	movs	r0, #0
 8000d06:	e022      	b.n	8000d4e <HAL_RCC_OscConfig+0x61e>
 8000d08:	2000      	movs	r0, #0
 8000d0a:	e020      	b.n	8000d4e <HAL_RCC_OscConfig+0x61e>
 8000d0c:	10908120 	.word	0x10908120
 8000d10:	40021000 	.word	0x40021000
 8000d14:	40007000 	.word	0x40007000
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000d18:	2b01      	cmp	r3, #1
 8000d1a:	d01a      	beq.n	8000d52 <HAL_RCC_OscConfig+0x622>
        pll_config = RCC->CFGR;
 8000d1c:	4b10      	ldr	r3, [pc, #64]	; (8000d60 <HAL_RCC_OscConfig+0x630>)
 8000d1e:	685b      	ldr	r3, [r3, #4]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8000d20:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8000d24:	6a22      	ldr	r2, [r4, #32]
 8000d26:	4291      	cmp	r1, r2
 8000d28:	d115      	bne.n	8000d56 <HAL_RCC_OscConfig+0x626>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8000d2a:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8000d2e:	6a62      	ldr	r2, [r4, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8000d30:	4293      	cmp	r3, r2
 8000d32:	d112      	bne.n	8000d5a <HAL_RCC_OscConfig+0x62a>
  return HAL_OK;
 8000d34:	2000      	movs	r0, #0
 8000d36:	e00a      	b.n	8000d4e <HAL_RCC_OscConfig+0x61e>
    return HAL_ERROR;
 8000d38:	2001      	movs	r0, #1
}
 8000d3a:	4770      	bx	lr
        return HAL_ERROR;
 8000d3c:	2001      	movs	r0, #1
 8000d3e:	e006      	b.n	8000d4e <HAL_RCC_OscConfig+0x61e>
        return HAL_ERROR;
 8000d40:	2001      	movs	r0, #1
 8000d42:	e004      	b.n	8000d4e <HAL_RCC_OscConfig+0x61e>
          return HAL_TIMEOUT;
 8000d44:	2003      	movs	r0, #3
 8000d46:	e002      	b.n	8000d4e <HAL_RCC_OscConfig+0x61e>
          return HAL_TIMEOUT;
 8000d48:	2003      	movs	r0, #3
 8000d4a:	e000      	b.n	8000d4e <HAL_RCC_OscConfig+0x61e>
  return HAL_OK;
 8000d4c:	2000      	movs	r0, #0
}
 8000d4e:	b002      	add	sp, #8
 8000d50:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8000d52:	2001      	movs	r0, #1
 8000d54:	e7fb      	b.n	8000d4e <HAL_RCC_OscConfig+0x61e>
          return HAL_ERROR;
 8000d56:	2001      	movs	r0, #1
 8000d58:	e7f9      	b.n	8000d4e <HAL_RCC_OscConfig+0x61e>
 8000d5a:	2001      	movs	r0, #1
 8000d5c:	e7f7      	b.n	8000d4e <HAL_RCC_OscConfig+0x61e>
 8000d5e:	bf00      	nop
 8000d60:	40021000 	.word	0x40021000

08000d64 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 8000d64:	4b17      	ldr	r3, [pc, #92]	; (8000dc4 <HAL_RCC_GetSysClockFreq+0x60>)
 8000d66:	685b      	ldr	r3, [r3, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000d68:	f003 020c 	and.w	r2, r3, #12
 8000d6c:	2a08      	cmp	r2, #8
 8000d6e:	d001      	beq.n	8000d74 <HAL_RCC_GetSysClockFreq+0x10>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8000d70:	4815      	ldr	r0, [pc, #84]	; (8000dc8 <HAL_RCC_GetSysClockFreq+0x64>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000d72:	4770      	bx	lr
{
 8000d74:	b410      	push	{r4}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8000d76:	f403 1170 	and.w	r1, r3, #3932160	; 0x3c0000
 8000d7a:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8000d7e:	fa92 f2a2 	rbit	r2, r2
 8000d82:	fab2 f282 	clz	r2, r2
 8000d86:	fa21 f202 	lsr.w	r2, r1, r2
 8000d8a:	4c10      	ldr	r4, [pc, #64]	; (8000dcc <HAL_RCC_GetSysClockFreq+0x68>)
 8000d8c:	5ca0      	ldrb	r0, [r4, r2]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8000d8e:	4a0d      	ldr	r2, [pc, #52]	; (8000dc4 <HAL_RCC_GetSysClockFreq+0x60>)
 8000d90:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000d92:	f002 020f 	and.w	r2, r2, #15
 8000d96:	210f      	movs	r1, #15
 8000d98:	fa91 f1a1 	rbit	r1, r1
 8000d9c:	fab1 f181 	clz	r1, r1
 8000da0:	40ca      	lsrs	r2, r1
 8000da2:	4422      	add	r2, r4
 8000da4:	7c12      	ldrb	r2, [r2, #16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8000da6:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8000daa:	d007      	beq.n	8000dbc <HAL_RCC_GetSysClockFreq+0x58>
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8000dac:	4b06      	ldr	r3, [pc, #24]	; (8000dc8 <HAL_RCC_GetSysClockFreq+0x64>)
 8000dae:	fbb3 f3f2 	udiv	r3, r3, r2
 8000db2:	fb00 f003 	mul.w	r0, r0, r3
}
 8000db6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000dba:	4770      	bx	lr
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8000dbc:	4b04      	ldr	r3, [pc, #16]	; (8000dd0 <HAL_RCC_GetSysClockFreq+0x6c>)
 8000dbe:	fb03 f000 	mul.w	r0, r3, r0
 8000dc2:	e7f8      	b.n	8000db6 <HAL_RCC_GetSysClockFreq+0x52>
 8000dc4:	40021000 	.word	0x40021000
 8000dc8:	007a1200 	.word	0x007a1200
 8000dcc:	080029e8 	.word	0x080029e8
 8000dd0:	003d0900 	.word	0x003d0900

08000dd4 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8000dd4:	2800      	cmp	r0, #0
 8000dd6:	f000 80be 	beq.w	8000f56 <HAL_RCC_ClockConfig+0x182>
{
 8000dda:	b570      	push	{r4, r5, r6, lr}
 8000ddc:	460d      	mov	r5, r1
 8000dde:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000de0:	4b61      	ldr	r3, [pc, #388]	; (8000f68 <HAL_RCC_ClockConfig+0x194>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	f003 0307 	and.w	r3, r3, #7
 8000de8:	428b      	cmp	r3, r1
 8000dea:	d20b      	bcs.n	8000e04 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000dec:	4a5e      	ldr	r2, [pc, #376]	; (8000f68 <HAL_RCC_ClockConfig+0x194>)
 8000dee:	6813      	ldr	r3, [r2, #0]
 8000df0:	f023 0307 	bic.w	r3, r3, #7
 8000df4:	430b      	orrs	r3, r1
 8000df6:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000df8:	6813      	ldr	r3, [r2, #0]
 8000dfa:	f003 0307 	and.w	r3, r3, #7
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	f040 80ab 	bne.w	8000f5a <HAL_RCC_ClockConfig+0x186>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000e04:	6823      	ldr	r3, [r4, #0]
 8000e06:	f013 0f02 	tst.w	r3, #2
 8000e0a:	d006      	beq.n	8000e1a <HAL_RCC_ClockConfig+0x46>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000e0c:	4a57      	ldr	r2, [pc, #348]	; (8000f6c <HAL_RCC_ClockConfig+0x198>)
 8000e0e:	6853      	ldr	r3, [r2, #4]
 8000e10:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000e14:	68a1      	ldr	r1, [r4, #8]
 8000e16:	430b      	orrs	r3, r1
 8000e18:	6053      	str	r3, [r2, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000e1a:	6823      	ldr	r3, [r4, #0]
 8000e1c:	f013 0f01 	tst.w	r3, #1
 8000e20:	d05a      	beq.n	8000ed8 <HAL_RCC_ClockConfig+0x104>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000e22:	6863      	ldr	r3, [r4, #4]
 8000e24:	2b01      	cmp	r3, #1
 8000e26:	d02d      	beq.n	8000e84 <HAL_RCC_ClockConfig+0xb0>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000e28:	2b02      	cmp	r3, #2
 8000e2a:	d040      	beq.n	8000eae <HAL_RCC_ClockConfig+0xda>
 8000e2c:	2202      	movs	r2, #2
 8000e2e:	fa92 f2a2 	rbit	r2, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e32:	4a4e      	ldr	r2, [pc, #312]	; (8000f6c <HAL_RCC_ClockConfig+0x198>)
 8000e34:	6810      	ldr	r0, [r2, #0]
 8000e36:	2202      	movs	r2, #2
 8000e38:	fa92 f2a2 	rbit	r2, r2
 8000e3c:	fab2 f282 	clz	r2, r2
 8000e40:	f002 021f 	and.w	r2, r2, #31
 8000e44:	2101      	movs	r1, #1
 8000e46:	fa01 f202 	lsl.w	r2, r1, r2
 8000e4a:	4210      	tst	r0, r2
 8000e4c:	f000 8087 	beq.w	8000f5e <HAL_RCC_ClockConfig+0x18a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000e50:	4946      	ldr	r1, [pc, #280]	; (8000f6c <HAL_RCC_ClockConfig+0x198>)
 8000e52:	684a      	ldr	r2, [r1, #4]
 8000e54:	f022 0203 	bic.w	r2, r2, #3
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8000e5c:	f7ff f9f6 	bl	800024c <HAL_GetTick>
 8000e60:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000e62:	4b42      	ldr	r3, [pc, #264]	; (8000f6c <HAL_RCC_ClockConfig+0x198>)
 8000e64:	685b      	ldr	r3, [r3, #4]
 8000e66:	f003 030c 	and.w	r3, r3, #12
 8000e6a:	6862      	ldr	r2, [r4, #4]
 8000e6c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000e70:	d032      	beq.n	8000ed8 <HAL_RCC_ClockConfig+0x104>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e72:	f7ff f9eb 	bl	800024c <HAL_GetTick>
 8000e76:	1b80      	subs	r0, r0, r6
 8000e78:	f241 3388 	movw	r3, #5000	; 0x1388
 8000e7c:	4298      	cmp	r0, r3
 8000e7e:	d9f0      	bls.n	8000e62 <HAL_RCC_ClockConfig+0x8e>
        return HAL_TIMEOUT;
 8000e80:	2003      	movs	r0, #3
 8000e82:	e067      	b.n	8000f54 <HAL_RCC_ClockConfig+0x180>
 8000e84:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000e88:	fa92 f2a2 	rbit	r2, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e8c:	4a37      	ldr	r2, [pc, #220]	; (8000f6c <HAL_RCC_ClockConfig+0x198>)
 8000e8e:	6810      	ldr	r0, [r2, #0]
 8000e90:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000e94:	fa92 f2a2 	rbit	r2, r2
 8000e98:	fab2 f282 	clz	r2, r2
 8000e9c:	f002 021f 	and.w	r2, r2, #31
 8000ea0:	2101      	movs	r1, #1
 8000ea2:	fa01 f202 	lsl.w	r2, r1, r2
 8000ea6:	4202      	tst	r2, r0
 8000ea8:	d1d2      	bne.n	8000e50 <HAL_RCC_ClockConfig+0x7c>
        return HAL_ERROR;
 8000eaa:	2001      	movs	r0, #1
 8000eac:	e052      	b.n	8000f54 <HAL_RCC_ClockConfig+0x180>
 8000eae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000eb2:	fa92 f2a2 	rbit	r2, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000eb6:	4a2d      	ldr	r2, [pc, #180]	; (8000f6c <HAL_RCC_ClockConfig+0x198>)
 8000eb8:	6810      	ldr	r0, [r2, #0]
 8000eba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000ebe:	fa92 f2a2 	rbit	r2, r2
 8000ec2:	fab2 f282 	clz	r2, r2
 8000ec6:	f002 021f 	and.w	r2, r2, #31
 8000eca:	2101      	movs	r1, #1
 8000ecc:	fa01 f202 	lsl.w	r2, r1, r2
 8000ed0:	4210      	tst	r0, r2
 8000ed2:	d1bd      	bne.n	8000e50 <HAL_RCC_ClockConfig+0x7c>
        return HAL_ERROR;
 8000ed4:	2001      	movs	r0, #1
 8000ed6:	e03d      	b.n	8000f54 <HAL_RCC_ClockConfig+0x180>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000ed8:	4b23      	ldr	r3, [pc, #140]	; (8000f68 <HAL_RCC_ClockConfig+0x194>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	f003 0307 	and.w	r3, r3, #7
 8000ee0:	42ab      	cmp	r3, r5
 8000ee2:	d90a      	bls.n	8000efa <HAL_RCC_ClockConfig+0x126>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000ee4:	4a20      	ldr	r2, [pc, #128]	; (8000f68 <HAL_RCC_ClockConfig+0x194>)
 8000ee6:	6813      	ldr	r3, [r2, #0]
 8000ee8:	f023 0307 	bic.w	r3, r3, #7
 8000eec:	432b      	orrs	r3, r5
 8000eee:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000ef0:	6813      	ldr	r3, [r2, #0]
 8000ef2:	f003 0307 	and.w	r3, r3, #7
 8000ef6:	42ab      	cmp	r3, r5
 8000ef8:	d133      	bne.n	8000f62 <HAL_RCC_ClockConfig+0x18e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000efa:	6823      	ldr	r3, [r4, #0]
 8000efc:	f013 0f04 	tst.w	r3, #4
 8000f00:	d006      	beq.n	8000f10 <HAL_RCC_ClockConfig+0x13c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000f02:	4a1a      	ldr	r2, [pc, #104]	; (8000f6c <HAL_RCC_ClockConfig+0x198>)
 8000f04:	6853      	ldr	r3, [r2, #4]
 8000f06:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000f0a:	68e1      	ldr	r1, [r4, #12]
 8000f0c:	430b      	orrs	r3, r1
 8000f0e:	6053      	str	r3, [r2, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000f10:	6823      	ldr	r3, [r4, #0]
 8000f12:	f013 0f08 	tst.w	r3, #8
 8000f16:	d007      	beq.n	8000f28 <HAL_RCC_ClockConfig+0x154>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000f18:	4a14      	ldr	r2, [pc, #80]	; (8000f6c <HAL_RCC_ClockConfig+0x198>)
 8000f1a:	6853      	ldr	r3, [r2, #4]
 8000f1c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000f20:	6921      	ldr	r1, [r4, #16]
 8000f22:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000f26:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8000f28:	f7ff ff1c 	bl	8000d64 <HAL_RCC_GetSysClockFreq>
 8000f2c:	4b0f      	ldr	r3, [pc, #60]	; (8000f6c <HAL_RCC_ClockConfig+0x198>)
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000f34:	22f0      	movs	r2, #240	; 0xf0
 8000f36:	fa92 f2a2 	rbit	r2, r2
 8000f3a:	fab2 f282 	clz	r2, r2
 8000f3e:	40d3      	lsrs	r3, r2
 8000f40:	4a0b      	ldr	r2, [pc, #44]	; (8000f70 <HAL_RCC_ClockConfig+0x19c>)
 8000f42:	5cd3      	ldrb	r3, [r2, r3]
 8000f44:	40d8      	lsrs	r0, r3
 8000f46:	4b0b      	ldr	r3, [pc, #44]	; (8000f74 <HAL_RCC_ClockConfig+0x1a0>)
 8000f48:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8000f4a:	4b0b      	ldr	r3, [pc, #44]	; (8000f78 <HAL_RCC_ClockConfig+0x1a4>)
 8000f4c:	6818      	ldr	r0, [r3, #0]
 8000f4e:	f7ff f93b 	bl	80001c8 <HAL_InitTick>
  return HAL_OK;
 8000f52:	2000      	movs	r0, #0
}
 8000f54:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8000f56:	2001      	movs	r0, #1
}
 8000f58:	4770      	bx	lr
      return HAL_ERROR;
 8000f5a:	2001      	movs	r0, #1
 8000f5c:	e7fa      	b.n	8000f54 <HAL_RCC_ClockConfig+0x180>
        return HAL_ERROR;
 8000f5e:	2001      	movs	r0, #1
 8000f60:	e7f8      	b.n	8000f54 <HAL_RCC_ClockConfig+0x180>
      return HAL_ERROR;
 8000f62:	2001      	movs	r0, #1
 8000f64:	e7f6      	b.n	8000f54 <HAL_RCC_ClockConfig+0x180>
 8000f66:	bf00      	nop
 8000f68:	40022000 	.word	0x40022000
 8000f6c:	40021000 	.word	0x40021000
 8000f70:	08002d2c 	.word	0x08002d2c
 8000f74:	2000000c 	.word	0x2000000c
 8000f78:	20000004 	.word	0x20000004

08000f7c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8000f7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f80:	b082      	sub	sp, #8
 8000f82:	4605      	mov	r5, r0
 8000f84:	4688      	mov	r8, r1
 8000f86:	4617      	mov	r7, r2
 8000f88:	461e      	mov	r6, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8000f8a:	f7ff f95f 	bl	800024c <HAL_GetTick>
 8000f8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000f90:	1a1b      	subs	r3, r3, r0
 8000f92:	eb03 0906 	add.w	r9, r3, r6
  tmp_tickstart = HAL_GetTick();
 8000f96:	f7ff f959 	bl	800024c <HAL_GetTick>
 8000f9a:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8000f9c:	4b2a      	ldr	r3, [pc, #168]	; (8001048 <SPI_WaitFlagStateUntilTimeout+0xcc>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8000fa4:	fb09 f303 	mul.w	r3, r9, r3
 8000fa8:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8000faa:	682b      	ldr	r3, [r5, #0]
 8000fac:	689c      	ldr	r4, [r3, #8]
 8000fae:	ea38 0304 	bics.w	r3, r8, r4
 8000fb2:	bf0c      	ite	eq
 8000fb4:	2401      	moveq	r4, #1
 8000fb6:	2400      	movne	r4, #0
 8000fb8:	42bc      	cmp	r4, r7
 8000fba:	d040      	beq.n	800103e <SPI_WaitFlagStateUntilTimeout+0xc2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8000fbc:	f1b6 3fff 	cmp.w	r6, #4294967295
 8000fc0:	d0f3      	beq.n	8000faa <SPI_WaitFlagStateUntilTimeout+0x2e>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8000fc2:	f7ff f943 	bl	800024c <HAL_GetTick>
 8000fc6:	eba0 000a 	sub.w	r0, r0, sl
 8000fca:	4548      	cmp	r0, r9
 8000fcc:	d20a      	bcs.n	8000fe4 <SPI_WaitFlagStateUntilTimeout+0x68>
 8000fce:	f1b9 0f00 	cmp.w	r9, #0
 8000fd2:	d007      	beq.n	8000fe4 <SPI_WaitFlagStateUntilTimeout+0x68>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8000fd4:	9a01      	ldr	r2, [sp, #4]
 8000fd6:	b102      	cbz	r2, 8000fda <SPI_WaitFlagStateUntilTimeout+0x5e>
 8000fd8:	464a      	mov	r2, r9
      {
        tmp_timeout = 0U;
      }
      count--;
 8000fda:	9b01      	ldr	r3, [sp, #4]
 8000fdc:	3b01      	subs	r3, #1
 8000fde:	9301      	str	r3, [sp, #4]
 8000fe0:	4691      	mov	r9, r2
 8000fe2:	e7e2      	b.n	8000faa <SPI_WaitFlagStateUntilTimeout+0x2e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8000fe4:	682a      	ldr	r2, [r5, #0]
 8000fe6:	6853      	ldr	r3, [r2, #4]
 8000fe8:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8000fec:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000fee:	686b      	ldr	r3, [r5, #4]
 8000ff0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8000ff4:	d00b      	beq.n	800100e <SPI_WaitFlagStateUntilTimeout+0x92>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8000ff6:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000ff8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000ffc:	d014      	beq.n	8001028 <SPI_WaitFlagStateUntilTimeout+0xac>
        hspi->State = HAL_SPI_STATE_READY;
 8000ffe:	2301      	movs	r3, #1
 8001000:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 8001004:	2300      	movs	r3, #0
 8001006:	f885 305c 	strb.w	r3, [r5, #92]	; 0x5c
        return HAL_TIMEOUT;
 800100a:	2003      	movs	r0, #3
 800100c:	e018      	b.n	8001040 <SPI_WaitFlagStateUntilTimeout+0xc4>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800100e:	68ab      	ldr	r3, [r5, #8]
 8001010:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001014:	d002      	beq.n	800101c <SPI_WaitFlagStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001016:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800101a:	d1ec      	bne.n	8000ff6 <SPI_WaitFlagStateUntilTimeout+0x7a>
          __HAL_SPI_DISABLE(hspi);
 800101c:	682a      	ldr	r2, [r5, #0]
 800101e:	6813      	ldr	r3, [r2, #0]
 8001020:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001024:	6013      	str	r3, [r2, #0]
 8001026:	e7e6      	b.n	8000ff6 <SPI_WaitFlagStateUntilTimeout+0x7a>
          SPI_RESET_CRC(hspi);
 8001028:	682a      	ldr	r2, [r5, #0]
 800102a:	6813      	ldr	r3, [r2, #0]
 800102c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001030:	6013      	str	r3, [r2, #0]
 8001032:	682a      	ldr	r2, [r5, #0]
 8001034:	6813      	ldr	r3, [r2, #0]
 8001036:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800103a:	6013      	str	r3, [r2, #0]
 800103c:	e7df      	b.n	8000ffe <SPI_WaitFlagStateUntilTimeout+0x82>
    }
  }

  return HAL_OK;
 800103e:	2000      	movs	r0, #0
}
 8001040:	b002      	add	sp, #8
 8001042:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001046:	bf00      	nop
 8001048:	2000000c 	.word	0x2000000c

0800104c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800104c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001050:	b083      	sub	sp, #12
 8001052:	4607      	mov	r7, r0
 8001054:	460d      	mov	r5, r1
 8001056:	4616      	mov	r6, r2
 8001058:	4698      	mov	r8, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800105a:	2300      	movs	r3, #0
 800105c:	f88d 3003 	strb.w	r3, [sp, #3]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8001060:	f7ff f8f4 	bl	800024c <HAL_GetTick>
 8001064:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001066:	1a1b      	subs	r3, r3, r0
 8001068:	eb03 0908 	add.w	r9, r3, r8
  tmp_tickstart = HAL_GetTick();
 800106c:	f7ff f8ee 	bl	800024c <HAL_GetTick>
 8001070:	4682      	mov	sl, r0

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8001072:	f8d7 b000 	ldr.w	fp, [r7]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8001076:	4b31      	ldr	r3, [pc, #196]	; (800113c <SPI_WaitFifoStateUntilTimeout+0xf0>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800107e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8001082:	0d1b      	lsrs	r3, r3, #20
 8001084:	fb09 f303 	mul.w	r3, r9, r3
 8001088:	9301      	str	r3, [sp, #4]

  while ((hspi->Instance->SR & Fifo) != State)
 800108a:	e002      	b.n	8001092 <SPI_WaitFifoStateUntilTimeout+0x46>
      tmpreg8 = *ptmpreg8;
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
    }

    if (Timeout != HAL_MAX_DELAY)
 800108c:	f1b8 3fff 	cmp.w	r8, #4294967295
 8001090:	d111      	bne.n	80010b6 <SPI_WaitFifoStateUntilTimeout+0x6a>
  while ((hspi->Instance->SR & Fifo) != State)
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	689c      	ldr	r4, [r3, #8]
 8001096:	402c      	ands	r4, r5
 8001098:	42b4      	cmp	r4, r6
 800109a:	d04a      	beq.n	8001132 <SPI_WaitFifoStateUntilTimeout+0xe6>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800109c:	f5b5 6fc0 	cmp.w	r5, #1536	; 0x600
 80010a0:	d1f4      	bne.n	800108c <SPI_WaitFifoStateUntilTimeout+0x40>
 80010a2:	2e00      	cmp	r6, #0
 80010a4:	d1f2      	bne.n	800108c <SPI_WaitFifoStateUntilTimeout+0x40>
      tmpreg8 = *ptmpreg8;
 80010a6:	f89b 300c 	ldrb.w	r3, [fp, #12]
 80010aa:	b2db      	uxtb	r3, r3
 80010ac:	f88d 3003 	strb.w	r3, [sp, #3]
      UNUSED(tmpreg8);
 80010b0:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80010b4:	e7ea      	b.n	800108c <SPI_WaitFifoStateUntilTimeout+0x40>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80010b6:	f7ff f8c9 	bl	800024c <HAL_GetTick>
 80010ba:	eba0 000a 	sub.w	r0, r0, sl
 80010be:	4548      	cmp	r0, r9
 80010c0:	d20a      	bcs.n	80010d8 <SPI_WaitFifoStateUntilTimeout+0x8c>
 80010c2:	f1b9 0f00 	cmp.w	r9, #0
 80010c6:	d007      	beq.n	80010d8 <SPI_WaitFifoStateUntilTimeout+0x8c>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80010c8:	9a01      	ldr	r2, [sp, #4]
 80010ca:	b102      	cbz	r2, 80010ce <SPI_WaitFifoStateUntilTimeout+0x82>
 80010cc:	464a      	mov	r2, r9
      {
        tmp_timeout = 0U;
      }      
      count--;
 80010ce:	9b01      	ldr	r3, [sp, #4]
 80010d0:	3b01      	subs	r3, #1
 80010d2:	9301      	str	r3, [sp, #4]
 80010d4:	4691      	mov	r9, r2
 80010d6:	e7dc      	b.n	8001092 <SPI_WaitFifoStateUntilTimeout+0x46>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80010d8:	683a      	ldr	r2, [r7, #0]
 80010da:	6853      	ldr	r3, [r2, #4]
 80010dc:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 80010e0:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80010e8:	d00b      	beq.n	8001102 <SPI_WaitFifoStateUntilTimeout+0xb6>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80010ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80010f0:	d014      	beq.n	800111c <SPI_WaitFifoStateUntilTimeout+0xd0>
        hspi->State = HAL_SPI_STATE_READY;
 80010f2:	2301      	movs	r3, #1
 80010f4:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 80010f8:	2300      	movs	r3, #0
 80010fa:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
        return HAL_TIMEOUT;
 80010fe:	2003      	movs	r0, #3
 8001100:	e018      	b.n	8001134 <SPI_WaitFifoStateUntilTimeout+0xe8>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001102:	68bb      	ldr	r3, [r7, #8]
 8001104:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001108:	d002      	beq.n	8001110 <SPI_WaitFifoStateUntilTimeout+0xc4>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800110a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800110e:	d1ec      	bne.n	80010ea <SPI_WaitFifoStateUntilTimeout+0x9e>
          __HAL_SPI_DISABLE(hspi);
 8001110:	683a      	ldr	r2, [r7, #0]
 8001112:	6813      	ldr	r3, [r2, #0]
 8001114:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001118:	6013      	str	r3, [r2, #0]
 800111a:	e7e6      	b.n	80010ea <SPI_WaitFifoStateUntilTimeout+0x9e>
          SPI_RESET_CRC(hspi);
 800111c:	683a      	ldr	r2, [r7, #0]
 800111e:	6813      	ldr	r3, [r2, #0]
 8001120:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001124:	6013      	str	r3, [r2, #0]
 8001126:	683a      	ldr	r2, [r7, #0]
 8001128:	6813      	ldr	r3, [r2, #0]
 800112a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800112e:	6013      	str	r3, [r2, #0]
 8001130:	e7df      	b.n	80010f2 <SPI_WaitFifoStateUntilTimeout+0xa6>
    }
  }

  return HAL_OK;
 8001132:	2000      	movs	r0, #0
}
 8001134:	b003      	add	sp, #12
 8001136:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800113a:	bf00      	nop
 800113c:	2000000c 	.word	0x2000000c

08001140 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001140:	b570      	push	{r4, r5, r6, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	4604      	mov	r4, r0
 8001146:	460d      	mov	r5, r1
 8001148:	4616      	mov	r6, r2
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800114a:	9200      	str	r2, [sp, #0]
 800114c:	460b      	mov	r3, r1
 800114e:	2200      	movs	r2, #0
 8001150:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8001154:	f7ff ff7a 	bl	800104c <SPI_WaitFifoStateUntilTimeout>
 8001158:	b9b0      	cbnz	r0, 8001188 <SPI_EndRxTxTransaction+0x48>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800115a:	9600      	str	r6, [sp, #0]
 800115c:	462b      	mov	r3, r5
 800115e:	2200      	movs	r2, #0
 8001160:	2180      	movs	r1, #128	; 0x80
 8001162:	4620      	mov	r0, r4
 8001164:	f7ff ff0a 	bl	8000f7c <SPI_WaitFlagStateUntilTimeout>
 8001168:	b9a8      	cbnz	r0, 8001196 <SPI_EndRxTxTransaction+0x56>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800116a:	9600      	str	r6, [sp, #0]
 800116c:	462b      	mov	r3, r5
 800116e:	2200      	movs	r2, #0
 8001170:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8001174:	4620      	mov	r0, r4
 8001176:	f7ff ff69 	bl	800104c <SPI_WaitFifoStateUntilTimeout>
 800117a:	b150      	cbz	r0, 8001192 <SPI_EndRxTxTransaction+0x52>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800117c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800117e:	f043 0320 	orr.w	r3, r3, #32
 8001182:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8001184:	2003      	movs	r0, #3
 8001186:	e004      	b.n	8001192 <SPI_EndRxTxTransaction+0x52>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001188:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800118a:	f043 0320 	orr.w	r3, r3, #32
 800118e:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8001190:	2003      	movs	r0, #3
  }

  return HAL_OK;
}
 8001192:	b002      	add	sp, #8
 8001194:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001196:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001198:	f043 0320 	orr.w	r3, r3, #32
 800119c:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 800119e:	2003      	movs	r0, #3
 80011a0:	e7f7      	b.n	8001192 <SPI_EndRxTxTransaction+0x52>

080011a2 <SPI_EndRxTransaction>:
{
 80011a2:	b570      	push	{r4, r5, r6, lr}
 80011a4:	b082      	sub	sp, #8
 80011a6:	4604      	mov	r4, r0
 80011a8:	460d      	mov	r5, r1
 80011aa:	4616      	mov	r6, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80011ac:	6843      	ldr	r3, [r0, #4]
 80011ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80011b2:	d00d      	beq.n	80011d0 <SPI_EndRxTransaction+0x2e>
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80011b4:	9600      	str	r6, [sp, #0]
 80011b6:	462b      	mov	r3, r5
 80011b8:	2200      	movs	r2, #0
 80011ba:	2180      	movs	r1, #128	; 0x80
 80011bc:	4620      	mov	r0, r4
 80011be:	f7ff fedd 	bl	8000f7c <SPI_WaitFlagStateUntilTimeout>
 80011c2:	b990      	cbnz	r0, 80011ea <SPI_EndRxTransaction+0x48>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80011c4:	6863      	ldr	r3, [r4, #4]
 80011c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80011ca:	d014      	beq.n	80011f6 <SPI_EndRxTransaction+0x54>
}
 80011cc:	b002      	add	sp, #8
 80011ce:	bd70      	pop	{r4, r5, r6, pc}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80011d0:	6883      	ldr	r3, [r0, #8]
 80011d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80011d6:	d002      	beq.n	80011de <SPI_EndRxTransaction+0x3c>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80011d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011dc:	d1ea      	bne.n	80011b4 <SPI_EndRxTransaction+0x12>
    __HAL_SPI_DISABLE(hspi);
 80011de:	6822      	ldr	r2, [r4, #0]
 80011e0:	6813      	ldr	r3, [r2, #0]
 80011e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80011e6:	6013      	str	r3, [r2, #0]
 80011e8:	e7e4      	b.n	80011b4 <SPI_EndRxTransaction+0x12>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80011ea:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80011ec:	f043 0320 	orr.w	r3, r3, #32
 80011f0:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 80011f2:	2003      	movs	r0, #3
 80011f4:	e7ea      	b.n	80011cc <SPI_EndRxTransaction+0x2a>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80011f6:	68a3      	ldr	r3, [r4, #8]
 80011f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80011fc:	d002      	beq.n	8001204 <SPI_EndRxTransaction+0x62>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80011fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001202:	d1e3      	bne.n	80011cc <SPI_EndRxTransaction+0x2a>
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8001204:	9600      	str	r6, [sp, #0]
 8001206:	462b      	mov	r3, r5
 8001208:	2200      	movs	r2, #0
 800120a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800120e:	4620      	mov	r0, r4
 8001210:	f7ff ff1c 	bl	800104c <SPI_WaitFifoStateUntilTimeout>
 8001214:	2800      	cmp	r0, #0
 8001216:	d0d9      	beq.n	80011cc <SPI_EndRxTransaction+0x2a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001218:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800121a:	f043 0320 	orr.w	r3, r3, #32
 800121e:	6623      	str	r3, [r4, #96]	; 0x60
      return HAL_TIMEOUT;
 8001220:	2003      	movs	r0, #3
 8001222:	e7d3      	b.n	80011cc <SPI_EndRxTransaction+0x2a>

08001224 <HAL_SPI_Init>:
  if (hspi == NULL)
 8001224:	2800      	cmp	r0, #0
 8001226:	d06f      	beq.n	8001308 <HAL_SPI_Init+0xe4>
{
 8001228:	b510      	push	{r4, lr}
 800122a:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800122c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800122e:	b933      	cbnz	r3, 800123e <HAL_SPI_Init+0x1a>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001230:	6843      	ldr	r3, [r0, #4]
 8001232:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001236:	d005      	beq.n	8001244 <HAL_SPI_Init+0x20>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001238:	2300      	movs	r3, #0
 800123a:	61c3      	str	r3, [r0, #28]
 800123c:	e002      	b.n	8001244 <HAL_SPI_Init+0x20>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800123e:	2300      	movs	r3, #0
 8001240:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001242:	6143      	str	r3, [r0, #20]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001244:	2300      	movs	r3, #0
 8001246:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8001248:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 800124c:	2b00      	cmp	r3, #0
 800124e:	d052      	beq.n	80012f6 <HAL_SPI_Init+0xd2>
  hspi->State = HAL_SPI_STATE_BUSY;
 8001250:	2302      	movs	r3, #2
 8001252:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 8001256:	6822      	ldr	r2, [r4, #0]
 8001258:	6813      	ldr	r3, [r2, #0]
 800125a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800125e:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001260:	68e3      	ldr	r3, [r4, #12]
 8001262:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001266:	d94c      	bls.n	8001302 <HAL_SPI_Init+0xde>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001268:	2200      	movs	r2, #0
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800126a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800126e:	d004      	beq.n	800127a <HAL_SPI_Init+0x56>
 8001270:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001274:	d001      	beq.n	800127a <HAL_SPI_Init+0x56>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001276:	2300      	movs	r3, #0
 8001278:	62a3      	str	r3, [r4, #40]	; 0x28
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800127a:	6863      	ldr	r3, [r4, #4]
 800127c:	f403 7382 	and.w	r3, r3, #260	; 0x104
 8001280:	68a1      	ldr	r1, [r4, #8]
 8001282:	f401 4104 	and.w	r1, r1, #33792	; 0x8400
 8001286:	430b      	orrs	r3, r1
 8001288:	6921      	ldr	r1, [r4, #16]
 800128a:	f001 0102 	and.w	r1, r1, #2
 800128e:	430b      	orrs	r3, r1
 8001290:	6961      	ldr	r1, [r4, #20]
 8001292:	f001 0101 	and.w	r1, r1, #1
 8001296:	430b      	orrs	r3, r1
 8001298:	69a1      	ldr	r1, [r4, #24]
 800129a:	f401 7100 	and.w	r1, r1, #512	; 0x200
 800129e:	430b      	orrs	r3, r1
 80012a0:	69e1      	ldr	r1, [r4, #28]
 80012a2:	f001 0138 	and.w	r1, r1, #56	; 0x38
 80012a6:	430b      	orrs	r3, r1
 80012a8:	6a21      	ldr	r1, [r4, #32]
 80012aa:	f001 0180 	and.w	r1, r1, #128	; 0x80
 80012ae:	430b      	orrs	r3, r1
 80012b0:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80012b2:	f401 5100 	and.w	r1, r1, #8192	; 0x2000
 80012b6:	6820      	ldr	r0, [r4, #0]
 80012b8:	430b      	orrs	r3, r1
 80012ba:	6003      	str	r3, [r0, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80012bc:	8b63      	ldrh	r3, [r4, #26]
 80012be:	f003 0304 	and.w	r3, r3, #4
 80012c2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80012c4:	f001 0110 	and.w	r1, r1, #16
 80012c8:	430b      	orrs	r3, r1
 80012ca:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80012cc:	f001 0108 	and.w	r1, r1, #8
 80012d0:	430b      	orrs	r3, r1
 80012d2:	68e1      	ldr	r1, [r4, #12]
 80012d4:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
 80012d8:	430b      	orrs	r3, r1
 80012da:	6821      	ldr	r1, [r4, #0]
 80012dc:	4313      	orrs	r3, r2
 80012de:	604b      	str	r3, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80012e0:	6822      	ldr	r2, [r4, #0]
 80012e2:	69d3      	ldr	r3, [r2, #28]
 80012e4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80012e8:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80012ea:	2000      	movs	r0, #0
 80012ec:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80012ee:	2301      	movs	r3, #1
 80012f0:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
}
 80012f4:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 80012f6:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 80012fa:	4620      	mov	r0, r4
 80012fc:	f001 f942 	bl	8002584 <HAL_SPI_MspInit>
 8001300:	e7a6      	b.n	8001250 <HAL_SPI_Init+0x2c>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001302:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001306:	e7b0      	b.n	800126a <HAL_SPI_Init+0x46>
    return HAL_ERROR;
 8001308:	2001      	movs	r0, #1
}
 800130a:	4770      	bx	lr

0800130c <HAL_SPI_Transmit_DMA>:
{
 800130c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hspi);
 800130e:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 8001312:	2b01      	cmp	r3, #1
 8001314:	f000 808c 	beq.w	8001430 <HAL_SPI_Transmit_DMA+0x124>
 8001318:	4604      	mov	r4, r0
 800131a:	2301      	movs	r3, #1
 800131c:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  if (hspi->State != HAL_SPI_STATE_READY)
 8001320:	f890 505d 	ldrb.w	r5, [r0, #93]	; 0x5d
 8001324:	b2ed      	uxtb	r5, r5
 8001326:	429d      	cmp	r5, r3
 8001328:	d17c      	bne.n	8001424 <HAL_SPI_Transmit_DMA+0x118>
  if ((pData == NULL) || (Size == 0U))
 800132a:	2900      	cmp	r1, #0
 800132c:	d07b      	beq.n	8001426 <HAL_SPI_Transmit_DMA+0x11a>
 800132e:	2a00      	cmp	r2, #0
 8001330:	d079      	beq.n	8001426 <HAL_SPI_Transmit_DMA+0x11a>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001332:	2303      	movs	r3, #3
 8001334:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001338:	2300      	movs	r3, #0
 800133a:	6603      	str	r3, [r0, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800133c:	6381      	str	r1, [r0, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800133e:	8782      	strh	r2, [r0, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8001340:	87c2      	strh	r2, [r0, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001342:	6403      	str	r3, [r0, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001344:	6503      	str	r3, [r0, #80]	; 0x50
  hspi->RxISR       = NULL;
 8001346:	64c3      	str	r3, [r0, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 8001348:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800134c:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001350:	6883      	ldr	r3, [r0, #8]
 8001352:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001356:	d039      	beq.n	80013cc <HAL_SPI_Transmit_DMA+0xc0>
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8001358:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800135a:	4a36      	ldr	r2, [pc, #216]	; (8001434 <HAL_SPI_Transmit_DMA+0x128>)
 800135c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800135e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001360:	4a35      	ldr	r2, [pc, #212]	; (8001438 <HAL_SPI_Transmit_DMA+0x12c>)
 8001362:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8001364:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001366:	4a35      	ldr	r2, [pc, #212]	; (800143c <HAL_SPI_Transmit_DMA+0x130>)
 8001368:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferAbortCallback = NULL;
 800136a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800136c:	2200      	movs	r2, #0
 800136e:	635a      	str	r2, [r3, #52]	; 0x34
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8001370:	6822      	ldr	r2, [r4, #0]
 8001372:	6853      	ldr	r3, [r2, #4]
 8001374:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001378:	6053      	str	r3, [r2, #4]
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 800137a:	68e3      	ldr	r3, [r4, #12]
 800137c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001380:	d804      	bhi.n	800138c <HAL_SPI_Transmit_DMA+0x80>
 8001382:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001384:	695b      	ldr	r3, [r3, #20]
 8001386:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800138a:	d02a      	beq.n	80013e2 <HAL_SPI_Transmit_DMA+0xd6>
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800138c:	6822      	ldr	r2, [r4, #0]
                                 hspi->TxXferCount))
 800138e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8001390:	b29b      	uxth	r3, r3
 8001392:	320c      	adds	r2, #12
 8001394:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8001396:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001398:	f7ff f82c 	bl	80003f4 <HAL_DMA_Start_IT>
 800139c:	4601      	mov	r1, r0
 800139e:	2800      	cmp	r0, #0
 80013a0:	d138      	bne.n	8001414 <HAL_SPI_Transmit_DMA+0x108>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80013a2:	6823      	ldr	r3, [r4, #0]
 80013a4:	681a      	ldr	r2, [r3, #0]
 80013a6:	f012 0f40 	tst.w	r2, #64	; 0x40
 80013aa:	d103      	bne.n	80013b4 <HAL_SPI_Transmit_DMA+0xa8>
    __HAL_SPI_ENABLE(hspi);
 80013ac:	681a      	ldr	r2, [r3, #0]
 80013ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80013b2:	601a      	str	r2, [r3, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80013b4:	6822      	ldr	r2, [r4, #0]
 80013b6:	6853      	ldr	r3, [r2, #4]
 80013b8:	f043 0320 	orr.w	r3, r3, #32
 80013bc:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80013be:	6822      	ldr	r2, [r4, #0]
 80013c0:	6853      	ldr	r3, [r2, #4]
 80013c2:	f043 0302 	orr.w	r3, r3, #2
 80013c6:	6053      	str	r3, [r2, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80013c8:	460d      	mov	r5, r1
 80013ca:	e02c      	b.n	8001426 <HAL_SPI_Transmit_DMA+0x11a>
    __HAL_SPI_DISABLE(hspi);
 80013cc:	6802      	ldr	r2, [r0, #0]
 80013ce:	6813      	ldr	r3, [r2, #0]
 80013d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80013d4:	6013      	str	r3, [r2, #0]
    SPI_1LINE_TX(hspi);
 80013d6:	6802      	ldr	r2, [r0, #0]
 80013d8:	6813      	ldr	r3, [r2, #0]
 80013da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013de:	6013      	str	r3, [r2, #0]
 80013e0:	e7ba      	b.n	8001358 <HAL_SPI_Transmit_DMA+0x4c>
    if ((hspi->TxXferCount & 0x1U) == 0U)
 80013e2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80013e4:	f013 0f01 	tst.w	r3, #1
 80013e8:	d109      	bne.n	80013fe <HAL_SPI_Transmit_DMA+0xf2>
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80013ea:	6822      	ldr	r2, [r4, #0]
 80013ec:	6853      	ldr	r3, [r2, #4]
 80013ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80013f2:	6053      	str	r3, [r2, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 80013f4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80013f6:	f3c3 034e 	ubfx	r3, r3, #1, #15
 80013fa:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80013fc:	e7c6      	b.n	800138c <HAL_SPI_Transmit_DMA+0x80>
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80013fe:	6822      	ldr	r2, [r4, #0]
 8001400:	6853      	ldr	r3, [r2, #4]
 8001402:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001406:	6053      	str	r3, [r2, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8001408:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800140a:	f3c3 034e 	ubfx	r3, r3, #1, #15
 800140e:	3301      	adds	r3, #1
 8001410:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8001412:	e7bb      	b.n	800138c <HAL_SPI_Transmit_DMA+0x80>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8001414:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001416:	f043 0310 	orr.w	r3, r3, #16
 800141a:	6623      	str	r3, [r4, #96]	; 0x60
    hspi->State = HAL_SPI_STATE_READY;
 800141c:	2301      	movs	r3, #1
 800141e:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
    goto error;
 8001422:	e000      	b.n	8001426 <HAL_SPI_Transmit_DMA+0x11a>
    errorcode = HAL_BUSY;
 8001424:	2502      	movs	r5, #2
  __HAL_UNLOCK(hspi);
 8001426:	2300      	movs	r3, #0
 8001428:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 800142c:	4628      	mov	r0, r5
 800142e:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hspi);
 8001430:	2502      	movs	r5, #2
 8001432:	e7fb      	b.n	800142c <HAL_SPI_Transmit_DMA+0x120>
 8001434:	08001807 	.word	0x08001807
 8001438:	0800184d 	.word	0x0800184d
 800143c:	0800182b 	.word	0x0800182b

08001440 <HAL_SPI_TransmitReceive_DMA>:
{
 8001440:	b538      	push	{r3, r4, r5, lr}
 8001442:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 8001444:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
 8001448:	2801      	cmp	r0, #1
 800144a:	f000 8103 	beq.w	8001654 <HAL_SPI_TransmitReceive_DMA+0x214>
 800144e:	2001      	movs	r0, #1
 8001450:	f884 005c 	strb.w	r0, [r4, #92]	; 0x5c
  tmp_state           = hspi->State;
 8001454:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
 8001458:	b2c0      	uxtb	r0, r0
  tmp_mode            = hspi->Init.Mode;
 800145a:	6865      	ldr	r5, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800145c:	2801      	cmp	r0, #1
 800145e:	d00a      	beq.n	8001476 <HAL_SPI_TransmitReceive_DMA+0x36>
 8001460:	f5b5 7f82 	cmp.w	r5, #260	; 0x104
 8001464:	f040 80e5 	bne.w	8001632 <HAL_SPI_TransmitReceive_DMA+0x1f2>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001468:	68a5      	ldr	r5, [r4, #8]
 800146a:	2d00      	cmp	r5, #0
 800146c:	f040 80e6 	bne.w	800163c <HAL_SPI_TransmitReceive_DMA+0x1fc>
 8001470:	2804      	cmp	r0, #4
 8001472:	f040 80e5 	bne.w	8001640 <HAL_SPI_TransmitReceive_DMA+0x200>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001476:	2900      	cmp	r1, #0
 8001478:	f000 80e4 	beq.w	8001644 <HAL_SPI_TransmitReceive_DMA+0x204>
 800147c:	2a00      	cmp	r2, #0
 800147e:	f000 80e3 	beq.w	8001648 <HAL_SPI_TransmitReceive_DMA+0x208>
 8001482:	2b00      	cmp	r3, #0
 8001484:	f000 80e2 	beq.w	800164c <HAL_SPI_TransmitReceive_DMA+0x20c>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001488:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
 800148c:	b2c0      	uxtb	r0, r0
 800148e:	2804      	cmp	r0, #4
 8001490:	d002      	beq.n	8001498 <HAL_SPI_TransmitReceive_DMA+0x58>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001492:	2005      	movs	r0, #5
 8001494:	f884 005d 	strb.w	r0, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001498:	2000      	movs	r0, #0
 800149a:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800149c:	63a1      	str	r1, [r4, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800149e:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80014a0:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80014a2:	6422      	str	r2, [r4, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80014a4:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
  hspi->RxXferCount = Size;
 80014a8:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
  hspi->RxISR       = NULL;
 80014ac:	64e0      	str	r0, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80014ae:	6520      	str	r0, [r4, #80]	; 0x50
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 80014b0:	68e3      	ldr	r3, [r4, #12]
 80014b2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80014b6:	d805      	bhi.n	80014c4 <HAL_SPI_TransmitReceive_DMA+0x84>
 80014b8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80014ba:	695b      	ldr	r3, [r3, #20]
 80014bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014c0:	f000 80c6 	beq.w	8001650 <HAL_SPI_TransmitReceive_DMA+0x210>
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 80014c4:	6822      	ldr	r2, [r4, #0]
 80014c6:	6853      	ldr	r3, [r2, #4]
 80014c8:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 80014cc:	6053      	str	r3, [r2, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80014ce:	68e3      	ldr	r3, [r4, #12]
 80014d0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80014d4:	d928      	bls.n	8001528 <HAL_SPI_TransmitReceive_DMA+0xe8>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80014d6:	6822      	ldr	r2, [r4, #0]
 80014d8:	6853      	ldr	r3, [r2, #4]
 80014da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80014de:	6053      	str	r3, [r2, #4]
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80014e0:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 80014e4:	b2db      	uxtb	r3, r3
 80014e6:	2b04      	cmp	r3, #4
 80014e8:	d069      	beq.n	80015be <HAL_SPI_TransmitReceive_DMA+0x17e>
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 80014ea:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80014ec:	4a5a      	ldr	r2, [pc, #360]	; (8001658 <HAL_SPI_TransmitReceive_DMA+0x218>)
 80014ee:	62da      	str	r2, [r3, #44]	; 0x2c
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 80014f0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80014f2:	4a5a      	ldr	r2, [pc, #360]	; (800165c <HAL_SPI_TransmitReceive_DMA+0x21c>)
 80014f4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80014f6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80014f8:	4a59      	ldr	r2, [pc, #356]	; (8001660 <HAL_SPI_TransmitReceive_DMA+0x220>)
 80014fa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmarx->XferAbortCallback = NULL;
 80014fc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80014fe:	2200      	movs	r2, #0
 8001500:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8001502:	6821      	ldr	r1, [r4, #0]
                                 hspi->RxXferCount))
 8001504:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8001508:	b29b      	uxth	r3, r3
 800150a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800150c:	310c      	adds	r1, #12
 800150e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001510:	f7fe ff70 	bl	80003f4 <HAL_DMA_Start_IT>
 8001514:	2800      	cmp	r0, #0
 8001516:	d059      	beq.n	80015cc <HAL_SPI_TransmitReceive_DMA+0x18c>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8001518:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800151a:	f043 0310 	orr.w	r3, r3, #16
 800151e:	6623      	str	r3, [r4, #96]	; 0x60
    hspi->State = HAL_SPI_STATE_READY;
 8001520:	2001      	movs	r0, #1
 8001522:	f884 005d 	strb.w	r0, [r4, #93]	; 0x5d
    goto error;
 8001526:	e085      	b.n	8001634 <HAL_SPI_TransmitReceive_DMA+0x1f4>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001528:	6822      	ldr	r2, [r4, #0]
 800152a:	6853      	ldr	r3, [r2, #4]
 800152c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001530:	6053      	str	r3, [r2, #4]
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001532:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001534:	695b      	ldr	r3, [r3, #20]
 8001536:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800153a:	d01a      	beq.n	8001572 <HAL_SPI_TransmitReceive_DMA+0x132>
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800153c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800153e:	695b      	ldr	r3, [r3, #20]
 8001540:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001544:	d1cc      	bne.n	80014e0 <HAL_SPI_TransmitReceive_DMA+0xa0>
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001546:	6822      	ldr	r2, [r4, #0]
 8001548:	6853      	ldr	r3, [r2, #4]
 800154a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800154e:	6053      	str	r3, [r2, #4]
      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8001550:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8001554:	f013 0f01 	tst.w	r3, #1
 8001558:	d124      	bne.n	80015a4 <HAL_SPI_TransmitReceive_DMA+0x164>
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800155a:	6822      	ldr	r2, [r4, #0]
 800155c:	6853      	ldr	r3, [r2, #4]
 800155e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001562:	6053      	str	r3, [r2, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8001564:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8001568:	f3c3 034e 	ubfx	r3, r3, #1, #15
 800156c:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 8001570:	e7b6      	b.n	80014e0 <HAL_SPI_TransmitReceive_DMA+0xa0>
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 8001572:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
 8001574:	f013 0f01 	tst.w	r3, #1
 8001578:	d109      	bne.n	800158e <HAL_SPI_TransmitReceive_DMA+0x14e>
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800157a:	6822      	ldr	r2, [r4, #0]
 800157c:	6853      	ldr	r3, [r2, #4]
 800157e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001582:	6053      	str	r3, [r2, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 8001584:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001586:	f3c3 034e 	ubfx	r3, r3, #1, #15
 800158a:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800158c:	e7d6      	b.n	800153c <HAL_SPI_TransmitReceive_DMA+0xfc>
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800158e:	6822      	ldr	r2, [r4, #0]
 8001590:	6853      	ldr	r3, [r2, #4]
 8001592:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001596:	6053      	str	r3, [r2, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8001598:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800159a:	f3c3 034e 	ubfx	r3, r3, #1, #15
 800159e:	3301      	adds	r3, #1
 80015a0:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80015a2:	e7cb      	b.n	800153c <HAL_SPI_TransmitReceive_DMA+0xfc>
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80015a4:	6822      	ldr	r2, [r4, #0]
 80015a6:	6853      	ldr	r3, [r2, #4]
 80015a8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80015ac:	6053      	str	r3, [r2, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 80015ae:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80015b2:	f3c3 034e 	ubfx	r3, r3, #1, #15
 80015b6:	3301      	adds	r3, #1
 80015b8:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 80015bc:	e790      	b.n	80014e0 <HAL_SPI_TransmitReceive_DMA+0xa0>
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80015be:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80015c0:	4a28      	ldr	r2, [pc, #160]	; (8001664 <HAL_SPI_TransmitReceive_DMA+0x224>)
 80015c2:	62da      	str	r2, [r3, #44]	; 0x2c
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 80015c4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80015c6:	4a28      	ldr	r2, [pc, #160]	; (8001668 <HAL_SPI_TransmitReceive_DMA+0x228>)
 80015c8:	629a      	str	r2, [r3, #40]	; 0x28
 80015ca:	e794      	b.n	80014f6 <HAL_SPI_TransmitReceive_DMA+0xb6>
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80015cc:	6822      	ldr	r2, [r4, #0]
 80015ce:	6853      	ldr	r3, [r2, #4]
 80015d0:	f043 0301 	orr.w	r3, r3, #1
 80015d4:	6053      	str	r3, [r2, #4]
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 80015d6:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80015d8:	2300      	movs	r3, #0
 80015da:	62d3      	str	r3, [r2, #44]	; 0x2c
  hspi->hdmatx->XferCpltCallback     = NULL;
 80015dc:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80015de:	6293      	str	r3, [r2, #40]	; 0x28
  hspi->hdmatx->XferErrorCallback    = NULL;
 80015e0:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80015e2:	6313      	str	r3, [r2, #48]	; 0x30
  hspi->hdmatx->XferAbortCallback    = NULL;
 80015e4:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80015e6:	6353      	str	r3, [r2, #52]	; 0x34
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80015e8:	6822      	ldr	r2, [r4, #0]
                                 hspi->TxXferCount))
 80015ea:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80015ec:	b29b      	uxth	r3, r3
 80015ee:	320c      	adds	r2, #12
 80015f0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80015f2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80015f4:	f7fe fefe 	bl	80003f4 <HAL_DMA_Start_IT>
 80015f8:	b998      	cbnz	r0, 8001622 <HAL_SPI_TransmitReceive_DMA+0x1e2>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80015fa:	6823      	ldr	r3, [r4, #0]
 80015fc:	681a      	ldr	r2, [r3, #0]
 80015fe:	f012 0f40 	tst.w	r2, #64	; 0x40
 8001602:	d103      	bne.n	800160c <HAL_SPI_TransmitReceive_DMA+0x1cc>
    __HAL_SPI_ENABLE(hspi);
 8001604:	681a      	ldr	r2, [r3, #0]
 8001606:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800160a:	601a      	str	r2, [r3, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800160c:	6822      	ldr	r2, [r4, #0]
 800160e:	6853      	ldr	r3, [r2, #4]
 8001610:	f043 0320 	orr.w	r3, r3, #32
 8001614:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8001616:	6822      	ldr	r2, [r4, #0]
 8001618:	6853      	ldr	r3, [r2, #4]
 800161a:	f043 0302 	orr.w	r3, r3, #2
 800161e:	6053      	str	r3, [r2, #4]
 8001620:	e008      	b.n	8001634 <HAL_SPI_TransmitReceive_DMA+0x1f4>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8001622:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001624:	f043 0310 	orr.w	r3, r3, #16
 8001628:	6623      	str	r3, [r4, #96]	; 0x60
    hspi->State = HAL_SPI_STATE_READY;
 800162a:	2001      	movs	r0, #1
 800162c:	f884 005d 	strb.w	r0, [r4, #93]	; 0x5d
    goto error;
 8001630:	e000      	b.n	8001634 <HAL_SPI_TransmitReceive_DMA+0x1f4>
    errorcode = HAL_BUSY;
 8001632:	2002      	movs	r0, #2
  __HAL_UNLOCK(hspi);
 8001634:	2300      	movs	r3, #0
 8001636:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 800163a:	bd38      	pop	{r3, r4, r5, pc}
    errorcode = HAL_BUSY;
 800163c:	2002      	movs	r0, #2
 800163e:	e7f9      	b.n	8001634 <HAL_SPI_TransmitReceive_DMA+0x1f4>
 8001640:	2002      	movs	r0, #2
 8001642:	e7f7      	b.n	8001634 <HAL_SPI_TransmitReceive_DMA+0x1f4>
    errorcode = HAL_ERROR;
 8001644:	2001      	movs	r0, #1
 8001646:	e7f5      	b.n	8001634 <HAL_SPI_TransmitReceive_DMA+0x1f4>
 8001648:	2001      	movs	r0, #1
 800164a:	e7f3      	b.n	8001634 <HAL_SPI_TransmitReceive_DMA+0x1f4>
 800164c:	2001      	movs	r0, #1
 800164e:	e7f1      	b.n	8001634 <HAL_SPI_TransmitReceive_DMA+0x1f4>
    errorcode = HAL_ERROR;
 8001650:	2001      	movs	r0, #1
 8001652:	e7ef      	b.n	8001634 <HAL_SPI_TransmitReceive_DMA+0x1f4>
  __HAL_LOCK(hspi);
 8001654:	2002      	movs	r0, #2
 8001656:	e7f0      	b.n	800163a <HAL_SPI_TransmitReceive_DMA+0x1fa>
 8001658:	0800181f 	.word	0x0800181f
 800165c:	0800192d 	.word	0x0800192d
 8001660:	0800182b 	.word	0x0800182b
 8001664:	08001813 	.word	0x08001813
 8001668:	080018bd 	.word	0x080018bd

0800166c <HAL_SPI_Receive_DMA>:
{
 800166c:	b538      	push	{r3, r4, r5, lr}
 800166e:	4604      	mov	r4, r0
  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8001670:	6883      	ldr	r3, [r0, #8]
 8001672:	b91b      	cbnz	r3, 800167c <HAL_SPI_Receive_DMA+0x10>
 8001674:	6840      	ldr	r0, [r0, #4]
 8001676:	f5b0 7f82 	cmp.w	r0, #260	; 0x104
 800167a:	d069      	beq.n	8001750 <HAL_SPI_Receive_DMA+0xe4>
  __HAL_LOCK(hspi);
 800167c:	f894 005c 	ldrb.w	r0, [r4, #92]	; 0x5c
 8001680:	2801      	cmp	r0, #1
 8001682:	f000 80b5 	beq.w	80017f0 <HAL_SPI_Receive_DMA+0x184>
 8001686:	2001      	movs	r0, #1
 8001688:	f884 005c 	strb.w	r0, [r4, #92]	; 0x5c
  if (hspi->State != HAL_SPI_STATE_READY)
 800168c:	f894 505d 	ldrb.w	r5, [r4, #93]	; 0x5d
 8001690:	b2ed      	uxtb	r5, r5
 8001692:	4285      	cmp	r5, r0
 8001694:	f040 80a6 	bne.w	80017e4 <HAL_SPI_Receive_DMA+0x178>
  if ((pData == NULL) || (Size == 0U))
 8001698:	2900      	cmp	r1, #0
 800169a:	f000 80a4 	beq.w	80017e6 <HAL_SPI_Receive_DMA+0x17a>
 800169e:	2a00      	cmp	r2, #0
 80016a0:	f000 80a1 	beq.w	80017e6 <HAL_SPI_Receive_DMA+0x17a>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80016a4:	2004      	movs	r0, #4
 80016a6:	f884 005d 	strb.w	r0, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80016aa:	2000      	movs	r0, #0
 80016ac:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80016ae:	6421      	str	r1, [r4, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80016b0:	f8a4 2044 	strh.w	r2, [r4, #68]	; 0x44
  hspi->RxXferCount = Size;
 80016b4:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
  hspi->RxISR       = NULL;
 80016b8:	64e0      	str	r0, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80016ba:	6520      	str	r0, [r4, #80]	; 0x50
  hspi->TxXferSize  = 0U;
 80016bc:	87a0      	strh	r0, [r4, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80016be:	87e0      	strh	r0, [r4, #62]	; 0x3e
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80016c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80016c4:	d04e      	beq.n	8001764 <HAL_SPI_Receive_DMA+0xf8>
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 80016c6:	68e3      	ldr	r3, [r4, #12]
 80016c8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80016cc:	d805      	bhi.n	80016da <HAL_SPI_Receive_DMA+0x6e>
 80016ce:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80016d0:	695b      	ldr	r3, [r3, #20]
 80016d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016d6:	f000 8086 	beq.w	80017e6 <HAL_SPI_Receive_DMA+0x17a>
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80016da:	6822      	ldr	r2, [r4, #0]
 80016dc:	6853      	ldr	r3, [r2, #4]
 80016de:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80016e2:	6053      	str	r3, [r2, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80016e4:	68e3      	ldr	r3, [r4, #12]
 80016e6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80016ea:	d946      	bls.n	800177a <HAL_SPI_Receive_DMA+0x10e>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80016ec:	6822      	ldr	r2, [r4, #0]
 80016ee:	6853      	ldr	r3, [r2, #4]
 80016f0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80016f4:	6053      	str	r3, [r2, #4]
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80016f6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80016f8:	4a3e      	ldr	r2, [pc, #248]	; (80017f4 <HAL_SPI_Receive_DMA+0x188>)
 80016fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 80016fc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80016fe:	4a3e      	ldr	r2, [pc, #248]	; (80017f8 <HAL_SPI_Receive_DMA+0x18c>)
 8001700:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8001702:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001704:	4a3d      	ldr	r2, [pc, #244]	; (80017fc <HAL_SPI_Receive_DMA+0x190>)
 8001706:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmarx->XferAbortCallback = NULL;
 8001708:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800170a:	2200      	movs	r2, #0
 800170c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800170e:	6821      	ldr	r1, [r4, #0]
                                 hspi->RxXferCount))
 8001710:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8001714:	b29b      	uxth	r3, r3
 8001716:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001718:	310c      	adds	r1, #12
 800171a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800171c:	f7fe fe6a 	bl	80003f4 <HAL_DMA_Start_IT>
 8001720:	4601      	mov	r1, r0
 8001722:	2800      	cmp	r0, #0
 8001724:	d156      	bne.n	80017d4 <HAL_SPI_Receive_DMA+0x168>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001726:	6823      	ldr	r3, [r4, #0]
 8001728:	681a      	ldr	r2, [r3, #0]
 800172a:	f012 0f40 	tst.w	r2, #64	; 0x40
 800172e:	d103      	bne.n	8001738 <HAL_SPI_Receive_DMA+0xcc>
    __HAL_SPI_ENABLE(hspi);
 8001730:	681a      	ldr	r2, [r3, #0]
 8001732:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001736:	601a      	str	r2, [r3, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8001738:	6822      	ldr	r2, [r4, #0]
 800173a:	6853      	ldr	r3, [r2, #4]
 800173c:	f043 0320 	orr.w	r3, r3, #32
 8001740:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8001742:	6822      	ldr	r2, [r4, #0]
 8001744:	6853      	ldr	r3, [r2, #4]
 8001746:	f043 0301 	orr.w	r3, r3, #1
 800174a:	6053      	str	r3, [r2, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800174c:	460d      	mov	r5, r1
 800174e:	e04a      	b.n	80017e6 <HAL_SPI_Receive_DMA+0x17a>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8001750:	2304      	movs	r3, #4
 8001752:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8001756:	4613      	mov	r3, r2
 8001758:	460a      	mov	r2, r1
 800175a:	4620      	mov	r0, r4
 800175c:	f7ff fe70 	bl	8001440 <HAL_SPI_TransmitReceive_DMA>
 8001760:	4605      	mov	r5, r0
 8001762:	e043      	b.n	80017ec <HAL_SPI_Receive_DMA+0x180>
    __HAL_SPI_DISABLE(hspi);
 8001764:	6822      	ldr	r2, [r4, #0]
 8001766:	6813      	ldr	r3, [r2, #0]
 8001768:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800176c:	6013      	str	r3, [r2, #0]
    SPI_1LINE_RX(hspi);
 800176e:	6822      	ldr	r2, [r4, #0]
 8001770:	6813      	ldr	r3, [r2, #0]
 8001772:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001776:	6013      	str	r3, [r2, #0]
 8001778:	e7a5      	b.n	80016c6 <HAL_SPI_Receive_DMA+0x5a>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800177a:	6822      	ldr	r2, [r4, #0]
 800177c:	6853      	ldr	r3, [r2, #4]
 800177e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001782:	6053      	str	r3, [r2, #4]
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001784:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001786:	695b      	ldr	r3, [r3, #20]
 8001788:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800178c:	d1b3      	bne.n	80016f6 <HAL_SPI_Receive_DMA+0x8a>
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800178e:	6822      	ldr	r2, [r4, #0]
 8001790:	6853      	ldr	r3, [r2, #4]
 8001792:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001796:	6053      	str	r3, [r2, #4]
      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8001798:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800179c:	f013 0f01 	tst.w	r3, #1
 80017a0:	d10b      	bne.n	80017ba <HAL_SPI_Receive_DMA+0x14e>
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80017a2:	6822      	ldr	r2, [r4, #0]
 80017a4:	6853      	ldr	r3, [r2, #4]
 80017a6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80017aa:	6053      	str	r3, [r2, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 80017ac:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80017b0:	f3c3 034e 	ubfx	r3, r3, #1, #15
 80017b4:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 80017b8:	e79d      	b.n	80016f6 <HAL_SPI_Receive_DMA+0x8a>
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80017ba:	6822      	ldr	r2, [r4, #0]
 80017bc:	6853      	ldr	r3, [r2, #4]
 80017be:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80017c2:	6053      	str	r3, [r2, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 80017c4:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80017c8:	f3c3 034e 	ubfx	r3, r3, #1, #15
 80017cc:	3301      	adds	r3, #1
 80017ce:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 80017d2:	e790      	b.n	80016f6 <HAL_SPI_Receive_DMA+0x8a>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80017d4:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80017d6:	f043 0310 	orr.w	r3, r3, #16
 80017da:	6623      	str	r3, [r4, #96]	; 0x60
    hspi->State = HAL_SPI_STATE_READY;
 80017dc:	2301      	movs	r3, #1
 80017de:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
    goto error;
 80017e2:	e000      	b.n	80017e6 <HAL_SPI_Receive_DMA+0x17a>
    errorcode = HAL_BUSY;
 80017e4:	2502      	movs	r5, #2
  __HAL_UNLOCK(hspi);
 80017e6:	2300      	movs	r3, #0
 80017e8:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 80017ec:	4628      	mov	r0, r5
 80017ee:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hspi);
 80017f0:	2502      	movs	r5, #2
 80017f2:	e7fb      	b.n	80017ec <HAL_SPI_Receive_DMA+0x180>
 80017f4:	08001813 	.word	0x08001813
 80017f8:	080018bd 	.word	0x080018bd
 80017fc:	0800182b 	.word	0x0800182b

08001800 <HAL_SPI_TxCpltCallback>:
}
 8001800:	4770      	bx	lr

08001802 <HAL_SPI_TxRxCpltCallback>:
}
 8001802:	4770      	bx	lr

08001804 <HAL_SPI_TxHalfCpltCallback>:
}
 8001804:	4770      	bx	lr

08001806 <SPI_DMAHalfTransmitCplt>:
{
 8001806:	b508      	push	{r3, lr}
  HAL_SPI_TxHalfCpltCallback(hspi);
 8001808:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800180a:	f7ff fffb 	bl	8001804 <HAL_SPI_TxHalfCpltCallback>
}
 800180e:	bd08      	pop	{r3, pc}

08001810 <HAL_SPI_RxHalfCpltCallback>:
}
 8001810:	4770      	bx	lr

08001812 <SPI_DMAHalfReceiveCplt>:
{
 8001812:	b508      	push	{r3, lr}
  HAL_SPI_RxHalfCpltCallback(hspi);
 8001814:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8001816:	f7ff fffb 	bl	8001810 <HAL_SPI_RxHalfCpltCallback>
}
 800181a:	bd08      	pop	{r3, pc}

0800181c <HAL_SPI_TxRxHalfCpltCallback>:
}
 800181c:	4770      	bx	lr

0800181e <SPI_DMAHalfTransmitReceiveCplt>:
{
 800181e:	b508      	push	{r3, lr}
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8001820:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8001822:	f7ff fffb 	bl	800181c <HAL_SPI_TxRxHalfCpltCallback>
}
 8001826:	bd08      	pop	{r3, pc}

08001828 <HAL_SPI_ErrorCallback>:
}
 8001828:	4770      	bx	lr

0800182a <SPI_DMAError>:
{
 800182a:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800182c:	6a40      	ldr	r0, [r0, #36]	; 0x24
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800182e:	6802      	ldr	r2, [r0, #0]
 8001830:	6853      	ldr	r3, [r2, #4]
 8001832:	f023 0303 	bic.w	r3, r3, #3
 8001836:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8001838:	6e03      	ldr	r3, [r0, #96]	; 0x60
 800183a:	f043 0310 	orr.w	r3, r3, #16
 800183e:	6603      	str	r3, [r0, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8001840:	2301      	movs	r3, #1
 8001842:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
  HAL_SPI_ErrorCallback(hspi);
 8001846:	f7ff ffef 	bl	8001828 <HAL_SPI_ErrorCallback>
}
 800184a:	bd08      	pop	{r3, pc}

0800184c <SPI_DMATransmitCplt>:
{
 800184c:	b530      	push	{r4, r5, lr}
 800184e:	b083      	sub	sp, #12
 8001850:	4605      	mov	r5, r0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8001852:	6a44      	ldr	r4, [r0, #36]	; 0x24
  tickstart = HAL_GetTick();
 8001854:	f7fe fcfa 	bl	800024c <HAL_GetTick>
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8001858:	682b      	ldr	r3, [r5, #0]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f013 0f20 	tst.w	r3, #32
 8001860:	d123      	bne.n	80018aa <SPI_DMATransmitCplt+0x5e>
 8001862:	4602      	mov	r2, r0
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8001864:	6821      	ldr	r1, [r4, #0]
 8001866:	684b      	ldr	r3, [r1, #4]
 8001868:	f023 0320 	bic.w	r3, r3, #32
 800186c:	604b      	str	r3, [r1, #4]
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800186e:	6821      	ldr	r1, [r4, #0]
 8001870:	684b      	ldr	r3, [r1, #4]
 8001872:	f023 0302 	bic.w	r3, r3, #2
 8001876:	604b      	str	r3, [r1, #4]
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8001878:	2164      	movs	r1, #100	; 0x64
 800187a:	4620      	mov	r0, r4
 800187c:	f7ff fc60 	bl	8001140 <SPI_EndRxTxTransaction>
 8001880:	b118      	cbz	r0, 800188a <SPI_DMATransmitCplt+0x3e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001882:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001884:	f043 0320 	orr.w	r3, r3, #32
 8001888:	6623      	str	r3, [r4, #96]	; 0x60
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800188a:	68a3      	ldr	r3, [r4, #8]
 800188c:	b933      	cbnz	r3, 800189c <SPI_DMATransmitCplt+0x50>
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800188e:	9301      	str	r3, [sp, #4]
 8001890:	6823      	ldr	r3, [r4, #0]
 8001892:	68da      	ldr	r2, [r3, #12]
 8001894:	9201      	str	r2, [sp, #4]
 8001896:	689b      	ldr	r3, [r3, #8]
 8001898:	9301      	str	r3, [sp, #4]
 800189a:	9b01      	ldr	r3, [sp, #4]
    hspi->TxXferCount = 0U;
 800189c:	2300      	movs	r3, #0
 800189e:	87e3      	strh	r3, [r4, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 80018a0:	2301      	movs	r3, #1
 80018a2:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80018a6:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80018a8:	b923      	cbnz	r3, 80018b4 <SPI_DMATransmitCplt+0x68>
  HAL_SPI_TxCpltCallback(hspi);
 80018aa:	4620      	mov	r0, r4
 80018ac:	f7ff ffa8 	bl	8001800 <HAL_SPI_TxCpltCallback>
}
 80018b0:	b003      	add	sp, #12
 80018b2:	bd30      	pop	{r4, r5, pc}
      HAL_SPI_ErrorCallback(hspi);
 80018b4:	4620      	mov	r0, r4
 80018b6:	f7ff ffb7 	bl	8001828 <HAL_SPI_ErrorCallback>
      return;
 80018ba:	e7f9      	b.n	80018b0 <SPI_DMATransmitCplt+0x64>

080018bc <SPI_DMAReceiveCplt>:
{
 80018bc:	b538      	push	{r3, r4, r5, lr}
 80018be:	4605      	mov	r5, r0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80018c0:	6a44      	ldr	r4, [r0, #36]	; 0x24
  tickstart = HAL_GetTick();
 80018c2:	f7fe fcc3 	bl	800024c <HAL_GetTick>
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80018c6:	682b      	ldr	r3, [r5, #0]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f013 0f20 	tst.w	r3, #32
 80018ce:	d11f      	bne.n	8001910 <SPI_DMAReceiveCplt+0x54>
 80018d0:	4602      	mov	r2, r0
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80018d2:	6821      	ldr	r1, [r4, #0]
 80018d4:	684b      	ldr	r3, [r1, #4]
 80018d6:	f023 0320 	bic.w	r3, r3, #32
 80018da:	604b      	str	r3, [r1, #4]
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80018dc:	68a3      	ldr	r3, [r4, #8]
 80018de:	b91b      	cbnz	r3, 80018e8 <SPI_DMAReceiveCplt+0x2c>
 80018e0:	6863      	ldr	r3, [r4, #4]
 80018e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80018e6:	d017      	beq.n	8001918 <SPI_DMAReceiveCplt+0x5c>
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80018e8:	6821      	ldr	r1, [r4, #0]
 80018ea:	684b      	ldr	r3, [r1, #4]
 80018ec:	f023 0301 	bic.w	r3, r3, #1
 80018f0:	604b      	str	r3, [r1, #4]
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80018f2:	2164      	movs	r1, #100	; 0x64
 80018f4:	4620      	mov	r0, r4
 80018f6:	f7ff fc54 	bl	80011a2 <SPI_EndRxTransaction>
 80018fa:	b108      	cbz	r0, 8001900 <SPI_DMAReceiveCplt+0x44>
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80018fc:	2320      	movs	r3, #32
 80018fe:	6623      	str	r3, [r4, #96]	; 0x60
    hspi->RxXferCount = 0U;
 8001900:	2300      	movs	r3, #0
 8001902:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8001906:	2301      	movs	r3, #1
 8001908:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800190c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800190e:	b94b      	cbnz	r3, 8001924 <SPI_DMAReceiveCplt+0x68>
  HAL_SPI_RxCpltCallback(hspi);
 8001910:	4620      	mov	r0, r4
 8001912:	f000 fde3 	bl	80024dc <HAL_SPI_RxCpltCallback>
}
 8001916:	bd38      	pop	{r3, r4, r5, pc}
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8001918:	6821      	ldr	r1, [r4, #0]
 800191a:	684b      	ldr	r3, [r1, #4]
 800191c:	f023 0303 	bic.w	r3, r3, #3
 8001920:	604b      	str	r3, [r1, #4]
 8001922:	e7e6      	b.n	80018f2 <SPI_DMAReceiveCplt+0x36>
      HAL_SPI_ErrorCallback(hspi);
 8001924:	4620      	mov	r0, r4
 8001926:	f7ff ff7f 	bl	8001828 <HAL_SPI_ErrorCallback>
      return;
 800192a:	e7f4      	b.n	8001916 <SPI_DMAReceiveCplt+0x5a>

0800192c <SPI_DMATransmitReceiveCplt>:
{
 800192c:	b538      	push	{r3, r4, r5, lr}
 800192e:	4605      	mov	r5, r0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8001930:	6a44      	ldr	r4, [r0, #36]	; 0x24
  tickstart = HAL_GetTick();
 8001932:	f7fe fc8b 	bl	800024c <HAL_GetTick>
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8001936:	682b      	ldr	r3, [r5, #0]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f013 0f20 	tst.w	r3, #32
 800193e:	d11c      	bne.n	800197a <SPI_DMATransmitReceiveCplt+0x4e>
 8001940:	4602      	mov	r2, r0
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8001942:	6821      	ldr	r1, [r4, #0]
 8001944:	684b      	ldr	r3, [r1, #4]
 8001946:	f023 0320 	bic.w	r3, r3, #32
 800194a:	604b      	str	r3, [r1, #4]
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800194c:	2164      	movs	r1, #100	; 0x64
 800194e:	4620      	mov	r0, r4
 8001950:	f7ff fbf6 	bl	8001140 <SPI_EndRxTxTransaction>
 8001954:	b118      	cbz	r0, 800195e <SPI_DMATransmitReceiveCplt+0x32>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001956:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001958:	f043 0320 	orr.w	r3, r3, #32
 800195c:	6623      	str	r3, [r4, #96]	; 0x60
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800195e:	6822      	ldr	r2, [r4, #0]
 8001960:	6853      	ldr	r3, [r2, #4]
 8001962:	f023 0303 	bic.w	r3, r3, #3
 8001966:	6053      	str	r3, [r2, #4]
    hspi->TxXferCount = 0U;
 8001968:	2300      	movs	r3, #0
 800196a:	87e3      	strh	r3, [r4, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 800196c:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8001970:	2301      	movs	r3, #1
 8001972:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001976:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001978:	b91b      	cbnz	r3, 8001982 <SPI_DMATransmitReceiveCplt+0x56>
  HAL_SPI_TxRxCpltCallback(hspi);
 800197a:	4620      	mov	r0, r4
 800197c:	f7ff ff41 	bl	8001802 <HAL_SPI_TxRxCpltCallback>
}
 8001980:	bd38      	pop	{r3, r4, r5, pc}
      HAL_SPI_ErrorCallback(hspi);
 8001982:	4620      	mov	r0, r4
 8001984:	f7ff ff50 	bl	8001828 <HAL_SPI_ErrorCallback>
      return;
 8001988:	e7fa      	b.n	8001980 <SPI_DMATransmitReceiveCplt+0x54>
	...

0800198c <HAL_SPI_IRQHandler>:
{
 800198c:	b530      	push	{r4, r5, lr}
 800198e:	b085      	sub	sp, #20
 8001990:	4604      	mov	r4, r0
  uint32_t itsource = hspi->Instance->CR2;
 8001992:	6802      	ldr	r2, [r0, #0]
 8001994:	6851      	ldr	r1, [r2, #4]
  uint32_t itflag   = hspi->Instance->SR;
 8001996:	6893      	ldr	r3, [r2, #8]
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8001998:	f3c3 1080 	ubfx	r0, r3, #6, #1
 800199c:	f013 0f40 	tst.w	r3, #64	; 0x40
 80019a0:	d105      	bne.n	80019ae <HAL_SPI_IRQHandler+0x22>
 80019a2:	f013 0f01 	tst.w	r3, #1
 80019a6:	d002      	beq.n	80019ae <HAL_SPI_IRQHandler+0x22>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80019a8:	f011 0f40 	tst.w	r1, #64	; 0x40
 80019ac:	d169      	bne.n	8001a82 <HAL_SPI_IRQHandler+0xf6>
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80019ae:	f013 0f02 	tst.w	r3, #2
 80019b2:	d002      	beq.n	80019ba <HAL_SPI_IRQHandler+0x2e>
 80019b4:	f011 0f80 	tst.w	r1, #128	; 0x80
 80019b8:	d167      	bne.n	8001a8a <HAL_SPI_IRQHandler+0xfe>
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80019ba:	f3c3 1540 	ubfx	r5, r3, #5, #1
 80019be:	f013 0f20 	tst.w	r3, #32
 80019c2:	d103      	bne.n	80019cc <HAL_SPI_IRQHandler+0x40>
 80019c4:	b910      	cbnz	r0, 80019cc <HAL_SPI_IRQHandler+0x40>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80019c6:	f413 7f80 	tst.w	r3, #256	; 0x100
 80019ca:	d061      	beq.n	8001a90 <HAL_SPI_IRQHandler+0x104>
 80019cc:	f011 0f20 	tst.w	r1, #32
 80019d0:	d05e      	beq.n	8001a90 <HAL_SPI_IRQHandler+0x104>
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80019d2:	b178      	cbz	r0, 80019f4 <HAL_SPI_IRQHandler+0x68>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80019d4:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
 80019d8:	b2c0      	uxtb	r0, r0
 80019da:	2803      	cmp	r0, #3
 80019dc:	d05a      	beq.n	8001a94 <HAL_SPI_IRQHandler+0x108>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80019de:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80019e0:	f040 0004 	orr.w	r0, r0, #4
 80019e4:	6620      	str	r0, [r4, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80019e6:	2000      	movs	r0, #0
 80019e8:	9000      	str	r0, [sp, #0]
 80019ea:	68d0      	ldr	r0, [r2, #12]
 80019ec:	9000      	str	r0, [sp, #0]
 80019ee:	6890      	ldr	r0, [r2, #8]
 80019f0:	9000      	str	r0, [sp, #0]
 80019f2:	9800      	ldr	r0, [sp, #0]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80019f4:	b165      	cbz	r5, 8001a10 <HAL_SPI_IRQHandler+0x84>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80019f6:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80019f8:	f040 0001 	orr.w	r0, r0, #1
 80019fc:	6620      	str	r0, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80019fe:	2000      	movs	r0, #0
 8001a00:	9002      	str	r0, [sp, #8]
 8001a02:	6890      	ldr	r0, [r2, #8]
 8001a04:	9002      	str	r0, [sp, #8]
 8001a06:	6810      	ldr	r0, [r2, #0]
 8001a08:	f020 0040 	bic.w	r0, r0, #64	; 0x40
 8001a0c:	6010      	str	r0, [r2, #0]
 8001a0e:	9a02      	ldr	r2, [sp, #8]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8001a10:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001a14:	d009      	beq.n	8001a2a <HAL_SPI_IRQHandler+0x9e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8001a16:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001a18:	f043 0308 	orr.w	r3, r3, #8
 8001a1c:	6623      	str	r3, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8001a1e:	2300      	movs	r3, #0
 8001a20:	9303      	str	r3, [sp, #12]
 8001a22:	6823      	ldr	r3, [r4, #0]
 8001a24:	689b      	ldr	r3, [r3, #8]
 8001a26:	9303      	str	r3, [sp, #12]
 8001a28:	9b03      	ldr	r3, [sp, #12]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001a2a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d02f      	beq.n	8001a90 <HAL_SPI_IRQHandler+0x104>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8001a30:	6822      	ldr	r2, [r4, #0]
 8001a32:	6853      	ldr	r3, [r2, #4]
 8001a34:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8001a38:	6053      	str	r3, [r2, #4]
      hspi->State = HAL_SPI_STATE_READY;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8001a40:	f011 0f03 	tst.w	r1, #3
 8001a44:	d02e      	beq.n	8001aa4 <HAL_SPI_IRQHandler+0x118>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8001a46:	6822      	ldr	r2, [r4, #0]
 8001a48:	6853      	ldr	r3, [r2, #4]
 8001a4a:	f023 0303 	bic.w	r3, r3, #3
 8001a4e:	6053      	str	r3, [r2, #4]
        if (hspi->hdmarx != NULL)
 8001a50:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001a52:	b14b      	cbz	r3, 8001a68 <HAL_SPI_IRQHandler+0xdc>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8001a54:	4a15      	ldr	r2, [pc, #84]	; (8001aac <HAL_SPI_IRQHandler+0x120>)
 8001a56:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8001a58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001a5a:	f7fe fd05 	bl	8000468 <HAL_DMA_Abort_IT>
 8001a5e:	b118      	cbz	r0, 8001a68 <HAL_SPI_IRQHandler+0xdc>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8001a60:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001a62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a66:	6623      	str	r3, [r4, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8001a68:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001a6a:	b18b      	cbz	r3, 8001a90 <HAL_SPI_IRQHandler+0x104>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8001a6c:	4a0f      	ldr	r2, [pc, #60]	; (8001aac <HAL_SPI_IRQHandler+0x120>)
 8001a6e:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8001a70:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001a72:	f7fe fcf9 	bl	8000468 <HAL_DMA_Abort_IT>
 8001a76:	b158      	cbz	r0, 8001a90 <HAL_SPI_IRQHandler+0x104>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8001a78:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001a7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a7e:	6623      	str	r3, [r4, #96]	; 0x60
 8001a80:	e006      	b.n	8001a90 <HAL_SPI_IRQHandler+0x104>
    hspi->RxISR(hspi);
 8001a82:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001a84:	4620      	mov	r0, r4
 8001a86:	4798      	blx	r3
    return;
 8001a88:	e002      	b.n	8001a90 <HAL_SPI_IRQHandler+0x104>
    hspi->TxISR(hspi);
 8001a8a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001a8c:	4620      	mov	r0, r4
 8001a8e:	4798      	blx	r3
}
 8001a90:	b005      	add	sp, #20
 8001a92:	bd30      	pop	{r4, r5, pc}
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001a94:	2300      	movs	r3, #0
 8001a96:	9301      	str	r3, [sp, #4]
 8001a98:	68d3      	ldr	r3, [r2, #12]
 8001a9a:	9301      	str	r3, [sp, #4]
 8001a9c:	6893      	ldr	r3, [r2, #8]
 8001a9e:	9301      	str	r3, [sp, #4]
 8001aa0:	9b01      	ldr	r3, [sp, #4]
        return;
 8001aa2:	e7f5      	b.n	8001a90 <HAL_SPI_IRQHandler+0x104>
        HAL_SPI_ErrorCallback(hspi);
 8001aa4:	4620      	mov	r0, r4
 8001aa6:	f7ff febf 	bl	8001828 <HAL_SPI_ErrorCallback>
    return;
 8001aaa:	e7f1      	b.n	8001a90 <HAL_SPI_IRQHandler+0x104>
 8001aac:	08001ab1 	.word	0x08001ab1

08001ab0 <SPI_DMAAbortOnError>:
{
 8001ab0:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8001ab2:	6a40      	ldr	r0, [r0, #36]	; 0x24
  hspi->RxXferCount = 0U;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8001aba:	87c3      	strh	r3, [r0, #62]	; 0x3e
  HAL_SPI_ErrorCallback(hspi);
 8001abc:	f7ff feb4 	bl	8001828 <HAL_SPI_ErrorCallback>
}
 8001ac0:	bd08      	pop	{r3, pc}
	...

08001ac4 <HAL_TIM_Base_Start>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001ac4:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001ac8:	b2db      	uxtb	r3, r3
 8001aca:	2b01      	cmp	r3, #1
 8001acc:	d12d      	bne.n	8001b2a <HAL_TIM_Base_Start+0x66>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ace:	2302      	movs	r3, #2
 8001ad0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ad4:	6803      	ldr	r3, [r0, #0]
 8001ad6:	4a18      	ldr	r2, [pc, #96]	; (8001b38 <HAL_TIM_Base_Start+0x74>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d018      	beq.n	8001b0e <HAL_TIM_Base_Start+0x4a>
 8001adc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ae0:	d015      	beq.n	8001b0e <HAL_TIM_Base_Start+0x4a>
 8001ae2:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d011      	beq.n	8001b0e <HAL_TIM_Base_Start+0x4a>
 8001aea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d00d      	beq.n	8001b0e <HAL_TIM_Base_Start+0x4a>
 8001af2:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d009      	beq.n	8001b0e <HAL_TIM_Base_Start+0x4a>
 8001afa:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d005      	beq.n	8001b0e <HAL_TIM_Base_Start+0x4a>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	f042 0201 	orr.w	r2, r2, #1
 8001b08:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001b0a:	2000      	movs	r0, #0
 8001b0c:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001b0e:	6899      	ldr	r1, [r3, #8]
 8001b10:	4a0a      	ldr	r2, [pc, #40]	; (8001b3c <HAL_TIM_Base_Start+0x78>)
 8001b12:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b14:	2a06      	cmp	r2, #6
 8001b16:	d00a      	beq.n	8001b2e <HAL_TIM_Base_Start+0x6a>
 8001b18:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8001b1c:	d009      	beq.n	8001b32 <HAL_TIM_Base_Start+0x6e>
      __HAL_TIM_ENABLE(htim);
 8001b1e:	681a      	ldr	r2, [r3, #0]
 8001b20:	f042 0201 	orr.w	r2, r2, #1
 8001b24:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8001b26:	2000      	movs	r0, #0
 8001b28:	4770      	bx	lr
    return HAL_ERROR;
 8001b2a:	2001      	movs	r0, #1
 8001b2c:	4770      	bx	lr
  return HAL_OK;
 8001b2e:	2000      	movs	r0, #0
 8001b30:	4770      	bx	lr
 8001b32:	2000      	movs	r0, #0
}
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop
 8001b38:	40012c00 	.word	0x40012c00
 8001b3c:	00010007 	.word	0x00010007

08001b40 <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001b40:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001b42:	4a2c      	ldr	r2, [pc, #176]	; (8001bf4 <TIM_Base_SetConfig+0xb4>)
 8001b44:	4290      	cmp	r0, r2
 8001b46:	d00e      	beq.n	8001b66 <TIM_Base_SetConfig+0x26>
 8001b48:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001b4c:	d00b      	beq.n	8001b66 <TIM_Base_SetConfig+0x26>
 8001b4e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001b52:	4290      	cmp	r0, r2
 8001b54:	d007      	beq.n	8001b66 <TIM_Base_SetConfig+0x26>
 8001b56:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001b5a:	4290      	cmp	r0, r2
 8001b5c:	d003      	beq.n	8001b66 <TIM_Base_SetConfig+0x26>
 8001b5e:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 8001b62:	4290      	cmp	r0, r2
 8001b64:	d103      	bne.n	8001b6e <TIM_Base_SetConfig+0x2e>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001b66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001b6a:	684a      	ldr	r2, [r1, #4]
 8001b6c:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001b6e:	4a21      	ldr	r2, [pc, #132]	; (8001bf4 <TIM_Base_SetConfig+0xb4>)
 8001b70:	4290      	cmp	r0, r2
 8001b72:	d01a      	beq.n	8001baa <TIM_Base_SetConfig+0x6a>
 8001b74:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001b78:	d017      	beq.n	8001baa <TIM_Base_SetConfig+0x6a>
 8001b7a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001b7e:	4290      	cmp	r0, r2
 8001b80:	d013      	beq.n	8001baa <TIM_Base_SetConfig+0x6a>
 8001b82:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001b86:	4290      	cmp	r0, r2
 8001b88:	d00f      	beq.n	8001baa <TIM_Base_SetConfig+0x6a>
 8001b8a:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 8001b8e:	4290      	cmp	r0, r2
 8001b90:	d00b      	beq.n	8001baa <TIM_Base_SetConfig+0x6a>
 8001b92:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8001b96:	4290      	cmp	r0, r2
 8001b98:	d007      	beq.n	8001baa <TIM_Base_SetConfig+0x6a>
 8001b9a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001b9e:	4290      	cmp	r0, r2
 8001ba0:	d003      	beq.n	8001baa <TIM_Base_SetConfig+0x6a>
 8001ba2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001ba6:	4290      	cmp	r0, r2
 8001ba8:	d103      	bne.n	8001bb2 <TIM_Base_SetConfig+0x72>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001baa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001bae:	68ca      	ldr	r2, [r1, #12]
 8001bb0:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001bb2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001bb6:	694a      	ldr	r2, [r1, #20]
 8001bb8:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8001bba:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001bbc:	688b      	ldr	r3, [r1, #8]
 8001bbe:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001bc0:	680b      	ldr	r3, [r1, #0]
 8001bc2:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001bc4:	4b0b      	ldr	r3, [pc, #44]	; (8001bf4 <TIM_Base_SetConfig+0xb4>)
 8001bc6:	4298      	cmp	r0, r3
 8001bc8:	d00f      	beq.n	8001bea <TIM_Base_SetConfig+0xaa>
 8001bca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001bce:	4298      	cmp	r0, r3
 8001bd0:	d00b      	beq.n	8001bea <TIM_Base_SetConfig+0xaa>
 8001bd2:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8001bd6:	4298      	cmp	r0, r3
 8001bd8:	d007      	beq.n	8001bea <TIM_Base_SetConfig+0xaa>
 8001bda:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001bde:	4298      	cmp	r0, r3
 8001be0:	d003      	beq.n	8001bea <TIM_Base_SetConfig+0xaa>
 8001be2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001be6:	4298      	cmp	r0, r3
 8001be8:	d101      	bne.n	8001bee <TIM_Base_SetConfig+0xae>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001bea:	690b      	ldr	r3, [r1, #16]
 8001bec:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	6143      	str	r3, [r0, #20]
}
 8001bf2:	4770      	bx	lr
 8001bf4:	40012c00 	.word	0x40012c00

08001bf8 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8001bf8:	b360      	cbz	r0, 8001c54 <HAL_TIM_Base_Init+0x5c>
{
 8001bfa:	b510      	push	{r4, lr}
 8001bfc:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8001bfe:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001c02:	b313      	cbz	r3, 8001c4a <HAL_TIM_Base_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 8001c04:	2302      	movs	r3, #2
 8001c06:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c0a:	4621      	mov	r1, r4
 8001c0c:	f851 0b04 	ldr.w	r0, [r1], #4
 8001c10:	f7ff ff96 	bl	8001b40 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c14:	2301      	movs	r3, #1
 8001c16:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c1a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8001c1e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8001c22:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8001c26:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8001c2a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001c2e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c32:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8001c36:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001c3a:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8001c3e:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8001c42:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001c46:	2000      	movs	r0, #0
}
 8001c48:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8001c4a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8001c4e:	f000 fdbf 	bl	80027d0 <HAL_TIM_Base_MspInit>
 8001c52:	e7d7      	b.n	8001c04 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8001c54:	2001      	movs	r0, #1
}
 8001c56:	4770      	bx	lr

08001c58 <smallRbit>:
 8001c58:	fa90 f0a0 	rbit	r0, r0
{5,0,7,0,6,0} /* the bit shift to convert cab to the afbecd format */
};

uint8_t smallRbit(uint8_t re){
	return (uint8_t)(__RBIT(re) >> 24);
}
 8001c5c:	0e00      	lsrs	r0, r0, #24
 8001c5e:	4770      	bx	lr

08001c60 <Delay_us>:

// used for Display blanking
void Delay_us(uint16_t usecs){
	__HAL_TIM_SET_COUNTER(&htim17,0);  // set the counter value a 0
 8001c60:	4b03      	ldr	r3, [pc, #12]	; (8001c70 <Delay_us+0x10>)
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	2300      	movs	r3, #0
 8001c66:	6253      	str	r3, [r2, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim17) < usecs);  // wait for the counter to reach the us input in the parameter
 8001c68:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8001c6a:	4283      	cmp	r3, r0
 8001c6c:	d3fc      	bcc.n	8001c68 <Delay_us+0x8>
}
 8001c6e:	4770      	bx	lr
 8001c70:	2000025c 	.word	0x2000025c

08001c74 <VFDLoadBMP>:
	FB0 = malloc(750);// malloc the frame buffer memory
	VFDFill(false);
}

// Load 6bit data to the send buffer
void VFDLoadBMP(MN15439A *VFDDisp, uint8_t Grid){
 8001c74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001c78:	4605      	mov	r5, r0
 8001c7a:	4689      	mov	r9, r1
	// Logically thinking : Determine the Grid is Event or Odd number (Important, For the simple algorithm to convert abcdef to afbecd format).
		uint8_t EvOd = 0;
		if(Grid%2){
 8001c7c:	f011 0401 	ands.w	r4, r1, #1
 8001c80:	d000      	beq.n	8001c84 <VFDLoadBMP+0x10>
			EvOd = 1;// odd number (odd grid), Only manipulate the a, b, c Dots
 8001c82:	2401      	movs	r4, #1
		}else{
			EvOd = 0;// event number (event grid), Only manipulate the d, e, f Dots
		}

		// clean the previous left over Grid bit
			memset(GPbuff, 0x00, 36);
 8001c84:	2224      	movs	r2, #36	; 0x24
 8001c86:	2100      	movs	r1, #0
 8001c88:	48b0      	ldr	r0, [pc, #704]	; (8001f4c <VFDLoadBMP+0x2d8>)
 8001c8a:	f000 fe21 	bl	80028d0 <memset>

uint8_t nxtWrd = 0;
uint8_t CMP= 0;

uint16_t X_offset = (uint8_t)((Grid-1) / 8) * 3;// calculate the horizontal offset, starting point for each grid number
 8001c8e:	f109 33ff 	add.w	r3, r9, #4294967295
 8001c92:	461a      	mov	r2, r3
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	db12      	blt.n	8001cbe <VFDLoadBMP+0x4a>
 8001c98:	f3c2 02c7 	ubfx	r2, r2, #3, #8
 8001c9c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
// [a][b][c][d][e][f]/[a][b] [c][d][e][f]/[a][b][c][d] [e][f]/[a][b][c][d][e][f]
//

//img1[x] format = (bit7)[a][b][c][d][e][f][0][0](bit0)

switch ((Grid-1) % 8){
 8001ca0:	4259      	negs	r1, r3
 8001ca2:	f003 0307 	and.w	r3, r3, #7
 8001ca6:	f001 0107 	and.w	r1, r1, #7
 8001caa:	bf58      	it	pl
 8001cac:	424b      	negpl	r3, r1
 8001cae:	2b07      	cmp	r3, #7
 8001cb0:	d817      	bhi.n	8001ce2 <VFDLoadBMP+0x6e>
 8001cb2:	e8df f003 	tbb	[pc, r3]
 8001cb6:	1a1a      	.short	0x1a1a
 8001cb8:	50503535 	.word	0x50503535
 8001cbc:	6565      	.short	0x6565
uint16_t X_offset = (uint8_t)((Grid-1) / 8) * 3;// calculate the horizontal offset, starting point for each grid number
 8001cbe:	1dda      	adds	r2, r3, #7
 8001cc0:	e7ea      	b.n	8001c98 <VFDLoadBMP+0x24>
case(0):
case(1):
	for(uint8_t i=0;i < 39; i++){
		Y_offset = X_offset + (i * 20);// calculate the vertical offset
 8001cc2:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	b29b      	uxth	r3, r3
 8001cca:	4413      	add	r3, r2
 8001ccc:	b29b      	uxth	r3, r3
		ABCarray[i] = FB0[Y_offset];// filtered only first 6 bit, 2 remain bits will be on next array
 8001cce:	489f      	ldr	r0, [pc, #636]	; (8001f4c <VFDLoadBMP+0x2d8>)
 8001cd0:	6a47      	ldr	r7, [r0, #36]	; 0x24
 8001cd2:	5cfb      	ldrb	r3, [r7, r3]
 8001cd4:	4408      	add	r0, r1
 8001cd6:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
	for(uint8_t i=0;i < 39; i++){
 8001cda:	3101      	adds	r1, #1
 8001cdc:	b2c9      	uxtb	r1, r1
 8001cde:	2926      	cmp	r1, #38	; 0x26
 8001ce0:	d9ef      	bls.n	8001cc2 <VFDLoadBMP+0x4e>
		}

		// GPbuff[8-11] and GPbuff[20-23]
		//
		//4 bytes on 3rd buffer array
		for(uint8_t i=0;i < 32;i++){
 8001ce2:	2000      	movs	r0, #0
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	4601      	mov	r1, r0
 8001ce8:	e12a      	b.n	8001f40 <VFDLoadBMP+0x2cc>
switch ((Grid-1) % 8){
 8001cea:	2100      	movs	r1, #0
 8001cec:	e7f7      	b.n	8001cde <VFDLoadBMP+0x6a>
		Y_offset = X_offset + (i * 20);// calculate the vertical offset
 8001cee:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 8001cf2:	009b      	lsls	r3, r3, #2
 8001cf4:	b29b      	uxth	r3, r3
 8001cf6:	4413      	add	r3, r2
 8001cf8:	b29b      	uxth	r3, r3
		ABCarray[i] = FB0[Y_offset] << 6;// bit 0 and 1 will be on [a] and [b] bit on next 6 bit array
 8001cfa:	4f94      	ldr	r7, [pc, #592]	; (8001f4c <VFDLoadBMP+0x2d8>)
 8001cfc:	6a7e      	ldr	r6, [r7, #36]	; 0x24
 8001cfe:	5cf0      	ldrb	r0, [r6, r3]
 8001d00:	0180      	lsls	r0, r0, #6
 8001d02:	b2c0      	uxtb	r0, r0
 8001d04:	440f      	add	r7, r1
		ABCarray[i] |= (FB0[Y_offset+1] >> 2) & 0x3C;// bit 7-4 will be on [c][d][e][f], 4 remain bits will be on next array
 8001d06:	4433      	add	r3, r6
 8001d08:	785b      	ldrb	r3, [r3, #1]
 8001d0a:	089b      	lsrs	r3, r3, #2
 8001d0c:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8001d10:	4303      	orrs	r3, r0
 8001d12:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	for(uint8_t i=0;i < 39; i++){
 8001d16:	3101      	adds	r1, #1
 8001d18:	b2c9      	uxtb	r1, r1
 8001d1a:	2926      	cmp	r1, #38	; 0x26
 8001d1c:	d9e7      	bls.n	8001cee <VFDLoadBMP+0x7a>
 8001d1e:	e7e0      	b.n	8001ce2 <VFDLoadBMP+0x6e>
switch ((Grid-1) % 8){
 8001d20:	2100      	movs	r1, #0
 8001d22:	e7fa      	b.n	8001d1a <VFDLoadBMP+0xa6>
		Y_offset = X_offset + (i * 20);// calculate the vertical offset
 8001d24:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 8001d28:	009b      	lsls	r3, r3, #2
 8001d2a:	b29b      	uxth	r3, r3
 8001d2c:	4413      	add	r3, r2
		ABCarray[i] = FB0[Y_offset+1] << 4;// bit 3-0 will be on [a][b][c][d]
 8001d2e:	4f87      	ldr	r7, [pc, #540]	; (8001f4c <VFDLoadBMP+0x2d8>)
 8001d30:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001d32:	fa10 f383 	uxtah	r3, r0, r3
 8001d36:	7858      	ldrb	r0, [r3, #1]
 8001d38:	0100      	lsls	r0, r0, #4
 8001d3a:	b2c0      	uxtb	r0, r0
 8001d3c:	440f      	add	r7, r1
		ABCarray[i] |= (FB0[Y_offset+2] >> 4) & 0x0C;// bit 7 and 6 will be on [e][f], 6 remain bits will be on next array
 8001d3e:	789b      	ldrb	r3, [r3, #2]
 8001d40:	091b      	lsrs	r3, r3, #4
 8001d42:	f003 030c 	and.w	r3, r3, #12
 8001d46:	4303      	orrs	r3, r0
 8001d48:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	for(uint8_t i=0;i < 39; i++){
 8001d4c:	3101      	adds	r1, #1
 8001d4e:	b2c9      	uxtb	r1, r1
 8001d50:	2926      	cmp	r1, #38	; 0x26
 8001d52:	d9e7      	bls.n	8001d24 <VFDLoadBMP+0xb0>
 8001d54:	e7c5      	b.n	8001ce2 <VFDLoadBMP+0x6e>
switch ((Grid-1) % 8){
 8001d56:	2100      	movs	r1, #0
 8001d58:	e7fa      	b.n	8001d50 <VFDLoadBMP+0xdc>
		Y_offset = X_offset + (i * 20);// calculate the vertical offset
 8001d5a:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 8001d5e:	009b      	lsls	r3, r3, #2
 8001d60:	b29b      	uxth	r3, r3
 8001d62:	4413      	add	r3, r2
		ABCarray[i] = FB0[Y_offset+2] << 2;// push 6 remain bits to align with 6 bit array.
 8001d64:	4879      	ldr	r0, [pc, #484]	; (8001f4c <VFDLoadBMP+0x2d8>)
 8001d66:	6a47      	ldr	r7, [r0, #36]	; 0x24
 8001d68:	fa17 f383 	uxtah	r3, r7, r3
 8001d6c:	789b      	ldrb	r3, [r3, #2]
 8001d6e:	009b      	lsls	r3, r3, #2
 8001d70:	4408      	add	r0, r1
 8001d72:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
	for(uint8_t i=0;i < 39; i++){
 8001d76:	3101      	adds	r1, #1
 8001d78:	b2c9      	uxtb	r1, r1
 8001d7a:	2926      	cmp	r1, #38	; 0x26
 8001d7c:	d9ed      	bls.n	8001d5a <VFDLoadBMP+0xe6>
 8001d7e:	e7b0      	b.n	8001ce2 <VFDLoadBMP+0x6e>
switch ((Grid-1) % 8){
 8001d80:	2100      	movs	r1, #0
 8001d82:	e7fa      	b.n	8001d7a <VFDLoadBMP+0x106>
				GPbuff[(i/8)+nxtWrd] &= ~(1 << i%8);
 8001d84:	eb01 0cd7 	add.w	ip, r1, r7, lsr #3
 8001d88:	f007 0807 	and.w	r8, r7, #7
 8001d8c:	f04f 0e01 	mov.w	lr, #1
 8001d90:	fa0e f808 	lsl.w	r8, lr, r8
 8001d94:	4e6d      	ldr	r6, [pc, #436]	; (8001f4c <VFDLoadBMP+0x2d8>)
 8001d96:	f816 e00c 	ldrb.w	lr, [r6, ip]
 8001d9a:	ea2e 0e08 	bic.w	lr, lr, r8
 8001d9e:	f806 e00c 	strb.w	lr, [r6, ip]
			if((i%6) == 5){// move to next bitmap when we complete previous 6bit BMP
 8001da2:	2b05      	cmp	r3, #5
 8001da4:	d02e      	beq.n	8001e04 <VFDLoadBMP+0x190>
		for(uint8_t i=0;i < 32;i++){
 8001da6:	3701      	adds	r7, #1
 8001da8:	b2ff      	uxtb	r7, r7
 8001daa:	2f1f      	cmp	r7, #31
 8001dac:	d82d      	bhi.n	8001e0a <VFDLoadBMP+0x196>
			if(ABCarray[CMP] & (1 << reOrder0[EvOd][i%6])){
 8001dae:	4b67      	ldr	r3, [pc, #412]	; (8001f4c <VFDLoadBMP+0x2d8>)
 8001db0:	4413      	add	r3, r2
 8001db2:	f893 c028 	ldrb.w	ip, [r3, #40]	; 0x28
 8001db6:	4b66      	ldr	r3, [pc, #408]	; (8001f50 <VFDLoadBMP+0x2dc>)
 8001db8:	fba3 6307 	umull	r6, r3, r3, r7
 8001dbc:	089b      	lsrs	r3, r3, #2
 8001dbe:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001dc2:	eba7 0343 	sub.w	r3, r7, r3, lsl #1
 8001dc6:	b2db      	uxtb	r3, r3
 8001dc8:	ea4f 0e44 	mov.w	lr, r4, lsl #1
 8001dcc:	eb0e 0804 	add.w	r8, lr, r4
 8001dd0:	4e60      	ldr	r6, [pc, #384]	; (8001f54 <VFDLoadBMP+0x2e0>)
 8001dd2:	eb06 0e48 	add.w	lr, r6, r8, lsl #1
 8001dd6:	f81e e003 	ldrb.w	lr, [lr, r3]
 8001dda:	fa4c fc0e 	asr.w	ip, ip, lr
 8001dde:	f01c 0f01 	tst.w	ip, #1
 8001de2:	d0cf      	beq.n	8001d84 <VFDLoadBMP+0x110>
				GPbuff[(i/8)+nxtWrd] |= (1 << i%8);
 8001de4:	eb01 0cd7 	add.w	ip, r1, r7, lsr #3
 8001de8:	f007 0807 	and.w	r8, r7, #7
 8001dec:	f04f 0e01 	mov.w	lr, #1
 8001df0:	fa0e f808 	lsl.w	r8, lr, r8
 8001df4:	4e55      	ldr	r6, [pc, #340]	; (8001f4c <VFDLoadBMP+0x2d8>)
 8001df6:	f816 e00c 	ldrb.w	lr, [r6, ip]
 8001dfa:	ea4e 0e08 	orr.w	lr, lr, r8
 8001dfe:	f806 e00c 	strb.w	lr, [r6, ip]
 8001e02:	e7ce      	b.n	8001da2 <VFDLoadBMP+0x12e>
			CMP++;
 8001e04:	3201      	adds	r2, #1
 8001e06:	b2d2      	uxtb	r2, r2
 8001e08:	e7cd      	b.n	8001da6 <VFDLoadBMP+0x132>
		for(uint8_t i=0;i < 32;i++){
 8001e0a:	2700      	movs	r7, #0
 8001e0c:	e015      	b.n	8001e3a <VFDLoadBMP+0x1c6>
				GPbuff[4+(i/8)+nxtWrd] &= ~(1 << i%8);
 8001e0e:	ea4f 0cd7 	mov.w	ip, r7, lsr #3
 8001e12:	f10c 0c04 	add.w	ip, ip, #4
 8001e16:	448c      	add	ip, r1
 8001e18:	f007 0807 	and.w	r8, r7, #7
 8001e1c:	f04f 0e01 	mov.w	lr, #1
 8001e20:	fa0e f808 	lsl.w	r8, lr, r8
 8001e24:	4e49      	ldr	r6, [pc, #292]	; (8001f4c <VFDLoadBMP+0x2d8>)
 8001e26:	f816 e00c 	ldrb.w	lr, [r6, ip]
 8001e2a:	ea2e 0e08 	bic.w	lr, lr, r8
 8001e2e:	f806 e00c 	strb.w	lr, [r6, ip]
			if((i%6) == 3){// move to next bitmap when we complete previous 6bit BMP
 8001e32:	2b03      	cmp	r3, #3
 8001e34:	d032      	beq.n	8001e9c <VFDLoadBMP+0x228>
		for(uint8_t i=0;i < 32;i++){
 8001e36:	3701      	adds	r7, #1
 8001e38:	b2ff      	uxtb	r7, r7
 8001e3a:	2f1f      	cmp	r7, #31
 8001e3c:	d831      	bhi.n	8001ea2 <VFDLoadBMP+0x22e>
			if(ABCarray[CMP] & (1 << reOrder1[EvOd][(i%6)])){
 8001e3e:	4b43      	ldr	r3, [pc, #268]	; (8001f4c <VFDLoadBMP+0x2d8>)
 8001e40:	4413      	add	r3, r2
 8001e42:	f893 c028 	ldrb.w	ip, [r3, #40]	; 0x28
 8001e46:	4b42      	ldr	r3, [pc, #264]	; (8001f50 <VFDLoadBMP+0x2dc>)
 8001e48:	fba3 6307 	umull	r6, r3, r3, r7
 8001e4c:	089b      	lsrs	r3, r3, #2
 8001e4e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001e52:	eba7 0343 	sub.w	r3, r7, r3, lsl #1
 8001e56:	b2db      	uxtb	r3, r3
 8001e58:	ea4f 0e44 	mov.w	lr, r4, lsl #1
 8001e5c:	eb0e 0804 	add.w	r8, lr, r4
 8001e60:	4e3c      	ldr	r6, [pc, #240]	; (8001f54 <VFDLoadBMP+0x2e0>)
 8001e62:	eb06 0e48 	add.w	lr, r6, r8, lsl #1
 8001e66:	449e      	add	lr, r3
 8001e68:	f89e e00c 	ldrb.w	lr, [lr, #12]
 8001e6c:	fa4c fc0e 	asr.w	ip, ip, lr
 8001e70:	f01c 0f01 	tst.w	ip, #1
 8001e74:	d0cb      	beq.n	8001e0e <VFDLoadBMP+0x19a>
				GPbuff[4+(i/8)+nxtWrd] |= (1 << i%8);
 8001e76:	ea4f 0cd7 	mov.w	ip, r7, lsr #3
 8001e7a:	f10c 0c04 	add.w	ip, ip, #4
 8001e7e:	448c      	add	ip, r1
 8001e80:	f007 0807 	and.w	r8, r7, #7
 8001e84:	f04f 0e01 	mov.w	lr, #1
 8001e88:	fa0e f808 	lsl.w	r8, lr, r8
 8001e8c:	4e2f      	ldr	r6, [pc, #188]	; (8001f4c <VFDLoadBMP+0x2d8>)
 8001e8e:	f816 e00c 	ldrb.w	lr, [r6, ip]
 8001e92:	ea4e 0e08 	orr.w	lr, lr, r8
 8001e96:	f806 e00c 	strb.w	lr, [r6, ip]
 8001e9a:	e7ca      	b.n	8001e32 <VFDLoadBMP+0x1be>
			CMP++;
 8001e9c:	3201      	adds	r2, #1
 8001e9e:	b2d2      	uxtb	r2, r2
 8001ea0:	e7c9      	b.n	8001e36 <VFDLoadBMP+0x1c2>
		for(uint8_t i=0;i < 32;i++){
 8001ea2:	2700      	movs	r7, #0
 8001ea4:	e015      	b.n	8001ed2 <VFDLoadBMP+0x25e>

			//memcpy(&CMP, sBMP,1);
			if(ABCarray[CMP] & (1 << reOrder2[EvOd][i%6])){
				GPbuff[8+(i/8)+nxtWrd] |= (1 << i%8);
			}else{
				GPbuff[8+(i/8)+nxtWrd] &= ~(1 << i%8);
 8001ea6:	ea4f 0cd7 	mov.w	ip, r7, lsr #3
 8001eaa:	f10c 0c08 	add.w	ip, ip, #8
 8001eae:	448c      	add	ip, r1
 8001eb0:	f007 0807 	and.w	r8, r7, #7
 8001eb4:	f04f 0e01 	mov.w	lr, #1
 8001eb8:	fa0e f808 	lsl.w	r8, lr, r8
 8001ebc:	4e23      	ldr	r6, [pc, #140]	; (8001f4c <VFDLoadBMP+0x2d8>)
 8001ebe:	f816 e00c 	ldrb.w	lr, [r6, ip]
 8001ec2:	ea2e 0e08 	bic.w	lr, lr, r8
 8001ec6:	f806 e00c 	strb.w	lr, [r6, ip]
			}

			if((i%6) == 1){// move to next bitmap when we complete previous 6bit BMP
 8001eca:	2b01      	cmp	r3, #1
 8001ecc:	d032      	beq.n	8001f34 <VFDLoadBMP+0x2c0>
		for(uint8_t i=0;i < 32;i++){
 8001ece:	3701      	adds	r7, #1
 8001ed0:	b2ff      	uxtb	r7, r7
 8001ed2:	2f1f      	cmp	r7, #31
 8001ed4:	d831      	bhi.n	8001f3a <VFDLoadBMP+0x2c6>
			if(ABCarray[CMP] & (1 << reOrder2[EvOd][i%6])){
 8001ed6:	4b1d      	ldr	r3, [pc, #116]	; (8001f4c <VFDLoadBMP+0x2d8>)
 8001ed8:	4413      	add	r3, r2
 8001eda:	f893 c028 	ldrb.w	ip, [r3, #40]	; 0x28
 8001ede:	4b1c      	ldr	r3, [pc, #112]	; (8001f50 <VFDLoadBMP+0x2dc>)
 8001ee0:	fba3 6307 	umull	r6, r3, r3, r7
 8001ee4:	089b      	lsrs	r3, r3, #2
 8001ee6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001eea:	eba7 0343 	sub.w	r3, r7, r3, lsl #1
 8001eee:	b2db      	uxtb	r3, r3
 8001ef0:	ea4f 0e44 	mov.w	lr, r4, lsl #1
 8001ef4:	eb0e 0804 	add.w	r8, lr, r4
 8001ef8:	4e16      	ldr	r6, [pc, #88]	; (8001f54 <VFDLoadBMP+0x2e0>)
 8001efa:	eb06 0e48 	add.w	lr, r6, r8, lsl #1
 8001efe:	449e      	add	lr, r3
 8001f00:	f89e e018 	ldrb.w	lr, [lr, #24]
 8001f04:	fa4c fc0e 	asr.w	ip, ip, lr
 8001f08:	f01c 0f01 	tst.w	ip, #1
 8001f0c:	d0cb      	beq.n	8001ea6 <VFDLoadBMP+0x232>
				GPbuff[8+(i/8)+nxtWrd] |= (1 << i%8);
 8001f0e:	ea4f 0cd7 	mov.w	ip, r7, lsr #3
 8001f12:	f10c 0c08 	add.w	ip, ip, #8
 8001f16:	448c      	add	ip, r1
 8001f18:	f007 0807 	and.w	r8, r7, #7
 8001f1c:	f04f 0e01 	mov.w	lr, #1
 8001f20:	fa0e f808 	lsl.w	r8, lr, r8
 8001f24:	4e09      	ldr	r6, [pc, #36]	; (8001f4c <VFDLoadBMP+0x2d8>)
 8001f26:	f816 e00c 	ldrb.w	lr, [r6, ip]
 8001f2a:	ea4e 0e08 	orr.w	lr, lr, r8
 8001f2e:	f806 e00c 	strb.w	lr, [r6, ip]
 8001f32:	e7ca      	b.n	8001eca <VFDLoadBMP+0x256>
			CMP++;
 8001f34:	3201      	adds	r2, #1
 8001f36:	b2d2      	uxtb	r2, r2
 8001f38:	e7c9      	b.n	8001ece <VFDLoadBMP+0x25a>
for(uint8_t wdCount=0; wdCount < 2;wdCount++){// First 6 array repeat itself so do this twice.
 8001f3a:	3001      	adds	r0, #1
 8001f3c:	b2c0      	uxtb	r0, r0
			}
		}

		nxtWrd = 12;// next time we start the array at GPbuff[12-15]
 8001f3e:	210c      	movs	r1, #12
for(uint8_t wdCount=0; wdCount < 2;wdCount++){// First 6 array repeat itself so do this twice.
 8001f40:	2801      	cmp	r0, #1
 8001f42:	d801      	bhi.n	8001f48 <VFDLoadBMP+0x2d4>
		for(uint8_t i=0;i < 32;i++){
 8001f44:	2700      	movs	r7, #0
 8001f46:	e730      	b.n	8001daa <VFDLoadBMP+0x136>
}//for(uint8_t wdCount=0; wdCount < 2;wdCount++)

		// GPbuff[24-27]
		// 33a to 38f

		for(uint8_t i=0;i < 32;i++){// for 2nd round
 8001f48:	2100      	movs	r1, #0
 8001f4a:	e018      	b.n	8001f7e <VFDLoadBMP+0x30a>
 8001f4c:	20000090 	.word	0x20000090
 8001f50:	aaaaaaab 	.word	0xaaaaaaab
 8001f54:	08002a08 	.word	0x08002a08

			if(ABCarray[CMP] & (1 << reOrder0[EvOd][i%6])){
				GPbuff[24+(i/8)] |= (1 << i%8);
			}else{
				GPbuff[24+(i/8)] &= ~(1 << i%8);
 8001f58:	08c8      	lsrs	r0, r1, #3
 8001f5a:	3018      	adds	r0, #24
 8001f5c:	f001 0c07 	and.w	ip, r1, #7
 8001f60:	2701      	movs	r7, #1
 8001f62:	fa07 fc0c 	lsl.w	ip, r7, ip
 8001f66:	f8df e1f0 	ldr.w	lr, [pc, #496]	; 8002158 <VFDLoadBMP+0x4e4>
 8001f6a:	f81e 7000 	ldrb.w	r7, [lr, r0]
 8001f6e:	ea27 070c 	bic.w	r7, r7, ip
 8001f72:	f80e 7000 	strb.w	r7, [lr, r0]
			}

			if((i%6) == 5){// move to next bitmap when we complete previous 6bit BMP
 8001f76:	2b05      	cmp	r3, #5
 8001f78:	d02b      	beq.n	8001fd2 <VFDLoadBMP+0x35e>
		for(uint8_t i=0;i < 32;i++){// for 2nd round
 8001f7a:	3101      	adds	r1, #1
 8001f7c:	b2c9      	uxtb	r1, r1
 8001f7e:	291f      	cmp	r1, #31
 8001f80:	d82a      	bhi.n	8001fd8 <VFDLoadBMP+0x364>
			if(ABCarray[CMP] & (1 << reOrder0[EvOd][i%6])){
 8001f82:	4b75      	ldr	r3, [pc, #468]	; (8002158 <VFDLoadBMP+0x4e4>)
 8001f84:	4413      	add	r3, r2
 8001f86:	f893 0028 	ldrb.w	r0, [r3, #40]	; 0x28
 8001f8a:	4b74      	ldr	r3, [pc, #464]	; (800215c <VFDLoadBMP+0x4e8>)
 8001f8c:	fba3 6301 	umull	r6, r3, r3, r1
 8001f90:	089b      	lsrs	r3, r3, #2
 8001f92:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001f96:	eba1 0343 	sub.w	r3, r1, r3, lsl #1
 8001f9a:	b2db      	uxtb	r3, r3
 8001f9c:	0067      	lsls	r7, r4, #1
 8001f9e:	eb07 0c04 	add.w	ip, r7, r4
 8001fa2:	4f6f      	ldr	r7, [pc, #444]	; (8002160 <VFDLoadBMP+0x4ec>)
 8001fa4:	eb07 074c 	add.w	r7, r7, ip, lsl #1
 8001fa8:	5cff      	ldrb	r7, [r7, r3]
 8001faa:	4138      	asrs	r0, r7
 8001fac:	f010 0f01 	tst.w	r0, #1
 8001fb0:	d0d2      	beq.n	8001f58 <VFDLoadBMP+0x2e4>
				GPbuff[24+(i/8)] |= (1 << i%8);
 8001fb2:	08c8      	lsrs	r0, r1, #3
 8001fb4:	3018      	adds	r0, #24
 8001fb6:	f001 0c07 	and.w	ip, r1, #7
 8001fba:	2701      	movs	r7, #1
 8001fbc:	fa07 fc0c 	lsl.w	ip, r7, ip
 8001fc0:	f8df e194 	ldr.w	lr, [pc, #404]	; 8002158 <VFDLoadBMP+0x4e4>
 8001fc4:	f81e 7000 	ldrb.w	r7, [lr, r0]
 8001fc8:	ea47 070c 	orr.w	r7, r7, ip
 8001fcc:	f80e 7000 	strb.w	r7, [lr, r0]
 8001fd0:	e7d1      	b.n	8001f76 <VFDLoadBMP+0x302>
			CMP++;
 8001fd2:	3201      	adds	r2, #1
 8001fd4:	b2d2      	uxtb	r2, r2
 8001fd6:	e7d0      	b.n	8001f7a <VFDLoadBMP+0x306>
			}
		}

		for(uint8_t i=0;i < 10;i++){
 8001fd8:	2100      	movs	r1, #0
 8001fda:	e012      	b.n	8002002 <VFDLoadBMP+0x38e>

			if(ABCarray[CMP] & (1 << reOrder1[EvOd][i%6])){
				GPbuff[28+(i/8)] |= (1 << i%8);
			}else{
				GPbuff[28+(i/8)] &= ~(1 << i%8);
 8001fdc:	08c8      	lsrs	r0, r1, #3
 8001fde:	301c      	adds	r0, #28
 8001fe0:	f001 0c07 	and.w	ip, r1, #7
 8001fe4:	2701      	movs	r7, #1
 8001fe6:	fa07 fc0c 	lsl.w	ip, r7, ip
 8001fea:	f8df e16c 	ldr.w	lr, [pc, #364]	; 8002158 <VFDLoadBMP+0x4e4>
 8001fee:	f81e 7000 	ldrb.w	r7, [lr, r0]
 8001ff2:	ea27 070c 	bic.w	r7, r7, ip
 8001ff6:	f80e 7000 	strb.w	r7, [lr, r0]
			}

			if((i%6) == 3){// move to next bitmap when we complete previous 6bit BMP
 8001ffa:	2b03      	cmp	r3, #3
 8001ffc:	d02c      	beq.n	8002058 <VFDLoadBMP+0x3e4>
		for(uint8_t i=0;i < 10;i++){
 8001ffe:	3101      	adds	r1, #1
 8002000:	b2c9      	uxtb	r1, r1
 8002002:	2909      	cmp	r1, #9
 8002004:	d82b      	bhi.n	800205e <VFDLoadBMP+0x3ea>
			if(ABCarray[CMP] & (1 << reOrder1[EvOd][i%6])){
 8002006:	4b54      	ldr	r3, [pc, #336]	; (8002158 <VFDLoadBMP+0x4e4>)
 8002008:	4413      	add	r3, r2
 800200a:	f893 7028 	ldrb.w	r7, [r3, #40]	; 0x28
 800200e:	4b53      	ldr	r3, [pc, #332]	; (800215c <VFDLoadBMP+0x4e8>)
 8002010:	fba3 0301 	umull	r0, r3, r3, r1
 8002014:	089b      	lsrs	r3, r3, #2
 8002016:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800201a:	eba1 0343 	sub.w	r3, r1, r3, lsl #1
 800201e:	b2db      	uxtb	r3, r3
 8002020:	0060      	lsls	r0, r4, #1
 8002022:	eb00 0c04 	add.w	ip, r0, r4
 8002026:	484e      	ldr	r0, [pc, #312]	; (8002160 <VFDLoadBMP+0x4ec>)
 8002028:	eb00 004c 	add.w	r0, r0, ip, lsl #1
 800202c:	4418      	add	r0, r3
 800202e:	7b00      	ldrb	r0, [r0, #12]
 8002030:	4107      	asrs	r7, r0
 8002032:	f017 0f01 	tst.w	r7, #1
 8002036:	d0d1      	beq.n	8001fdc <VFDLoadBMP+0x368>
				GPbuff[28+(i/8)] |= (1 << i%8);
 8002038:	08c8      	lsrs	r0, r1, #3
 800203a:	301c      	adds	r0, #28
 800203c:	f001 0c07 	and.w	ip, r1, #7
 8002040:	2701      	movs	r7, #1
 8002042:	fa07 fc0c 	lsl.w	ip, r7, ip
 8002046:	f8df e110 	ldr.w	lr, [pc, #272]	; 8002158 <VFDLoadBMP+0x4e4>
 800204a:	f81e 7000 	ldrb.w	r7, [lr, r0]
 800204e:	ea47 070c 	orr.w	r7, r7, ip
 8002052:	f80e 7000 	strb.w	r7, [lr, r0]
 8002056:	e7d0      	b.n	8001ffa <VFDLoadBMP+0x386>
			CMP++;
 8002058:	3201      	adds	r2, #1
 800205a:	b2d2      	uxtb	r2, r2
 800205c:	e7cf      	b.n	8001ffe <VFDLoadBMP+0x38a>
			}
		}

			if(Grid < 7){// Grid 1-6
 800205e:	f1b9 0f06 	cmp.w	r9, #6
 8002062:	d85b      	bhi.n	800211c <VFDLoadBMP+0x4a8>
				GPbuff[29] |= (3 << (Grid+1));// move to align with byte and Grid bit and turn Grid N and N+1 on
 8002064:	f109 0201 	add.w	r2, r9, #1
 8002068:	f04f 0303 	mov.w	r3, #3
 800206c:	fa03 f202 	lsl.w	r2, r3, r2
 8002070:	4939      	ldr	r1, [pc, #228]	; (8002158 <VFDLoadBMP+0x4e4>)
 8002072:	7f4b      	ldrb	r3, [r1, #29]
 8002074:	ea43 0302 	orr.w	r3, r3, r2
 8002078:	774b      	strb	r3, [r1, #29]
				if (Grid == 6)// in case Grid bit is on bit 7
 800207a:	d04a      	beq.n	8002112 <VFDLoadBMP+0x49e>

			}

/* VFD Update : send data over SPI.*/

HAL_GPIO_WritePin(VFDDisp->vfdGPIO, VFDDisp->BLANK_pin, GPIO_PIN_SET);// BLK high
 800207c:	2201      	movs	r2, #1
 800207e:	8929      	ldrh	r1, [r5, #8]
 8002080:	6868      	ldr	r0, [r5, #4]
 8002082:	f7fe fb41 	bl	8000708 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(VFDDisp->vfdGPIO, VFDDisp->LAT_pin, GPIO_PIN_SET);// LAT high
 8002086:	2201      	movs	r2, #1
 8002088:	8969      	ldrh	r1, [r5, #10]
 800208a:	6868      	ldr	r0, [r5, #4]
 800208c:	f7fe fb3c 	bl	8000708 <HAL_GPIO_WritePin>
//Delay_us(1);
HAL_GPIO_WritePin(VFDDisp->vfdGPIO, VFDDisp->LAT_pin, GPIO_PIN_RESET);// LAT low
 8002090:	2200      	movs	r2, #0
 8002092:	8969      	ldrh	r1, [r5, #10]
 8002094:	6868      	ldr	r0, [r5, #4]
 8002096:	f7fe fb37 	bl	8000708 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(VFDDisp->vfdGPIO, VFDDisp->BLANK_pin, GPIO_PIN_RESET);// BLK low
 800209a:	2200      	movs	r2, #0
 800209c:	8929      	ldrh	r1, [r5, #8]
 800209e:	6868      	ldr	r0, [r5, #4]
 80020a0:	f7fe fb32 	bl	8000708 <HAL_GPIO_WritePin>

HAL_SPI_Transmit_DMA(VFDDisp->Bus, (uint8_t*)GPbuff, 36);// Send data over SPI via DMA
 80020a4:	2224      	movs	r2, #36	; 0x24
 80020a6:	492c      	ldr	r1, [pc, #176]	; (8002158 <VFDLoadBMP+0x4e4>)
 80020a8:	6828      	ldr	r0, [r5, #0]
 80020aa:	f7ff f92f 	bl	800130c <HAL_SPI_Transmit_DMA>
// W.I.P.
//entire SPI process took about 16 to 20 uSec, we need this to generate the GCP signal for Grayscaling our Display.
//Delay_us(20);
// According to Datasheet of MN14440A

Delay_us(5);// Delay 3/4 of 20 uSec.
 80020ae:	2005      	movs	r0, #5
 80020b0:	f7ff fdd6 	bl	8001c60 <Delay_us>
VFDDisp->vfdGPIO->BSRR = VFDDisp->GCP_pin;
 80020b4:	686b      	ldr	r3, [r5, #4]
 80020b6:	89aa      	ldrh	r2, [r5, #12]
 80020b8:	619a      	str	r2, [r3, #24]
VFDDisp->vfdGPIO->BRR  = VFDDisp->GCP_pin;
 80020ba:	686b      	ldr	r3, [r5, #4]
 80020bc:	89aa      	ldrh	r2, [r5, #12]
 80020be:	629a      	str	r2, [r3, #40]	; 0x28

Delay_us(4);// Delay 1/2 of 20 uSec.
 80020c0:	2004      	movs	r0, #4
 80020c2:	f7ff fdcd 	bl	8001c60 <Delay_us>
VFDDisp->vfdGPIO->BSRR = VFDDisp->GCP_pin;
 80020c6:	686b      	ldr	r3, [r5, #4]
 80020c8:	89aa      	ldrh	r2, [r5, #12]
 80020ca:	619a      	str	r2, [r3, #24]
VFDDisp->vfdGPIO->BRR  = VFDDisp->GCP_pin;
 80020cc:	686b      	ldr	r3, [r5, #4]
 80020ce:	89aa      	ldrh	r2, [r5, #12]
 80020d0:	629a      	str	r2, [r3, #40]	; 0x28

Delay_us(3);// Delay 1/3 of 20 uSec.
 80020d2:	2003      	movs	r0, #3
 80020d4:	f7ff fdc4 	bl	8001c60 <Delay_us>
VFDDisp->vfdGPIO->BSRR = VFDDisp->GCP_pin;
 80020d8:	686b      	ldr	r3, [r5, #4]
 80020da:	89aa      	ldrh	r2, [r5, #12]
 80020dc:	619a      	str	r2, [r3, #24]
VFDDisp->vfdGPIO->BRR  = VFDDisp->GCP_pin;
 80020de:	686b      	ldr	r3, [r5, #4]
 80020e0:	89aa      	ldrh	r2, [r5, #12]
 80020e2:	629a      	str	r2, [r3, #40]	; 0x28

//Delay_us(2);// Delay 1/4 of 20 uSec
VFDDisp->vfdGPIO->BSRR = VFDDisp->GCP_pin;
 80020e4:	686b      	ldr	r3, [r5, #4]
 80020e6:	89aa      	ldrh	r2, [r5, #12]
 80020e8:	619a      	str	r2, [r3, #24]
VFDDisp->vfdGPIO->BRR  = VFDDisp->GCP_pin;
 80020ea:	686b      	ldr	r3, [r5, #4]
 80020ec:	89aa      	ldrh	r2, [r5, #12]
 80020ee:	629a      	str	r2, [r3, #40]	; 0x28

Delay_us(1);// Delay 1/6 of 20 uSec
 80020f0:	2001      	movs	r0, #1
 80020f2:	f7ff fdb5 	bl	8001c60 <Delay_us>
VFDDisp->vfdGPIO->BSRR = VFDDisp->GCP_pin;
 80020f6:	686b      	ldr	r3, [r5, #4]
 80020f8:	89aa      	ldrh	r2, [r5, #12]
 80020fa:	619a      	str	r2, [r3, #24]
VFDDisp->vfdGPIO->BRR  = VFDDisp->GCP_pin;
 80020fc:	686b      	ldr	r3, [r5, #4]
 80020fe:	89aa      	ldrh	r2, [r5, #12]
 8002100:	629a      	str	r2, [r3, #40]	; 0x28

//Delay_us(0);// Delay 1/9 of 20uSec
VFDDisp->vfdGPIO->BSRR = VFDDisp->GCP_pin;
 8002102:	686b      	ldr	r3, [r5, #4]
 8002104:	89aa      	ldrh	r2, [r5, #12]
 8002106:	619a      	str	r2, [r3, #24]
VFDDisp->vfdGPIO->BRR  = VFDDisp->GCP_pin;
 8002108:	686b      	ldr	r3, [r5, #4]
 800210a:	89aa      	ldrh	r2, [r5, #12]
 800210c:	629a      	str	r2, [r3, #40]	; 0x28

}
 800210e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					GPbuff[30] |= 0x01;// set next Grid bit on next array to 1
 8002112:	7f8b      	ldrb	r3, [r1, #30]
 8002114:	f043 0301 	orr.w	r3, r3, #1
 8002118:	778b      	strb	r3, [r1, #30]
 800211a:	e7af      	b.n	800207c <VFDLoadBMP+0x408>
				GPbuff[((Grid-7) / 8) + 30] |= (3 << ((Grid-7)%8));// Grid N and N+1 on
 800211c:	f1a9 0607 	sub.w	r6, r9, #7
 8002120:	4633      	mov	r3, r6
 8002122:	2e00      	cmp	r6, #0
 8002124:	db16      	blt.n	8002154 <VFDLoadBMP+0x4e0>
 8002126:	10db      	asrs	r3, r3, #3
 8002128:	f103 001e 	add.w	r0, r3, #30
 800212c:	4272      	negs	r2, r6
 800212e:	f006 0607 	and.w	r6, r6, #7
 8002132:	f002 0207 	and.w	r2, r2, #7
 8002136:	bf58      	it	pl
 8002138:	4256      	negpl	r6, r2
 800213a:	2203      	movs	r2, #3
 800213c:	fa02 f106 	lsl.w	r1, r2, r6
 8002140:	4c05      	ldr	r4, [pc, #20]	; (8002158 <VFDLoadBMP+0x4e4>)
 8002142:	5c22      	ldrb	r2, [r4, r0]
 8002144:	430a      	orrs	r2, r1
 8002146:	5422      	strb	r2, [r4, r0]
				if ((Grid-7)%8 == 7)// in case Grid bit is on bit 7
 8002148:	2e07      	cmp	r6, #7
 800214a:	d197      	bne.n	800207c <VFDLoadBMP+0x408>
					GPbuff[((Grid-7) / 8) + 31] = 0x01;// set next Grid bit on next array to 1
 800214c:	331f      	adds	r3, #31
 800214e:	2101      	movs	r1, #1
 8002150:	54e1      	strb	r1, [r4, r3]
 8002152:	e793      	b.n	800207c <VFDLoadBMP+0x408>
				GPbuff[((Grid-7) / 8) + 30] |= (3 << ((Grid-7)%8));// Grid N and N+1 on
 8002154:	1df3      	adds	r3, r6, #7
 8002156:	e7e6      	b.n	8002126 <VFDLoadBMP+0x4b2>
 8002158:	20000090 	.word	0x20000090
 800215c:	aaaaaaab 	.word	0xaaaaaaab
 8002160:	08002a08 	.word	0x08002a08

08002164 <VFDFill>:
	Xcol = 1;
	YLine = 1;
	memset(FB0, 0, 780);
}

void VFDFill(bool fill){
 8002164:	b508      	push	{r3, lr}
	memset(FB0, fill ? 0xFF : 0, 780);
 8002166:	4b06      	ldr	r3, [pc, #24]	; (8002180 <VFDFill+0x1c>)
 8002168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800216a:	b130      	cbz	r0, 800217a <VFDFill+0x16>
 800216c:	21ff      	movs	r1, #255	; 0xff
 800216e:	f44f 7243 	mov.w	r2, #780	; 0x30c
 8002172:	4618      	mov	r0, r3
 8002174:	f000 fbac 	bl	80028d0 <memset>
}
 8002178:	bd08      	pop	{r3, pc}
	memset(FB0, fill ? 0xFF : 0, 780);
 800217a:	2100      	movs	r1, #0
 800217c:	e7f7      	b.n	800216e <VFDFill+0xa>
 800217e:	bf00      	nop
 8002180:	20000090 	.word	0x20000090

08002184 <VFDsetup>:
void VFDsetup(MN15439A *VFDDisp, SPI_HandleTypeDef *Bus, GPIO_TypeDef *vfdGPIO, uint16_t BLANK_pin, uint16_t LAT_pin, uint16_t GCP_pin){
 8002184:	b508      	push	{r3, lr}
	VFDDisp->Bus = Bus;
 8002186:	6001      	str	r1, [r0, #0]
	VFDDisp->vfdGPIO = vfdGPIO;
 8002188:	6042      	str	r2, [r0, #4]
	VFDDisp->BLANK_pin = BLANK_pin;
 800218a:	8103      	strh	r3, [r0, #8]
	VFDDisp->LAT_pin = LAT_pin;
 800218c:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8002190:	8143      	strh	r3, [r0, #10]
	VFDDisp->GCP_pin = GCP_Pin;
 8002192:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002196:	8183      	strh	r3, [r0, #12]
	FB0 = malloc(750);// malloc the frame buffer memory
 8002198:	f240 20ee 	movw	r0, #750	; 0x2ee
 800219c:	f000 fb82 	bl	80028a4 <malloc>
 80021a0:	4b02      	ldr	r3, [pc, #8]	; (80021ac <VFDsetup+0x28>)
 80021a2:	6258      	str	r0, [r3, #36]	; 0x24
	VFDFill(false);
 80021a4:	2000      	movs	r0, #0
 80021a6:	f7ff ffdd 	bl	8002164 <VFDFill>
}
 80021aa:	bd08      	pop	{r3, pc}
 80021ac:	20000090 	.word	0x20000090

080021b0 <VFDLoadPart>:
// Buffer update (with X,Y Coordinate and image WxH) X,Y Coordinate start at (1,1) to (50,240)
//
//NOTE THAT THE X COOR and WIDTH ARE BYTE NUMBER NOT PIXEL NUMBER (8 pixel = 1 byte). A.K.A IT'S BYTE ALIGNED
//
void VFDLoadPart(uint8_t* BMP, uint8_t Xcord, uint8_t Ycord, uint8_t bmpW, uint8_t bmpH){
 80021b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80021b4:	4681      	mov	r9, r0
 80021b6:	461e      	mov	r6, r3
 80021b8:	f89d a020 	ldrb.w	sl, [sp, #32]

	Xcord = Xcord - 1;
 80021bc:	3901      	subs	r1, #1
 80021be:	fa5f f881 	uxtb.w	r8, r1
	Ycord = Ycord - 1;
 80021c2:	3a01      	subs	r2, #1
 80021c4:	b2d7      	uxtb	r7, r2
	uint16_t XYoff,WHoff = 0;

	//Counting from Y origin point to bmpH using for loop
	for(uint8_t loop = 0; loop < bmpH; loop++){
 80021c6:	2500      	movs	r5, #0
 80021c8:	4555      	cmp	r5, sl
 80021ca:	d211      	bcs.n	80021f0 <VFDLoadPart+0x40>
		// turn X an Y into absolute offset number for Buffer
		XYoff = (Ycord+loop) * 20;
 80021cc:	197a      	adds	r2, r7, r5
 80021ce:	eb02 0482 	add.w	r4, r2, r2, lsl #2
 80021d2:	00a4      	lsls	r4, r4, #2
 80021d4:	b2a4      	uxth	r4, r4
		XYoff += Xcord;// offset start at the left most, The count from left to right for Xcord times
 80021d6:	4444      	add	r4, r8

		// turn W and H into absolute offset number for Bitmap image
		WHoff = loop * bmpW;

		memcpy(FB0 + XYoff, BMP + WHoff, bmpW);
 80021d8:	4b06      	ldr	r3, [pc, #24]	; (80021f4 <VFDLoadPart+0x44>)
 80021da:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80021dc:	4632      	mov	r2, r6
 80021de:	fb06 9105 	mla	r1, r6, r5, r9
 80021e2:	fa10 f084 	uxtah	r0, r0, r4
 80021e6:	f000 fb65 	bl	80028b4 <memcpy>
	for(uint8_t loop = 0; loop < bmpH; loop++){
 80021ea:	3501      	adds	r5, #1
 80021ec:	b2ed      	uxtb	r5, r5
 80021ee:	e7eb      	b.n	80021c8 <VFDLoadPart+0x18>
	}

}
 80021f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80021f4:	20000090 	.word	0x20000090

080021f8 <VFDPrint>:


//Print 8x8 Text on screen
void VFDPrint(char *txtBuf){
 80021f8:	b570      	push	{r4, r5, r6, lr}
 80021fa:	b082      	sub	sp, #8
 80021fc:	4604      	mov	r4, r0

uint16_t chOff = 0;

while(*txtBuf){
 80021fe:	e009      	b.n	8002214 <VFDPrint+0x1c>
	// In case of reached 19 chars or newline detected , Do the newline
	if ((Xcol > 19) || *txtBuf == 0x0A){
		Xcol = 1;// Move cursor to most left
 8002200:	4b1b      	ldr	r3, [pc, #108]	; (8002270 <VFDPrint+0x78>)
 8002202:	2201      	movs	r2, #1
 8002204:	701a      	strb	r2, [r3, #0]
		YLine += 8;// enter new line
 8002206:	785a      	ldrb	r2, [r3, #1]
 8002208:	3208      	adds	r2, #8
 800220a:	705a      	strb	r2, [r3, #1]
		txtBuf++;// move to next char
 800220c:	3401      	adds	r4, #1
	}

	// Avoid printing Newline
	if (*txtBuf != 0x0A){
 800220e:	7823      	ldrb	r3, [r4, #0]
 8002210:	2b0a      	cmp	r3, #10
 8002212:	d108      	bne.n	8002226 <VFDPrint+0x2e>
while(*txtBuf){
 8002214:	7823      	ldrb	r3, [r4, #0]
 8002216:	b343      	cbz	r3, 800226a <VFDPrint+0x72>
	if ((Xcol > 19) || *txtBuf == 0x0A){
 8002218:	4a15      	ldr	r2, [pc, #84]	; (8002270 <VFDPrint+0x78>)
 800221a:	7812      	ldrb	r2, [r2, #0]
 800221c:	2a13      	cmp	r2, #19
 800221e:	d8ef      	bhi.n	8002200 <VFDPrint+0x8>
 8002220:	2b0a      	cmp	r3, #10
 8002222:	d1f4      	bne.n	800220e <VFDPrint+0x16>
 8002224:	e7ec      	b.n	8002200 <VFDPrint+0x8>

	chOff = (*txtBuf - 0x20) * 8;// calculate char offset (fist 8 pixel of character)
 8002226:	3b20      	subs	r3, #32
 8002228:	00db      	lsls	r3, r3, #3
 800222a:	b29e      	uxth	r6, r3

	for(uint8_t i=0;i < 8;i++){// Copy the inverted byte to buffer
 800222c:	2500      	movs	r5, #0
 800222e:	e00c      	b.n	800224a <VFDPrint+0x52>
	chBuf[i] = smallRbit(font8x8_basic[i + chOff]);
 8002230:	1972      	adds	r2, r6, r5
 8002232:	4b10      	ldr	r3, [pc, #64]	; (8002274 <VFDPrint+0x7c>)
 8002234:	4413      	add	r3, r2
 8002236:	f893 0024 	ldrb.w	r0, [r3, #36]	; 0x24
 800223a:	f7ff fd0d 	bl	8001c58 <smallRbit>
 800223e:	4b0e      	ldr	r3, [pc, #56]	; (8002278 <VFDPrint+0x80>)
 8002240:	442b      	add	r3, r5
 8002242:	f883 0050 	strb.w	r0, [r3, #80]	; 0x50
	for(uint8_t i=0;i < 8;i++){// Copy the inverted byte to buffer
 8002246:	3501      	adds	r5, #1
 8002248:	b2ed      	uxtb	r5, r5
 800224a:	2d07      	cmp	r5, #7
 800224c:	d9f0      	bls.n	8002230 <VFDPrint+0x38>
	}

	VFDLoadPart((uint8_t *)chBuf, Xcol, YLine, 1, 8);// Align the char with the 8n pixels
 800224e:	4d08      	ldr	r5, [pc, #32]	; (8002270 <VFDPrint+0x78>)
 8002250:	2308      	movs	r3, #8
 8002252:	9300      	str	r3, [sp, #0]
 8002254:	2301      	movs	r3, #1
 8002256:	786a      	ldrb	r2, [r5, #1]
 8002258:	7829      	ldrb	r1, [r5, #0]
 800225a:	4808      	ldr	r0, [pc, #32]	; (800227c <VFDPrint+0x84>)
 800225c:	f7ff ffa8 	bl	80021b0 <VFDLoadPart>

	txtBuf++;// move to next char
 8002260:	3401      	adds	r4, #1
	Xcol++;// move cursor to next column
 8002262:	782b      	ldrb	r3, [r5, #0]
 8002264:	3301      	adds	r3, #1
 8002266:	702b      	strb	r3, [r5, #0]
 8002268:	e7d4      	b.n	8002214 <VFDPrint+0x1c>
	}
  }
}
 800226a:	b002      	add	sp, #8
 800226c:	bd70      	pop	{r4, r5, r6, pc}
 800226e:	bf00      	nop
 8002270:	20000008 	.word	0x20000008
 8002274:	08002a08 	.word	0x08002a08
 8002278:	20000090 	.word	0x20000090
 800227c:	200000e0 	.word	0x200000e0

08002280 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002280:	b500      	push	{lr}
 8002282:	b083      	sub	sp, #12

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002284:	4b0e      	ldr	r3, [pc, #56]	; (80022c0 <MX_DMA_Init+0x40>)
 8002286:	695a      	ldr	r2, [r3, #20]
 8002288:	f042 0201 	orr.w	r2, r2, #1
 800228c:	615a      	str	r2, [r3, #20]
 800228e:	695b      	ldr	r3, [r3, #20]
 8002290:	f003 0301 	and.w	r3, r3, #1
 8002294:	9301      	str	r3, [sp, #4]
 8002296:	9b01      	ldr	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8002298:	2200      	movs	r2, #0
 800229a:	4611      	mov	r1, r2
 800229c:	200c      	movs	r0, #12
 800229e:	f7fd ffed 	bl	800027c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80022a2:	200c      	movs	r0, #12
 80022a4:	f7fe f81e 	bl	80002e4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80022a8:	2200      	movs	r2, #0
 80022aa:	4611      	mov	r1, r2
 80022ac:	200f      	movs	r0, #15
 80022ae:	f7fd ffe5 	bl	800027c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80022b2:	200f      	movs	r0, #15
 80022b4:	f7fe f816 	bl	80002e4 <HAL_NVIC_EnableIRQ>

}
 80022b8:	b003      	add	sp, #12
 80022ba:	f85d fb04 	ldr.w	pc, [sp], #4
 80022be:	bf00      	nop
 80022c0:	40021000 	.word	0x40021000

080022c4 <MX_GPIO_Init>:
     PC5   ------> USART1_RX
     PA11   ------> USB_DM
     PA12   ------> USB_DP
*/
void MX_GPIO_Init(void)
{
 80022c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80022c8:	b08a      	sub	sp, #40	; 0x28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022ca:	2400      	movs	r4, #0
 80022cc:	9405      	str	r4, [sp, #20]
 80022ce:	9406      	str	r4, [sp, #24]
 80022d0:	9407      	str	r4, [sp, #28]
 80022d2:	9408      	str	r4, [sp, #32]
 80022d4:	9409      	str	r4, [sp, #36]	; 0x24

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80022d6:	4b42      	ldr	r3, [pc, #264]	; (80023e0 <MX_GPIO_Init+0x11c>)
 80022d8:	695a      	ldr	r2, [r3, #20]
 80022da:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80022de:	615a      	str	r2, [r3, #20]
 80022e0:	695a      	ldr	r2, [r3, #20]
 80022e2:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 80022e6:	9200      	str	r2, [sp, #0]
 80022e8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80022ea:	695a      	ldr	r2, [r3, #20]
 80022ec:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80022f0:	615a      	str	r2, [r3, #20]
 80022f2:	695a      	ldr	r2, [r3, #20]
 80022f4:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 80022f8:	9201      	str	r2, [sp, #4]
 80022fa:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80022fc:	695a      	ldr	r2, [r3, #20]
 80022fe:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002302:	615a      	str	r2, [r3, #20]
 8002304:	695a      	ldr	r2, [r3, #20]
 8002306:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800230a:	9202      	str	r2, [sp, #8]
 800230c:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800230e:	695a      	ldr	r2, [r3, #20]
 8002310:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8002314:	615a      	str	r2, [r3, #20]
 8002316:	695a      	ldr	r2, [r3, #20]
 8002318:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800231c:	9203      	str	r2, [sp, #12]
 800231e:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002320:	695a      	ldr	r2, [r3, #20]
 8002322:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002326:	615a      	str	r2, [r3, #20]
 8002328:	695b      	ldr	r3, [r3, #20]
 800232a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800232e:	9304      	str	r3, [sp, #16]
 8002330:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LD4_Pin|LD3_Pin|GCP_Pin, GPIO_PIN_RESET);
 8002332:	4f2c      	ldr	r7, [pc, #176]	; (80023e4 <MX_GPIO_Init+0x120>)
 8002334:	4622      	mov	r2, r4
 8002336:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 800233a:	4638      	mov	r0, r7
 800233c:	f7fe f9e4 	bl	8000708 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002340:	2501      	movs	r5, #1
 8002342:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002344:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002346:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002348:	a905      	add	r1, sp, #20
 800234a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800234e:	f7fe f90b 	bl	8000568 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_NSS_Pin;
 8002352:	2310      	movs	r3, #16
 8002354:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002356:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800235a:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800235c:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(SPI1_NSS_GPIO_Port, &GPIO_InitStruct);
 800235e:	a905      	add	r1, sp, #20
 8002360:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002364:	f7fe f900 	bl	8000568 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002368:	2330      	movs	r3, #48	; 0x30
 800236a:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800236c:	f04f 0802 	mov.w	r8, #2
 8002370:	f8cd 8018 	str.w	r8, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002374:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002376:	2603      	movs	r6, #3
 8002378:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800237a:	2307      	movs	r3, #7
 800237c:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800237e:	a905      	add	r1, sp, #20
 8002380:	4819      	ldr	r0, [pc, #100]	; (80023e8 <MX_GPIO_Init+0x124>)
 8002382:	f7fe f8f1 	bl	8000568 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin;
 8002386:	f44f 7340 	mov.w	r3, #768	; 0x300
 800238a:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800238c:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800238e:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002390:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002392:	a905      	add	r1, sp, #20
 8002394:	4638      	mov	r0, r7
 8002396:	f7fe f8e7 	bl	8000568 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GCP_Pin;
 800239a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800239e:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023a0:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a2:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80023a4:	9608      	str	r6, [sp, #32]
  HAL_GPIO_Init(GCP_GPIO_Port, &GPIO_InitStruct);
 80023a6:	a905      	add	r1, sp, #20
 80023a8:	4638      	mov	r0, r7
 80023aa:	f7fe f8dd 	bl	8000568 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 80023ae:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80023b2:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023b4:	f8cd 8018 	str.w	r8, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b8:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80023ba:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 80023bc:	230e      	movs	r3, #14
 80023be:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023c0:	a905      	add	r1, sp, #20
 80023c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023c6:	f7fe f8cf 	bl	8000568 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80023ca:	4622      	mov	r2, r4
 80023cc:	4621      	mov	r1, r4
 80023ce:	200a      	movs	r0, #10
 80023d0:	f7fd ff54 	bl	800027c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80023d4:	200a      	movs	r0, #10
 80023d6:	f7fd ff85 	bl	80002e4 <HAL_NVIC_EnableIRQ>

}
 80023da:	b00a      	add	sp, #40	; 0x28
 80023dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80023e0:	40021000 	.word	0x40021000
 80023e4:	48001000 	.word	0x48001000
 80023e8:	48000800 	.word	0x48000800

080023ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80023ec:	b530      	push	{r4, r5, lr}
 80023ee:	b091      	sub	sp, #68	; 0x44
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80023f0:	2400      	movs	r4, #0
 80023f2:	9409      	str	r4, [sp, #36]	; 0x24
 80023f4:	940b      	str	r4, [sp, #44]	; 0x2c
 80023f6:	940c      	str	r4, [sp, #48]	; 0x30
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80023f8:	9401      	str	r4, [sp, #4]
 80023fa:	9402      	str	r4, [sp, #8]
 80023fc:	9403      	str	r4, [sp, #12]
 80023fe:	9404      	str	r4, [sp, #16]
 8002400:	9405      	str	r4, [sp, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002402:	2301      	movs	r3, #1
 8002404:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002406:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 800240a:	9207      	str	r2, [sp, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800240c:	9408      	str	r4, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800240e:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002410:	2502      	movs	r5, #2
 8002412:	950d      	str	r5, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002414:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002418:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800241a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800241e:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002420:	a806      	add	r0, sp, #24
 8002422:	f7fe f985 	bl	8000730 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002426:	230f      	movs	r3, #15
 8002428:	9301      	str	r3, [sp, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800242a:	9502      	str	r5, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800242c:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800242e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002432:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002434:	9405      	str	r4, [sp, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002436:	4629      	mov	r1, r5
 8002438:	a801      	add	r0, sp, #4
 800243a:	f7fe fccb 	bl	8000dd4 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 800243e:	b011      	add	sp, #68	; 0x44
 8002440:	bd30      	pop	{r4, r5, pc}
	...

08002444 <main>:
{
 8002444:	b500      	push	{lr}
 8002446:	b083      	sub	sp, #12
  HAL_Init();
 8002448:	f7fd fee2 	bl	8000210 <HAL_Init>
  SystemClock_Config();
 800244c:	f7ff ffce 	bl	80023ec <SystemClock_Config>
  MX_GPIO_Init();
 8002450:	f7ff ff38 	bl	80022c4 <MX_GPIO_Init>
  MX_DMA_Init();
 8002454:	f7ff ff14 	bl	8002280 <MX_DMA_Init>
  MX_SPI2_Init();
 8002458:	f000 f86c 	bl	8002534 <MX_SPI2_Init>
  MX_SPI1_Init();
 800245c:	f000 f846 	bl	80024ec <MX_SPI1_Init>
  MX_TIM17_Init();
 8002460:	f000 f99c 	bl	800279c <MX_TIM17_Init>
  HAL_TIM_Base_Start(&htim17);
 8002464:	4810      	ldr	r0, [pc, #64]	; (80024a8 <main+0x64>)
 8002466:	f7ff fb2d 	bl	8001ac4 <HAL_TIM_Base_Start>
  VFDsetup(&VFDDisp, &hspi2, GPIOE, LD4_Pin, LD3_Pin, GCP_Pin);
 800246a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800246e:	9301      	str	r3, [sp, #4]
 8002470:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002474:	9300      	str	r3, [sp, #0]
 8002476:	f44f 7380 	mov.w	r3, #256	; 0x100
 800247a:	4a0c      	ldr	r2, [pc, #48]	; (80024ac <main+0x68>)
 800247c:	490c      	ldr	r1, [pc, #48]	; (80024b0 <main+0x6c>)
 800247e:	480d      	ldr	r0, [pc, #52]	; (80024b4 <main+0x70>)
 8002480:	f7ff fe80 	bl	8002184 <VFDsetup>
  VFDPrint(" !""#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~");
 8002484:	480c      	ldr	r0, [pc, #48]	; (80024b8 <main+0x74>)
 8002486:	f7ff feb7 	bl	80021f8 <VFDPrint>
 800248a:	e001      	b.n	8002490 <main+0x4c>
		  GridNum = 1;
 800248c:	2201      	movs	r2, #1
 800248e:	7022      	strb	r2, [r4, #0]
	VFDLoadBMP(&VFDDisp, GridNum++);
 8002490:	4c0a      	ldr	r4, [pc, #40]	; (80024bc <main+0x78>)
 8002492:	7821      	ldrb	r1, [r4, #0]
 8002494:	1c4b      	adds	r3, r1, #1
 8002496:	7023      	strb	r3, [r4, #0]
 8002498:	4806      	ldr	r0, [pc, #24]	; (80024b4 <main+0x70>)
 800249a:	f7ff fbeb 	bl	8001c74 <VFDLoadBMP>
	  if(GridNum > 52)
 800249e:	7823      	ldrb	r3, [r4, #0]
 80024a0:	2b34      	cmp	r3, #52	; 0x34
 80024a2:	d9f5      	bls.n	8002490 <main+0x4c>
 80024a4:	e7f2      	b.n	800248c <main+0x48>
 80024a6:	bf00      	nop
 80024a8:	2000025c 	.word	0x2000025c
 80024ac:	48001000 	.word	0x48001000
 80024b0:	2000010c 	.word	0x2000010c
 80024b4:	200000fc 	.word	0x200000fc
 80024b8:	08002d44 	.word	0x08002d44
 80024bc:	2000000a 	.word	0x2000000a

080024c0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
	if(GPIO_Pin == SPI1_NSS_Pin){
 80024c0:	2810      	cmp	r0, #16
 80024c2:	d000      	beq.n	80024c6 <HAL_GPIO_EXTI_Callback+0x6>
 80024c4:	4770      	bx	lr
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80024c6:	b508      	push	{r3, lr}
		HAL_SPI_Receive_DMA(&hspi1, FB0, 780);
 80024c8:	f44f 7243 	mov.w	r2, #780	; 0x30c
 80024cc:	2100      	movs	r1, #0
 80024ce:	4802      	ldr	r0, [pc, #8]	; (80024d8 <HAL_GPIO_EXTI_Callback+0x18>)
 80024d0:	f7ff f8cc 	bl	800166c <HAL_SPI_Receive_DMA>
  }

}
 80024d4:	bd08      	pop	{r3, pc}
 80024d6:	bf00      	nop
 80024d8:	20000170 	.word	0x20000170

080024dc <HAL_SPI_RxCpltCallback>:


void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef * hspi){
		GridNum = 1;//When received buffer from host, reset the grid number to 1 to re-render entire display.
 80024dc:	4b01      	ldr	r3, [pc, #4]	; (80024e4 <HAL_SPI_RxCpltCallback+0x8>)
 80024de:	2201      	movs	r2, #1
 80024e0:	701a      	strb	r2, [r3, #0]
}
 80024e2:	4770      	bx	lr
 80024e4:	2000000a 	.word	0x2000000a

080024e8 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80024e8:	4770      	bx	lr
	...

080024ec <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80024ec:	b508      	push	{r3, lr}
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80024ee:	480f      	ldr	r0, [pc, #60]	; (800252c <MX_SPI1_Init+0x40>)
 80024f0:	4b0f      	ldr	r3, [pc, #60]	; (8002530 <MX_SPI1_Init+0x44>)
 80024f2:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 80024f4:	2300      	movs	r3, #0
 80024f6:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80024f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80024fc:	6082      	str	r2, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80024fe:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002502:	60c2      	str	r2, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002504:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002506:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002508:	f44f 7200 	mov.w	r2, #512	; 0x200
 800250c:	6182      	str	r2, [r0, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800250e:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002510:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002512:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002514:	2207      	movs	r2, #7
 8002516:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002518:	6303      	str	r3, [r0, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800251a:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800251c:	f7fe fe82 	bl	8001224 <HAL_SPI_Init>
 8002520:	b900      	cbnz	r0, 8002524 <MX_SPI1_Init+0x38>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002522:	bd08      	pop	{r3, pc}
    Error_Handler();
 8002524:	f7ff ffe0 	bl	80024e8 <Error_Handler>
}
 8002528:	e7fb      	b.n	8002522 <MX_SPI1_Init+0x36>
 800252a:	bf00      	nop
 800252c:	20000170 	.word	0x20000170
 8002530:	40013000 	.word	0x40013000

08002534 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002534:	b508      	push	{r3, lr}
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8002536:	4811      	ldr	r0, [pc, #68]	; (800257c <MX_SPI2_Init+0x48>)
 8002538:	4b11      	ldr	r3, [pc, #68]	; (8002580 <MX_SPI2_Init+0x4c>)
 800253a:	6003      	str	r3, [r0, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800253c:	f44f 7382 	mov.w	r3, #260	; 0x104
 8002540:	6043      	str	r3, [r0, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002542:	2300      	movs	r3, #0
 8002544:	6083      	str	r3, [r0, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002546:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800254a:	60c2      	str	r2, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800254c:	2202      	movs	r2, #2
 800254e:	6102      	str	r2, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002550:	2201      	movs	r2, #1
 8002552:	6142      	str	r2, [r0, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002554:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002558:	6182      	str	r2, [r0, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800255a:	61c3      	str	r3, [r0, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_LSB;
 800255c:	2280      	movs	r2, #128	; 0x80
 800255e:	6202      	str	r2, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002560:	6243      	str	r3, [r0, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002562:	6283      	str	r3, [r0, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8002564:	2207      	movs	r2, #7
 8002566:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002568:	6303      	str	r3, [r0, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800256a:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800256c:	f7fe fe5a 	bl	8001224 <HAL_SPI_Init>
 8002570:	b900      	cbnz	r0, 8002574 <MX_SPI2_Init+0x40>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002572:	bd08      	pop	{r3, pc}
    Error_Handler();
 8002574:	f7ff ffb8 	bl	80024e8 <Error_Handler>
}
 8002578:	e7fb      	b.n	8002572 <MX_SPI2_Init+0x3e>
 800257a:	bf00      	nop
 800257c:	2000010c 	.word	0x2000010c
 8002580:	40003800 	.word	0x40003800

08002584 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002584:	b530      	push	{r4, r5, lr}
 8002586:	b08b      	sub	sp, #44	; 0x2c
 8002588:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800258a:	2300      	movs	r3, #0
 800258c:	9305      	str	r3, [sp, #20]
 800258e:	9306      	str	r3, [sp, #24]
 8002590:	9307      	str	r3, [sp, #28]
 8002592:	9308      	str	r3, [sp, #32]
 8002594:	9309      	str	r3, [sp, #36]	; 0x24
  if(spiHandle->Instance==SPI1)
 8002596:	6803      	ldr	r3, [r0, #0]
 8002598:	4a41      	ldr	r2, [pc, #260]	; (80026a0 <HAL_SPI_MspInit+0x11c>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d004      	beq.n	80025a8 <HAL_SPI_MspInit+0x24>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
  else if(spiHandle->Instance==SPI2)
 800259e:	4a41      	ldr	r2, [pc, #260]	; (80026a4 <HAL_SPI_MspInit+0x120>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d042      	beq.n	800262a <HAL_SPI_MspInit+0xa6>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80025a4:	b00b      	add	sp, #44	; 0x2c
 80025a6:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 80025a8:	4b3f      	ldr	r3, [pc, #252]	; (80026a8 <HAL_SPI_MspInit+0x124>)
 80025aa:	699a      	ldr	r2, [r3, #24]
 80025ac:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80025b0:	619a      	str	r2, [r3, #24]
 80025b2:	699a      	ldr	r2, [r3, #24]
 80025b4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80025b8:	9201      	str	r2, [sp, #4]
 80025ba:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025bc:	695a      	ldr	r2, [r3, #20]
 80025be:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80025c2:	615a      	str	r2, [r3, #20]
 80025c4:	695b      	ldr	r3, [r3, #20]
 80025c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ca:	9302      	str	r3, [sp, #8]
 80025cc:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80025ce:	23a0      	movs	r3, #160	; 0xa0
 80025d0:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025d2:	2302      	movs	r3, #2
 80025d4:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025d6:	2500      	movs	r5, #0
 80025d8:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80025da:	2303      	movs	r3, #3
 80025dc:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80025de:	2305      	movs	r3, #5
 80025e0:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025e2:	a905      	add	r1, sp, #20
 80025e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025e8:	f7fd ffbe 	bl	8000568 <HAL_GPIO_Init>
    hdma_spi1_rx.Instance = DMA1_Channel2;
 80025ec:	482f      	ldr	r0, [pc, #188]	; (80026ac <HAL_SPI_MspInit+0x128>)
 80025ee:	4b30      	ldr	r3, [pc, #192]	; (80026b0 <HAL_SPI_MspInit+0x12c>)
 80025f0:	6003      	str	r3, [r0, #0]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80025f2:	6045      	str	r5, [r0, #4]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80025f4:	6085      	str	r5, [r0, #8]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80025f6:	2380      	movs	r3, #128	; 0x80
 80025f8:	60c3      	str	r3, [r0, #12]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80025fa:	6105      	str	r5, [r0, #16]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80025fc:	6145      	str	r5, [r0, #20]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 80025fe:	6185      	str	r5, [r0, #24]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002600:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002604:	61c3      	str	r3, [r0, #28]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8002606:	f7fd fecd 	bl	80003a4 <HAL_DMA_Init>
 800260a:	b958      	cbnz	r0, 8002624 <HAL_SPI_MspInit+0xa0>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 800260c:	4b27      	ldr	r3, [pc, #156]	; (80026ac <HAL_SPI_MspInit+0x128>)
 800260e:	65a3      	str	r3, [r4, #88]	; 0x58
 8002610:	625c      	str	r4, [r3, #36]	; 0x24
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8002612:	2200      	movs	r2, #0
 8002614:	4611      	mov	r1, r2
 8002616:	2023      	movs	r0, #35	; 0x23
 8002618:	f7fd fe30 	bl	800027c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800261c:	2023      	movs	r0, #35	; 0x23
 800261e:	f7fd fe61 	bl	80002e4 <HAL_NVIC_EnableIRQ>
 8002622:	e7bf      	b.n	80025a4 <HAL_SPI_MspInit+0x20>
      Error_Handler();
 8002624:	f7ff ff60 	bl	80024e8 <Error_Handler>
 8002628:	e7f0      	b.n	800260c <HAL_SPI_MspInit+0x88>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800262a:	4b1f      	ldr	r3, [pc, #124]	; (80026a8 <HAL_SPI_MspInit+0x124>)
 800262c:	69da      	ldr	r2, [r3, #28]
 800262e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002632:	61da      	str	r2, [r3, #28]
 8002634:	69da      	ldr	r2, [r3, #28]
 8002636:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800263a:	9203      	str	r2, [sp, #12]
 800263c:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800263e:	695a      	ldr	r2, [r3, #20]
 8002640:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002644:	615a      	str	r2, [r3, #20]
 8002646:	695b      	ldr	r3, [r3, #20]
 8002648:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800264c:	9304      	str	r3, [sp, #16]
 800264e:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8002650:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8002654:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002656:	2302      	movs	r3, #2
 8002658:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800265a:	2500      	movs	r5, #0
 800265c:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800265e:	2303      	movs	r3, #3
 8002660:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002662:	2305      	movs	r3, #5
 8002664:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002666:	a905      	add	r1, sp, #20
 8002668:	4812      	ldr	r0, [pc, #72]	; (80026b4 <HAL_SPI_MspInit+0x130>)
 800266a:	f7fd ff7d 	bl	8000568 <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Channel5;
 800266e:	4812      	ldr	r0, [pc, #72]	; (80026b8 <HAL_SPI_MspInit+0x134>)
 8002670:	4b12      	ldr	r3, [pc, #72]	; (80026bc <HAL_SPI_MspInit+0x138>)
 8002672:	6003      	str	r3, [r0, #0]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002674:	2310      	movs	r3, #16
 8002676:	6043      	str	r3, [r0, #4]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002678:	6085      	str	r5, [r0, #8]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800267a:	2380      	movs	r3, #128	; 0x80
 800267c:	60c3      	str	r3, [r0, #12]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800267e:	6105      	str	r5, [r0, #16]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002680:	6145      	str	r5, [r0, #20]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8002682:	6185      	str	r5, [r0, #24]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002684:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002688:	61c3      	str	r3, [r0, #28]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 800268a:	f7fd fe8b 	bl	80003a4 <HAL_DMA_Init>
 800268e:	b918      	cbnz	r0, 8002698 <HAL_SPI_MspInit+0x114>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 8002690:	4b09      	ldr	r3, [pc, #36]	; (80026b8 <HAL_SPI_MspInit+0x134>)
 8002692:	6563      	str	r3, [r4, #84]	; 0x54
 8002694:	625c      	str	r4, [r3, #36]	; 0x24
}
 8002696:	e785      	b.n	80025a4 <HAL_SPI_MspInit+0x20>
      Error_Handler();
 8002698:	f7ff ff26 	bl	80024e8 <Error_Handler>
 800269c:	e7f8      	b.n	8002690 <HAL_SPI_MspInit+0x10c>
 800269e:	bf00      	nop
 80026a0:	40013000 	.word	0x40013000
 80026a4:	40003800 	.word	0x40003800
 80026a8:	40021000 	.word	0x40021000
 80026ac:	200001d4 	.word	0x200001d4
 80026b0:	4002001c 	.word	0x4002001c
 80026b4:	48000400 	.word	0x48000400
 80026b8:	20000218 	.word	0x20000218
 80026bc:	40020058 	.word	0x40020058

080026c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026c0:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026c2:	4b0a      	ldr	r3, [pc, #40]	; (80026ec <HAL_MspInit+0x2c>)
 80026c4:	699a      	ldr	r2, [r3, #24]
 80026c6:	f042 0201 	orr.w	r2, r2, #1
 80026ca:	619a      	str	r2, [r3, #24]
 80026cc:	699a      	ldr	r2, [r3, #24]
 80026ce:	f002 0201 	and.w	r2, r2, #1
 80026d2:	9200      	str	r2, [sp, #0]
 80026d4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80026d6:	69da      	ldr	r2, [r3, #28]
 80026d8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80026dc:	61da      	str	r2, [r3, #28]
 80026de:	69db      	ldr	r3, [r3, #28]
 80026e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026e4:	9301      	str	r3, [sp, #4]
 80026e6:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80026e8:	b002      	add	sp, #8
 80026ea:	4770      	bx	lr
 80026ec:	40021000 	.word	0x40021000

080026f0 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80026f0:	4770      	bx	lr

080026f2 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80026f2:	e7fe      	b.n	80026f2 <HardFault_Handler>

080026f4 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80026f4:	e7fe      	b.n	80026f4 <MemManage_Handler>

080026f6 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80026f6:	e7fe      	b.n	80026f6 <BusFault_Handler>

080026f8 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80026f8:	e7fe      	b.n	80026f8 <UsageFault_Handler>

080026fa <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80026fa:	4770      	bx	lr

080026fc <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80026fc:	4770      	bx	lr

080026fe <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80026fe:	4770      	bx	lr

08002700 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002700:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002702:	f7fd fd97 	bl	8000234 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002706:	bd08      	pop	{r3, pc}

08002708 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002708:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 800270a:	2010      	movs	r0, #16
 800270c:	f7fe f802 	bl	8000714 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8002710:	bd08      	pop	{r3, pc}
	...

08002714 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002714:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8002716:	4802      	ldr	r0, [pc, #8]	; (8002720 <DMA1_Channel2_IRQHandler+0xc>)
 8002718:	f7fd fecb 	bl	80004b2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800271c:	bd08      	pop	{r3, pc}
 800271e:	bf00      	nop
 8002720:	200001d4 	.word	0x200001d4

08002724 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8002724:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8002726:	4802      	ldr	r0, [pc, #8]	; (8002730 <DMA1_Channel5_IRQHandler+0xc>)
 8002728:	f7fd fec3 	bl	80004b2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800272c:	bd08      	pop	{r3, pc}
 800272e:	bf00      	nop
 8002730:	20000218 	.word	0x20000218

08002734 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002734:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002736:	4802      	ldr	r0, [pc, #8]	; (8002740 <SPI1_IRQHandler+0xc>)
 8002738:	f7ff f928 	bl	800198c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800273c:	bd08      	pop	{r3, pc}
 800273e:	bf00      	nop
 8002740:	20000170 	.word	0x20000170

08002744 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8002744:	b508      	push	{r3, lr}
 8002746:	4603      	mov	r3, r0
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002748:	4a0b      	ldr	r2, [pc, #44]	; (8002778 <_sbrk+0x34>)
 800274a:	6812      	ldr	r2, [r2, #0]
 800274c:	b142      	cbz	r2, 8002760 <_sbrk+0x1c>
		heap_end = &end;

	prev_heap_end = heap_end;
 800274e:	4a0a      	ldr	r2, [pc, #40]	; (8002778 <_sbrk+0x34>)
 8002750:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 8002752:	4403      	add	r3, r0
 8002754:	466a      	mov	r2, sp
 8002756:	4293      	cmp	r3, r2
 8002758:	d806      	bhi.n	8002768 <_sbrk+0x24>
//		abort();
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 800275a:	4a07      	ldr	r2, [pc, #28]	; (8002778 <_sbrk+0x34>)
 800275c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 800275e:	bd08      	pop	{r3, pc}
		heap_end = &end;
 8002760:	4a05      	ldr	r2, [pc, #20]	; (8002778 <_sbrk+0x34>)
 8002762:	4906      	ldr	r1, [pc, #24]	; (800277c <_sbrk+0x38>)
 8002764:	6011      	str	r1, [r2, #0]
 8002766:	e7f2      	b.n	800274e <_sbrk+0xa>
		errno = ENOMEM;
 8002768:	f000 f872 	bl	8002850 <__errno>
 800276c:	230c      	movs	r3, #12
 800276e:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8002770:	f04f 30ff 	mov.w	r0, #4294967295
 8002774:	e7f3      	b.n	800275e <_sbrk+0x1a>
 8002776:	bf00      	nop
 8002778:	200000e8 	.word	0x200000e8
 800277c:	200002b8 	.word	0x200002b8

08002780 <SystemInit>:
  */
void SystemInit(void)
{
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002780:	4b05      	ldr	r3, [pc, #20]	; (8002798 <SystemInit+0x18>)
 8002782:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002786:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 800278a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800278e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002792:	609a      	str	r2, [r3, #8]
#endif
}
 8002794:	4770      	bx	lr
 8002796:	bf00      	nop
 8002798:	e000ed00 	.word	0xe000ed00

0800279c <MX_TIM17_Init>:

TIM_HandleTypeDef htim17;

/* TIM17 init function */
void MX_TIM17_Init(void)
{
 800279c:	b508      	push	{r3, lr}
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 800279e:	480a      	ldr	r0, [pc, #40]	; (80027c8 <MX_TIM17_Init+0x2c>)
 80027a0:	4b0a      	ldr	r3, [pc, #40]	; (80027cc <MX_TIM17_Init+0x30>)
 80027a2:	6003      	str	r3, [r0, #0]
  htim17.Init.Prescaler = 72 -1 ;
 80027a4:	2347      	movs	r3, #71	; 0x47
 80027a6:	6043      	str	r3, [r0, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027a8:	2300      	movs	r3, #0
 80027aa:	6083      	str	r3, [r0, #8]
  htim17.Init.Period = 65535 - 1;
 80027ac:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80027b0:	60c2      	str	r2, [r0, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027b2:	6103      	str	r3, [r0, #16]
  htim17.Init.RepetitionCounter = 0;
 80027b4:	6143      	str	r3, [r0, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027b6:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80027b8:	f7ff fa1e 	bl	8001bf8 <HAL_TIM_Base_Init>
 80027bc:	b900      	cbnz	r0, 80027c0 <MX_TIM17_Init+0x24>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 80027be:	bd08      	pop	{r3, pc}
    Error_Handler();
 80027c0:	f7ff fe92 	bl	80024e8 <Error_Handler>
}
 80027c4:	e7fb      	b.n	80027be <MX_TIM17_Init+0x22>
 80027c6:	bf00      	nop
 80027c8:	2000025c 	.word	0x2000025c
 80027cc:	40014800 	.word	0x40014800

080027d0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM17)
 80027d0:	6802      	ldr	r2, [r0, #0]
 80027d2:	4b09      	ldr	r3, [pc, #36]	; (80027f8 <HAL_TIM_Base_MspInit+0x28>)
 80027d4:	429a      	cmp	r2, r3
 80027d6:	d000      	beq.n	80027da <HAL_TIM_Base_MspInit+0xa>
 80027d8:	4770      	bx	lr
{
 80027da:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* TIM17 clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 80027dc:	f503 4348 	add.w	r3, r3, #51200	; 0xc800
 80027e0:	699a      	ldr	r2, [r3, #24]
 80027e2:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80027e6:	619a      	str	r2, [r3, #24]
 80027e8:	699b      	ldr	r3, [r3, #24]
 80027ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027ee:	9301      	str	r3, [sp, #4]
 80027f0:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 80027f2:	b002      	add	sp, #8
 80027f4:	4770      	bx	lr
 80027f6:	bf00      	nop
 80027f8:	40014800 	.word	0x40014800

080027fc <Reset_Handler>:
 80027fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002834 <LoopForever+0x2>
 8002800:	480d      	ldr	r0, [pc, #52]	; (8002838 <LoopForever+0x6>)
 8002802:	490e      	ldr	r1, [pc, #56]	; (800283c <LoopForever+0xa>)
 8002804:	4a0e      	ldr	r2, [pc, #56]	; (8002840 <LoopForever+0xe>)
 8002806:	2300      	movs	r3, #0
 8002808:	e002      	b.n	8002810 <LoopCopyDataInit>

0800280a <CopyDataInit>:
 800280a:	58d4      	ldr	r4, [r2, r3]
 800280c:	50c4      	str	r4, [r0, r3]
 800280e:	3304      	adds	r3, #4

08002810 <LoopCopyDataInit>:
 8002810:	18c4      	adds	r4, r0, r3
 8002812:	428c      	cmp	r4, r1
 8002814:	d3f9      	bcc.n	800280a <CopyDataInit>
 8002816:	4a0b      	ldr	r2, [pc, #44]	; (8002844 <LoopForever+0x12>)
 8002818:	4c0b      	ldr	r4, [pc, #44]	; (8002848 <LoopForever+0x16>)
 800281a:	2300      	movs	r3, #0
 800281c:	e001      	b.n	8002822 <LoopFillZerobss>

0800281e <FillZerobss>:
 800281e:	6013      	str	r3, [r2, #0]
 8002820:	3204      	adds	r2, #4

08002822 <LoopFillZerobss>:
 8002822:	42a2      	cmp	r2, r4
 8002824:	d3fb      	bcc.n	800281e <FillZerobss>
 8002826:	f7ff ffab 	bl	8002780 <SystemInit>
 800282a:	f000 f817 	bl	800285c <__libc_init_array>
 800282e:	f7ff fe09 	bl	8002444 <main>

08002832 <LoopForever>:
 8002832:	e7fe      	b.n	8002832 <LoopForever>
 8002834:	2000a000 	.word	0x2000a000
 8002838:	20000000 	.word	0x20000000
 800283c:	20000074 	.word	0x20000074
 8002840:	08002dac 	.word	0x08002dac
 8002844:	20000074 	.word	0x20000074
 8002848:	200002b8 	.word	0x200002b8

0800284c <ADC1_2_IRQHandler>:
 800284c:	e7fe      	b.n	800284c <ADC1_2_IRQHandler>
	...

08002850 <__errno>:
 8002850:	4b01      	ldr	r3, [pc, #4]	; (8002858 <__errno+0x8>)
 8002852:	6818      	ldr	r0, [r3, #0]
 8002854:	4770      	bx	lr
 8002856:	bf00      	nop
 8002858:	20000010 	.word	0x20000010

0800285c <__libc_init_array>:
 800285c:	b570      	push	{r4, r5, r6, lr}
 800285e:	4d0d      	ldr	r5, [pc, #52]	; (8002894 <__libc_init_array+0x38>)
 8002860:	4c0d      	ldr	r4, [pc, #52]	; (8002898 <__libc_init_array+0x3c>)
 8002862:	1b64      	subs	r4, r4, r5
 8002864:	10a4      	asrs	r4, r4, #2
 8002866:	2600      	movs	r6, #0
 8002868:	42a6      	cmp	r6, r4
 800286a:	d109      	bne.n	8002880 <__libc_init_array+0x24>
 800286c:	4d0b      	ldr	r5, [pc, #44]	; (800289c <__libc_init_array+0x40>)
 800286e:	4c0c      	ldr	r4, [pc, #48]	; (80028a0 <__libc_init_array+0x44>)
 8002870:	f000 f8ae 	bl	80029d0 <_init>
 8002874:	1b64      	subs	r4, r4, r5
 8002876:	10a4      	asrs	r4, r4, #2
 8002878:	2600      	movs	r6, #0
 800287a:	42a6      	cmp	r6, r4
 800287c:	d105      	bne.n	800288a <__libc_init_array+0x2e>
 800287e:	bd70      	pop	{r4, r5, r6, pc}
 8002880:	f855 3b04 	ldr.w	r3, [r5], #4
 8002884:	4798      	blx	r3
 8002886:	3601      	adds	r6, #1
 8002888:	e7ee      	b.n	8002868 <__libc_init_array+0xc>
 800288a:	f855 3b04 	ldr.w	r3, [r5], #4
 800288e:	4798      	blx	r3
 8002890:	3601      	adds	r6, #1
 8002892:	e7f2      	b.n	800287a <__libc_init_array+0x1e>
 8002894:	08002da4 	.word	0x08002da4
 8002898:	08002da4 	.word	0x08002da4
 800289c:	08002da4 	.word	0x08002da4
 80028a0:	08002da8 	.word	0x08002da8

080028a4 <malloc>:
 80028a4:	4b02      	ldr	r3, [pc, #8]	; (80028b0 <malloc+0xc>)
 80028a6:	4601      	mov	r1, r0
 80028a8:	6818      	ldr	r0, [r3, #0]
 80028aa:	f000 b819 	b.w	80028e0 <_malloc_r>
 80028ae:	bf00      	nop
 80028b0:	20000010 	.word	0x20000010

080028b4 <memcpy>:
 80028b4:	440a      	add	r2, r1
 80028b6:	4291      	cmp	r1, r2
 80028b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80028bc:	d100      	bne.n	80028c0 <memcpy+0xc>
 80028be:	4770      	bx	lr
 80028c0:	b510      	push	{r4, lr}
 80028c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80028c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80028ca:	4291      	cmp	r1, r2
 80028cc:	d1f9      	bne.n	80028c2 <memcpy+0xe>
 80028ce:	bd10      	pop	{r4, pc}

080028d0 <memset>:
 80028d0:	4402      	add	r2, r0
 80028d2:	4603      	mov	r3, r0
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d100      	bne.n	80028da <memset+0xa>
 80028d8:	4770      	bx	lr
 80028da:	f803 1b01 	strb.w	r1, [r3], #1
 80028de:	e7f9      	b.n	80028d4 <memset+0x4>

080028e0 <_malloc_r>:
 80028e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028e2:	1ccd      	adds	r5, r1, #3
 80028e4:	f025 0503 	bic.w	r5, r5, #3
 80028e8:	3508      	adds	r5, #8
 80028ea:	2d0c      	cmp	r5, #12
 80028ec:	bf38      	it	cc
 80028ee:	250c      	movcc	r5, #12
 80028f0:	2d00      	cmp	r5, #0
 80028f2:	4606      	mov	r6, r0
 80028f4:	db01      	blt.n	80028fa <_malloc_r+0x1a>
 80028f6:	42a9      	cmp	r1, r5
 80028f8:	d903      	bls.n	8002902 <_malloc_r+0x22>
 80028fa:	230c      	movs	r3, #12
 80028fc:	6033      	str	r3, [r6, #0]
 80028fe:	2000      	movs	r0, #0
 8002900:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002902:	f000 f857 	bl	80029b4 <__malloc_lock>
 8002906:	4921      	ldr	r1, [pc, #132]	; (800298c <_malloc_r+0xac>)
 8002908:	680a      	ldr	r2, [r1, #0]
 800290a:	4614      	mov	r4, r2
 800290c:	b99c      	cbnz	r4, 8002936 <_malloc_r+0x56>
 800290e:	4f20      	ldr	r7, [pc, #128]	; (8002990 <_malloc_r+0xb0>)
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	b923      	cbnz	r3, 800291e <_malloc_r+0x3e>
 8002914:	4621      	mov	r1, r4
 8002916:	4630      	mov	r0, r6
 8002918:	f000 f83c 	bl	8002994 <_sbrk_r>
 800291c:	6038      	str	r0, [r7, #0]
 800291e:	4629      	mov	r1, r5
 8002920:	4630      	mov	r0, r6
 8002922:	f000 f837 	bl	8002994 <_sbrk_r>
 8002926:	1c43      	adds	r3, r0, #1
 8002928:	d123      	bne.n	8002972 <_malloc_r+0x92>
 800292a:	230c      	movs	r3, #12
 800292c:	6033      	str	r3, [r6, #0]
 800292e:	4630      	mov	r0, r6
 8002930:	f000 f846 	bl	80029c0 <__malloc_unlock>
 8002934:	e7e3      	b.n	80028fe <_malloc_r+0x1e>
 8002936:	6823      	ldr	r3, [r4, #0]
 8002938:	1b5b      	subs	r3, r3, r5
 800293a:	d417      	bmi.n	800296c <_malloc_r+0x8c>
 800293c:	2b0b      	cmp	r3, #11
 800293e:	d903      	bls.n	8002948 <_malloc_r+0x68>
 8002940:	6023      	str	r3, [r4, #0]
 8002942:	441c      	add	r4, r3
 8002944:	6025      	str	r5, [r4, #0]
 8002946:	e004      	b.n	8002952 <_malloc_r+0x72>
 8002948:	6863      	ldr	r3, [r4, #4]
 800294a:	42a2      	cmp	r2, r4
 800294c:	bf0c      	ite	eq
 800294e:	600b      	streq	r3, [r1, #0]
 8002950:	6053      	strne	r3, [r2, #4]
 8002952:	4630      	mov	r0, r6
 8002954:	f000 f834 	bl	80029c0 <__malloc_unlock>
 8002958:	f104 000b 	add.w	r0, r4, #11
 800295c:	1d23      	adds	r3, r4, #4
 800295e:	f020 0007 	bic.w	r0, r0, #7
 8002962:	1ac2      	subs	r2, r0, r3
 8002964:	d0cc      	beq.n	8002900 <_malloc_r+0x20>
 8002966:	1a1b      	subs	r3, r3, r0
 8002968:	50a3      	str	r3, [r4, r2]
 800296a:	e7c9      	b.n	8002900 <_malloc_r+0x20>
 800296c:	4622      	mov	r2, r4
 800296e:	6864      	ldr	r4, [r4, #4]
 8002970:	e7cc      	b.n	800290c <_malloc_r+0x2c>
 8002972:	1cc4      	adds	r4, r0, #3
 8002974:	f024 0403 	bic.w	r4, r4, #3
 8002978:	42a0      	cmp	r0, r4
 800297a:	d0e3      	beq.n	8002944 <_malloc_r+0x64>
 800297c:	1a21      	subs	r1, r4, r0
 800297e:	4630      	mov	r0, r6
 8002980:	f000 f808 	bl	8002994 <_sbrk_r>
 8002984:	3001      	adds	r0, #1
 8002986:	d1dd      	bne.n	8002944 <_malloc_r+0x64>
 8002988:	e7cf      	b.n	800292a <_malloc_r+0x4a>
 800298a:	bf00      	nop
 800298c:	200000f0 	.word	0x200000f0
 8002990:	200000f4 	.word	0x200000f4

08002994 <_sbrk_r>:
 8002994:	b538      	push	{r3, r4, r5, lr}
 8002996:	4d06      	ldr	r5, [pc, #24]	; (80029b0 <_sbrk_r+0x1c>)
 8002998:	2300      	movs	r3, #0
 800299a:	4604      	mov	r4, r0
 800299c:	4608      	mov	r0, r1
 800299e:	602b      	str	r3, [r5, #0]
 80029a0:	f7ff fed0 	bl	8002744 <_sbrk>
 80029a4:	1c43      	adds	r3, r0, #1
 80029a6:	d102      	bne.n	80029ae <_sbrk_r+0x1a>
 80029a8:	682b      	ldr	r3, [r5, #0]
 80029aa:	b103      	cbz	r3, 80029ae <_sbrk_r+0x1a>
 80029ac:	6023      	str	r3, [r4, #0]
 80029ae:	bd38      	pop	{r3, r4, r5, pc}
 80029b0:	200002a8 	.word	0x200002a8

080029b4 <__malloc_lock>:
 80029b4:	4801      	ldr	r0, [pc, #4]	; (80029bc <__malloc_lock+0x8>)
 80029b6:	f000 b809 	b.w	80029cc <__retarget_lock_acquire_recursive>
 80029ba:	bf00      	nop
 80029bc:	200002b0 	.word	0x200002b0

080029c0 <__malloc_unlock>:
 80029c0:	4801      	ldr	r0, [pc, #4]	; (80029c8 <__malloc_unlock+0x8>)
 80029c2:	f000 b804 	b.w	80029ce <__retarget_lock_release_recursive>
 80029c6:	bf00      	nop
 80029c8:	200002b0 	.word	0x200002b0

080029cc <__retarget_lock_acquire_recursive>:
 80029cc:	4770      	bx	lr

080029ce <__retarget_lock_release_recursive>:
 80029ce:	4770      	bx	lr

080029d0 <_init>:
 80029d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029d2:	bf00      	nop
 80029d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029d6:	bc08      	pop	{r3}
 80029d8:	469e      	mov	lr, r3
 80029da:	4770      	bx	lr

080029dc <_fini>:
 80029dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029de:	bf00      	nop
 80029e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029e2:	bc08      	pop	{r3}
 80029e4:	469e      	mov	lr, r3
 80029e6:	4770      	bx	lr
